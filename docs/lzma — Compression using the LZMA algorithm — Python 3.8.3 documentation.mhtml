From: <Saved by Blink>
Snapshot-Content-Location: https://docs.python.org/3.8/library/lzma.html
Subject: =?utf-8?Q?lzma=20=E2=80=94=20Compression=20using=20the=20LZMA=20algorithm?=
 =?utf-8?Q?=20=E2=80=94=20Python=203.8.3=20documentation?=
Date: Wed, 3 Jun 2020 09:43:44 -0000
MIME-Version: 1.0
Content-Type: multipart/related;
	type="text/html";
	boundary="----MultipartBoundary--phPsYHfPUJlpNkG3NxOQHszjJAKLekE70eG0JaOVhQ----"


------MultipartBoundary--phPsYHfPUJlpNkG3NxOQHszjJAKLekE70eG0JaOVhQ----
Content-Type: text/html
Content-ID: <frame-51B18E51073D6B27B8A78D400AFC4B79@mhtml.blink>
Content-Transfer-Encoding: quoted-printable
Content-Location: https://docs.python.org/3.8/library/lzma.html

<!DOCTYPE html><html xmlns=3D"http://www.w3.org/1999/xhtml"><head><meta htt=
p-equiv=3D"Content-Type" content=3D"text/html; charset=3DUTF-8"><link rel=
=3D"stylesheet" type=3D"text/css" href=3D"cid:css-0c71ada2-dbf3-4404-a6a5-3=
b0be4d6bd08@mhtml.blink" />
   =20
    <title>lzma =E2=80=94 Compression using the LZMA algorithm =E2=80=94 Py=
thon 3.8.3 documentation</title>
    <link rel=3D"stylesheet" href=3D"https://docs.python.org/3.8/_static/py=
doctheme.css" type=3D"text/css">
    <link rel=3D"stylesheet" href=3D"https://docs.python.org/3.8/_static/py=
gments.css" type=3D"text/css">
   =20
   =20
   =20
   =20
   =20
   =20
   =20
   =20
   =20
    <link rel=3D"search" type=3D"application/opensearchdescription+xml" tit=
le=3D"Search within Python 3.8.3 documentation" href=3D"https://docs.python=
.org/3.8/_static/opensearch.xml">
    <link rel=3D"author" title=3D"About these documents" href=3D"https://do=
cs.python.org/3.8/about.html">
    <link rel=3D"index" title=3D"Index" href=3D"https://docs.python.org/3.8=
/genindex.html">
    <link rel=3D"search" title=3D"Search" href=3D"https://docs.python.org/3=
.8/search.html">
    <link rel=3D"copyright" title=3D"Copyright" href=3D"https://docs.python=
.org/3.8/copyright.html">
    <link rel=3D"next" title=3D"zipfile =E2=80=94 Work with ZIP archives" h=
ref=3D"https://docs.python.org/3.8/library/zipfile.html">
    <link rel=3D"prev" title=3D"bz2 =E2=80=94 Support for bzip2 compression=
" href=3D"https://docs.python.org/3.8/library/bz2.html">
    <link rel=3D"canonical" href=3D"https://docs.python.org/3/library/lzma.=
html">
   =20
     =20
     =20
     =20
   =20

   =20
   =20

    <link rel=3D"shortcut icon" type=3D"image/png" href=3D"https://docs.pyt=
hon.org/3.8/_static/py.png">
   =20
   =20
   =20
    =20


  </head><body>
 =20
    <div class=3D"related" role=3D"navigation" aria-label=3D"related naviga=
tion">
      <h3>Navigation</h3>
      <ul>
        <li class=3D"right" style=3D"margin-right: 10px">
          <a href=3D"https://docs.python.org/3.8/genindex.html" title=3D"Ge=
neral Index" accesskey=3D"I">index</a></li>
        <li class=3D"right">
          <a href=3D"https://docs.python.org/3.8/py-modindex.html" title=3D=
"Python Module Index">modules</a> |</li>
        <li class=3D"right">
          <a href=3D"https://docs.python.org/3.8/library/zipfile.html" titl=
e=3D"zipfile =E2=80=94 Work with ZIP archives" accesskey=3D"N">next</a> |</=
li>
        <li class=3D"right">
          <a href=3D"https://docs.python.org/3.8/library/bz2.html" title=3D=
"bz2 =E2=80=94 Support for bzip2 compression" accesskey=3D"P">previous</a> =
|</li>

    <li><img src=3D"https://docs.python.org/3.8/_static/py.png" alt=3D"" st=
yle=3D"vertical-align: middle; margin-top: -1px"></li>
    <li><a href=3D"https://www.python.org/">Python</a> =C2=BB</li>
   =20

    <li>
      <span class=3D"language_switcher_placeholder"><select><option value=
=3D"en" selected=3D"selected">English</option><option value=3D"fr">French</=
option><option value=3D"ja">Japanese</option><option value=3D"ko">Korean</o=
ption><option value=3D"pt-br">Brazilian Portuguese</option><option value=3D=
"zh-cn">Simplified Chinese</option></select></span>
      <span class=3D"version_switcher_placeholder"><select><option value=3D=
"3.10">dev (3.10)</option><option value=3D"3.9">pre (3.9)</option><option v=
alue=3D"3.8" selected=3D"selected">3.8.3</option><option value=3D"3.7">3.7<=
/option><option value=3D"3.6">3.6</option><option value=3D"3.5">3.5</option=
><option value=3D"2.7">2.7</option></select></span>
      <a href=3D"https://docs.python.org/3.8/index.html">Documentation </a>=
 =C2=BB
    </li>

          <li class=3D"nav-item nav-item-1"><a href=3D"https://docs.python.=
org/3.8/library/index.html">The Python Standard Library</a> =C2=BB</li>
          <li class=3D"nav-item nav-item-2"><a href=3D"https://docs.python.=
org/3.8/library/archiving.html" accesskey=3D"U">Data Compression and Archiv=
ing</a> =C2=BB</li>
    <li class=3D"right">
       =20

    <div class=3D"inline-search" style=3D"" role=3D"search">
        <form class=3D"inline-search" action=3D"https://docs.python.org/3.8=
/search.html" method=3D"get">
          <input placeholder=3D"Quick search" type=3D"text" name=3D"q">
          <input type=3D"submit" value=3D"Go">
         =20
         =20
        </form>
    </div>
   =20
         |
    </li>

      </ul>
    </div>   =20

    <div class=3D"document">
      <div class=3D"documentwrapper">
        <div class=3D"bodywrapper">
          <div class=3D"body" role=3D"main">
           =20
  <div class=3D"section" id=3D"module-lzma">
<span id=3D"lzma-compression-using-the-lzma-algorithm"></span><h1><a class=
=3D"reference internal" href=3D"https://docs.python.org/3.8/library/lzma.ht=
ml#module-lzma" title=3D"lzma: A Python wrapper for the liblzma compression=
 library."><code class=3D"xref py py-mod docutils literal notranslate"><spa=
n class=3D"pre">lzma</span></code></a> =E2=80=94 Compression using the LZMA=
 algorithm<a class=3D"headerlink" href=3D"https://docs.python.org/3.8/libra=
ry/lzma.html#module-lzma" title=3D"Permalink to this headline">=C2=B6</a></=
h1>
<div class=3D"versionadded">
<p><span class=3D"versionmodified added">New in version 3.3.</span></p>
</div>
<p><strong>Source code:</strong> <a class=3D"reference external" href=3D"ht=
tps://github.com/python/cpython/tree/3.8/Lib/lzma.py">Lib/lzma.py</a></p>
<hr class=3D"docutils">
<p>This module provides classes and convenience functions for compressing a=
nd
decompressing data using the LZMA compression algorithm. Also included is a=
 file
interface supporting the <code class=3D"docutils literal notranslate"><span=
 class=3D"pre">.xz</span></code> and legacy <code class=3D"docutils literal=
 notranslate"><span class=3D"pre">.lzma</span></code> file formats used by =
the
<strong class=3D"program">xz</strong> utility, as well as raw compressed st=
reams.</p>
<p>The interface provided by this module is very similar to that of the <a =
class=3D"reference internal" href=3D"https://docs.python.org/3.8/library/bz=
2.html#module-bz2" title=3D"bz2: Interfaces for bzip2 compression and decom=
pression."><code class=3D"xref py py-mod docutils literal notranslate"><spa=
n class=3D"pre">bz2</span></code></a>
module. However, note that <a class=3D"reference internal" href=3D"https://=
docs.python.org/3.8/library/lzma.html#lzma.LZMAFile" title=3D"lzma.LZMAFile=
"><code class=3D"xref py py-class docutils literal notranslate"><span class=
=3D"pre">LZMAFile</span></code></a> is <em>not</em> thread-safe, unlike
<a class=3D"reference internal" href=3D"https://docs.python.org/3.8/library=
/bz2.html#bz2.BZ2File" title=3D"bz2.BZ2File"><code class=3D"xref py py-clas=
s docutils literal notranslate"><span class=3D"pre">bz2.BZ2File</span></cod=
e></a>, so if you need to use a single <a class=3D"reference internal" href=
=3D"https://docs.python.org/3.8/library/lzma.html#lzma.LZMAFile" title=3D"l=
zma.LZMAFile"><code class=3D"xref py py-class docutils literal notranslate"=
><span class=3D"pre">LZMAFile</span></code></a> instance
from multiple threads, it is necessary to protect it with a lock.</p>
<dl class=3D"exception">
<dt id=3D"lzma.LZMAError">
<em class=3D"property">exception </em><code class=3D"sig-prename descclassn=
ame">lzma.</code><code class=3D"sig-name descname">LZMAError</code><a class=
=3D"headerlink" href=3D"https://docs.python.org/3.8/library/lzma.html#lzma.=
LZMAError" title=3D"Permalink to this definition">=C2=B6</a></dt>
<dd><p>This exception is raised when an error occurs during compression or
decompression, or while initializing the compressor/decompressor state.</p>
</dd></dl>

<div class=3D"section" id=3D"reading-and-writing-compressed-files">
<h2>Reading and writing compressed files<a class=3D"headerlink" href=3D"htt=
ps://docs.python.org/3.8/library/lzma.html#reading-and-writing-compressed-f=
iles" title=3D"Permalink to this headline">=C2=B6</a></h2>
<dl class=3D"function">
<dt id=3D"lzma.open">
<code class=3D"sig-prename descclassname">lzma.</code><code class=3D"sig-na=
me descname">open</code><span class=3D"sig-paren">(</span><em class=3D"sig-=
param">filename</em>, <em class=3D"sig-param">mode=3D"rb"</em>, <em class=
=3D"sig-param">*</em>, <em class=3D"sig-param">format=3DNone</em>, <em clas=
s=3D"sig-param">check=3D-1</em>, <em class=3D"sig-param">preset=3DNone</em>=
, <em class=3D"sig-param">filters=3DNone</em>, <em class=3D"sig-param">enco=
ding=3DNone</em>, <em class=3D"sig-param">errors=3DNone</em>, <em class=3D"=
sig-param">newline=3DNone</em><span class=3D"sig-paren">)</span><a class=3D=
"headerlink" href=3D"https://docs.python.org/3.8/library/lzma.html#lzma.ope=
n" title=3D"Permalink to this definition">=C2=B6</a></dt>
<dd><p>Open an LZMA-compressed file in binary or text mode, returning a <a =
class=3D"reference internal" href=3D"https://docs.python.org/3.8/glossary.h=
tml#term-file-object"><span class=3D"xref std std-term">file
object</span></a>.</p>
<p>The <em>filename</em> argument can be either an actual file name (given =
as a
<a class=3D"reference internal" href=3D"https://docs.python.org/3.8/library=
/stdtypes.html#str" title=3D"str"><code class=3D"xref py py-class docutils =
literal notranslate"><span class=3D"pre">str</span></code></a>, <a class=3D=
"reference internal" href=3D"https://docs.python.org/3.8/library/stdtypes.h=
tml#bytes" title=3D"bytes"><code class=3D"xref py py-class docutils literal=
 notranslate"><span class=3D"pre">bytes</span></code></a> or <a class=3D"re=
ference internal" href=3D"https://docs.python.org/3.8/glossary.html#term-pa=
th-like-object"><span class=3D"xref std std-term">path-like</span></a> obje=
ct), in
which case the named file is opened, or it can be an existing file object
to read from or write to.</p>
<p>The <em>mode</em> argument can be any of <code class=3D"docutils literal=
 notranslate"><span class=3D"pre">"r"</span></code>, <code class=3D"docutil=
s literal notranslate"><span class=3D"pre">"rb"</span></code>, <code class=
=3D"docutils literal notranslate"><span class=3D"pre">"w"</span></code>, <c=
ode class=3D"docutils literal notranslate"><span class=3D"pre">"wb"</span><=
/code>,
<code class=3D"docutils literal notranslate"><span class=3D"pre">"x"</span>=
</code>, <code class=3D"docutils literal notranslate"><span class=3D"pre">"=
xb"</span></code>, <code class=3D"docutils literal notranslate"><span class=
=3D"pre">"a"</span></code> or <code class=3D"docutils literal notranslate">=
<span class=3D"pre">"ab"</span></code> for binary mode, or <code class=3D"d=
ocutils literal notranslate"><span class=3D"pre">"rt"</span></code>,
<code class=3D"docutils literal notranslate"><span class=3D"pre">"wt"</span=
></code>, <code class=3D"docutils literal notranslate"><span class=3D"pre">=
"xt"</span></code>, or <code class=3D"docutils literal notranslate"><span c=
lass=3D"pre">"at"</span></code> for text mode. The default is <code class=
=3D"docutils literal notranslate"><span class=3D"pre">"rb"</span></code>.</=
p>
<p>When opening a file for reading, the <em>format</em> and <em>filters</em=
> arguments have
the same meanings as for <a class=3D"reference internal" href=3D"https://do=
cs.python.org/3.8/library/lzma.html#lzma.LZMADecompressor" title=3D"lzma.LZ=
MADecompressor"><code class=3D"xref py py-class docutils literal notranslat=
e"><span class=3D"pre">LZMADecompressor</span></code></a>. In this case, th=
e <em>check</em>
and <em>preset</em> arguments should not be used.</p>
<p>When opening a file for writing, the <em>format</em>, <em>check</em>, <e=
m>preset</em> and
<em>filters</em> arguments have the same meanings as for <a class=3D"refere=
nce internal" href=3D"https://docs.python.org/3.8/library/lzma.html#lzma.LZ=
MACompressor" title=3D"lzma.LZMACompressor"><code class=3D"xref py py-class=
 docutils literal notranslate"><span class=3D"pre">LZMACompressor</span></c=
ode></a>.</p>
<p>For binary mode, this function is equivalent to the <a class=3D"referenc=
e internal" href=3D"https://docs.python.org/3.8/library/lzma.html#lzma.LZMA=
File" title=3D"lzma.LZMAFile"><code class=3D"xref py py-class docutils lite=
ral notranslate"><span class=3D"pre">LZMAFile</span></code></a>
constructor: <code class=3D"docutils literal notranslate"><span class=3D"pr=
e">LZMAFile(filename,</span> <span class=3D"pre">mode,</span> <span class=
=3D"pre">...)</span></code>. In this case, the <em>encoding</em>,
<em>errors</em> and <em>newline</em> arguments must not be provided.</p>
<p>For text mode, a <a class=3D"reference internal" href=3D"https://docs.py=
thon.org/3.8/library/lzma.html#lzma.LZMAFile" title=3D"lzma.LZMAFile"><code=
 class=3D"xref py py-class docutils literal notranslate"><span class=3D"pre=
">LZMAFile</span></code></a> object is created, and wrapped in an
<a class=3D"reference internal" href=3D"https://docs.python.org/3.8/library=
/io.html#io.TextIOWrapper" title=3D"io.TextIOWrapper"><code class=3D"xref p=
y py-class docutils literal notranslate"><span class=3D"pre">io.TextIOWrapp=
er</span></code></a> instance with the specified encoding, error
handling behavior, and line ending(s).</p>
<div class=3D"versionchanged">
<p><span class=3D"versionmodified changed">Changed in version 3.4: </span>A=
dded support for the <code class=3D"docutils literal notranslate"><span cla=
ss=3D"pre">"x"</span></code>, <code class=3D"docutils literal notranslate">=
<span class=3D"pre">"xb"</span></code> and <code class=3D"docutils literal =
notranslate"><span class=3D"pre">"xt"</span></code> modes.</p>
</div>
<div class=3D"versionchanged">
<p><span class=3D"versionmodified changed">Changed in version 3.6: </span>A=
ccepts a <a class=3D"reference internal" href=3D"https://docs.python.org/3.=
8/glossary.html#term-path-like-object"><span class=3D"xref std std-term">pa=
th-like object</span></a>.</p>
</div>
</dd></dl>

<dl class=3D"class">
<dt id=3D"lzma.LZMAFile">
<em class=3D"property">class </em><code class=3D"sig-prename descclassname"=
>lzma.</code><code class=3D"sig-name descname">LZMAFile</code><span class=
=3D"sig-paren">(</span><em class=3D"sig-param">filename=3DNone</em>, <em cl=
ass=3D"sig-param">mode=3D"r"</em>, <em class=3D"sig-param">*</em>, <em clas=
s=3D"sig-param">format=3DNone</em>, <em class=3D"sig-param">check=3D-1</em>=
, <em class=3D"sig-param">preset=3DNone</em>, <em class=3D"sig-param">filte=
rs=3DNone</em><span class=3D"sig-paren">)</span><a class=3D"headerlink" hre=
f=3D"https://docs.python.org/3.8/library/lzma.html#lzma.LZMAFile" title=3D"=
Permalink to this definition">=C2=B6</a></dt>
<dd><p>Open an LZMA-compressed file in binary mode.</p>
<p>An <a class=3D"reference internal" href=3D"https://docs.python.org/3.8/l=
ibrary/lzma.html#lzma.LZMAFile" title=3D"lzma.LZMAFile"><code class=3D"xref=
 py py-class docutils literal notranslate"><span class=3D"pre">LZMAFile</sp=
an></code></a> can wrap an already-open <a class=3D"reference internal" hre=
f=3D"https://docs.python.org/3.8/glossary.html#term-file-object"><span clas=
s=3D"xref std std-term">file object</span></a>, or operate
directly on a named file. The <em>filename</em> argument specifies either t=
he file
object to wrap, or the name of the file to open (as a <a class=3D"reference=
 internal" href=3D"https://docs.python.org/3.8/library/stdtypes.html#str" t=
itle=3D"str"><code class=3D"xref py py-class docutils literal notranslate">=
<span class=3D"pre">str</span></code></a>,
<a class=3D"reference internal" href=3D"https://docs.python.org/3.8/library=
/stdtypes.html#bytes" title=3D"bytes"><code class=3D"xref py py-class docut=
ils literal notranslate"><span class=3D"pre">bytes</span></code></a> or <a =
class=3D"reference internal" href=3D"https://docs.python.org/3.8/glossary.h=
tml#term-path-like-object"><span class=3D"xref std std-term">path-like</spa=
n></a> object). When wrapping an
existing file object, the wrapped file will not be closed when the
<a class=3D"reference internal" href=3D"https://docs.python.org/3.8/library=
/lzma.html#lzma.LZMAFile" title=3D"lzma.LZMAFile"><code class=3D"xref py py=
-class docutils literal notranslate"><span class=3D"pre">LZMAFile</span></c=
ode></a> is closed.</p>
<p>The <em>mode</em> argument can be either <code class=3D"docutils literal=
 notranslate"><span class=3D"pre">"r"</span></code> for reading (default), =
<code class=3D"docutils literal notranslate"><span class=3D"pre">"w"</span>=
</code> for
overwriting, <code class=3D"docutils literal notranslate"><span class=3D"pr=
e">"x"</span></code> for exclusive creation, or <code class=3D"docutils lit=
eral notranslate"><span class=3D"pre">"a"</span></code> for appending. Thes=
e
can equivalently be given as <code class=3D"docutils literal notranslate"><=
span class=3D"pre">"rb"</span></code>, <code class=3D"docutils literal notr=
anslate"><span class=3D"pre">"wb"</span></code>, <code class=3D"docutils li=
teral notranslate"><span class=3D"pre">"xb"</span></code> and <code class=
=3D"docutils literal notranslate"><span class=3D"pre">"ab"</span></code>
respectively.</p>
<p>If <em>filename</em> is a file object (rather than an actual file name),=
 a mode of
<code class=3D"docutils literal notranslate"><span class=3D"pre">"w"</span>=
</code> does not truncate the file, and is instead equivalent to <code clas=
s=3D"docutils literal notranslate"><span class=3D"pre">"a"</span></code>.</=
p>
<p>When opening a file for reading, the input file may be the concatenation=
 of
multiple separate compressed streams. These are transparently decoded as a
single logical stream.</p>
<p>When opening a file for reading, the <em>format</em> and <em>filters</em=
> arguments have
the same meanings as for <a class=3D"reference internal" href=3D"https://do=
cs.python.org/3.8/library/lzma.html#lzma.LZMADecompressor" title=3D"lzma.LZ=
MADecompressor"><code class=3D"xref py py-class docutils literal notranslat=
e"><span class=3D"pre">LZMADecompressor</span></code></a>. In this case, th=
e <em>check</em>
and <em>preset</em> arguments should not be used.</p>
<p>When opening a file for writing, the <em>format</em>, <em>check</em>, <e=
m>preset</em> and
<em>filters</em> arguments have the same meanings as for <a class=3D"refere=
nce internal" href=3D"https://docs.python.org/3.8/library/lzma.html#lzma.LZ=
MACompressor" title=3D"lzma.LZMACompressor"><code class=3D"xref py py-class=
 docutils literal notranslate"><span class=3D"pre">LZMACompressor</span></c=
ode></a>.</p>
<p><a class=3D"reference internal" href=3D"https://docs.python.org/3.8/libr=
ary/lzma.html#lzma.LZMAFile" title=3D"lzma.LZMAFile"><code class=3D"xref py=
 py-class docutils literal notranslate"><span class=3D"pre">LZMAFile</span>=
</code></a> supports all the members specified by
<a class=3D"reference internal" href=3D"https://docs.python.org/3.8/library=
/io.html#io.BufferedIOBase" title=3D"io.BufferedIOBase"><code class=3D"xref=
 py py-class docutils literal notranslate"><span class=3D"pre">io.BufferedI=
OBase</span></code></a>, except for <code class=3D"xref py py-meth docutils=
 literal notranslate"><span class=3D"pre">detach()</span></code> and <code =
class=3D"xref py py-meth docutils literal notranslate"><span class=3D"pre">=
truncate()</span></code>.
Iteration and the <a class=3D"reference internal" href=3D"https://docs.pyth=
on.org/3.8/reference/compound_stmts.html#with"><code class=3D"xref std std-=
keyword docutils literal notranslate"><span class=3D"pre">with</span></code=
></a> statement are supported.</p>
<p>The following method is also provided:</p>
<dl class=3D"method">
<dt id=3D"lzma.LZMAFile.peek">
<code class=3D"sig-name descname">peek</code><span class=3D"sig-paren">(</s=
pan><em class=3D"sig-param">size=3D-1</em><span class=3D"sig-paren">)</span=
><a class=3D"headerlink" href=3D"https://docs.python.org/3.8/library/lzma.h=
tml#lzma.LZMAFile.peek" title=3D"Permalink to this definition">=C2=B6</a></=
dt>
<dd><p>Return buffered data without advancing the file position. At least o=
ne
byte of data will be returned, unless EOF has been reached. The exact
number of bytes returned is unspecified (the <em>size</em> argument is igno=
red).</p>
<div class=3D"admonition note">
<p class=3D"admonition-title">Note</p>
<p>While calling <a class=3D"reference internal" href=3D"https://docs.pytho=
n.org/3.8/library/lzma.html#lzma.LZMAFile.peek" title=3D"lzma.LZMAFile.peek=
"><code class=3D"xref py py-meth docutils literal notranslate"><span class=
=3D"pre">peek()</span></code></a> does not change the file position of
the <a class=3D"reference internal" href=3D"https://docs.python.org/3.8/lib=
rary/lzma.html#lzma.LZMAFile" title=3D"lzma.LZMAFile"><code class=3D"xref p=
y py-class docutils literal notranslate"><span class=3D"pre">LZMAFile</span=
></code></a>, it may change the position of the underlying
file object (e.g. if the <a class=3D"reference internal" href=3D"https://do=
cs.python.org/3.8/library/lzma.html#lzma.LZMAFile" title=3D"lzma.LZMAFile">=
<code class=3D"xref py py-class docutils literal notranslate"><span class=
=3D"pre">LZMAFile</span></code></a> was constructed by passing a
file object for <em>filename</em>).</p>
</div>
</dd></dl>

<div class=3D"versionchanged">
<p><span class=3D"versionmodified changed">Changed in version 3.4: </span>A=
dded support for the <code class=3D"docutils literal notranslate"><span cla=
ss=3D"pre">"x"</span></code> and <code class=3D"docutils literal notranslat=
e"><span class=3D"pre">"xb"</span></code> modes.</p>
</div>
<div class=3D"versionchanged">
<p><span class=3D"versionmodified changed">Changed in version 3.5: </span>T=
he <a class=3D"reference internal" href=3D"https://docs.python.org/3.8/libr=
ary/io.html#io.BufferedIOBase.read" title=3D"io.BufferedIOBase.read"><code =
class=3D"xref py py-meth docutils literal notranslate"><span class=3D"pre">=
read()</span></code></a> method now accepts an argument of
<code class=3D"docutils literal notranslate"><span class=3D"pre">None</span=
></code>.</p>
</div>
<div class=3D"versionchanged">
<p><span class=3D"versionmodified changed">Changed in version 3.6: </span>A=
ccepts a <a class=3D"reference internal" href=3D"https://docs.python.org/3.=
8/glossary.html#term-path-like-object"><span class=3D"xref std std-term">pa=
th-like object</span></a>.</p>
</div>
</dd></dl>

</div>
<div class=3D"section" id=3D"compressing-and-decompressing-data-in-memory">
<h2>Compressing and decompressing data in memory<a class=3D"headerlink" hre=
f=3D"https://docs.python.org/3.8/library/lzma.html#compressing-and-decompre=
ssing-data-in-memory" title=3D"Permalink to this headline">=C2=B6</a></h2>
<dl class=3D"class">
<dt id=3D"lzma.LZMACompressor">
<em class=3D"property">class </em><code class=3D"sig-prename descclassname"=
>lzma.</code><code class=3D"sig-name descname">LZMACompressor</code><span c=
lass=3D"sig-paren">(</span><em class=3D"sig-param">format=3DFORMAT_XZ</em>,=
 <em class=3D"sig-param">check=3D-1</em>, <em class=3D"sig-param">preset=3D=
None</em>, <em class=3D"sig-param">filters=3DNone</em><span class=3D"sig-pa=
ren">)</span><a class=3D"headerlink" href=3D"https://docs.python.org/3.8/li=
brary/lzma.html#lzma.LZMACompressor" title=3D"Permalink to this definition"=
>=C2=B6</a></dt>
<dd><p>Create a compressor object, which can be used to compress data incre=
mentally.</p>
<p>For a more convenient way of compressing a single chunk of data, see
<a class=3D"reference internal" href=3D"https://docs.python.org/3.8/library=
/lzma.html#lzma.compress" title=3D"lzma.compress"><code class=3D"xref py py=
-func docutils literal notranslate"><span class=3D"pre">compress()</span></=
code></a>.</p>
<p>The <em>format</em> argument specifies what container format should be u=
sed.
Possible values are:</p>
<ul class=3D"simple">
<li><dl class=3D"simple">
<dt><code class=3D"xref py py-const docutils literal notranslate"><span cla=
ss=3D"pre">FORMAT_XZ</span></code>: The <code class=3D"docutils literal not=
ranslate"><span class=3D"pre">.xz</span></code> container format.</dt><dd><=
p>This is the default format.</p>
</dd>
</dl>
</li>
<li><dl class=3D"simple">
<dt><code class=3D"xref py py-const docutils literal notranslate"><span cla=
ss=3D"pre">FORMAT_ALONE</span></code>: The legacy <code class=3D"docutils l=
iteral notranslate"><span class=3D"pre">.lzma</span></code> container forma=
t.</dt><dd><p>This format is more limited than <code class=3D"docutils lite=
ral notranslate"><span class=3D"pre">.xz</span></code> =E2=80=93 it does no=
t support integrity
checks or multiple filters.</p>
</dd>
</dl>
</li>
<li><dl class=3D"simple">
<dt><code class=3D"xref py py-const docutils literal notranslate"><span cla=
ss=3D"pre">FORMAT_RAW</span></code>: A raw data stream, not using any conta=
iner format.</dt><dd><p>This format specifier does not support integrity ch=
ecks, and requires that
you always specify a custom filter chain (for both compression and
decompression). Additionally, data compressed in this manner cannot be
decompressed using <code class=3D"xref py py-const docutils literal notrans=
late"><span class=3D"pre">FORMAT_AUTO</span></code> (see <a class=3D"refere=
nce internal" href=3D"https://docs.python.org/3.8/library/lzma.html#lzma.LZ=
MADecompressor" title=3D"lzma.LZMADecompressor"><code class=3D"xref py py-c=
lass docutils literal notranslate"><span class=3D"pre">LZMADecompressor</sp=
an></code></a>).</p>
</dd>
</dl>
</li>
</ul>
<p>The <em>check</em> argument specifies the type of integrity check to inc=
lude in the
compressed data. This check is used when decompressing, to ensure that the
data has not been corrupted. Possible values are:</p>
<ul class=3D"simple">
<li><p><code class=3D"xref py py-const docutils literal notranslate"><span =
class=3D"pre">CHECK_NONE</span></code>: No integrity check.
This is the default (and the only acceptable value) for
<code class=3D"xref py py-const docutils literal notranslate"><span class=
=3D"pre">FORMAT_ALONE</span></code> and <code class=3D"xref py py-const doc=
utils literal notranslate"><span class=3D"pre">FORMAT_RAW</span></code>.</p=
></li>
<li><p><code class=3D"xref py py-const docutils literal notranslate"><span =
class=3D"pre">CHECK_CRC32</span></code>: 32-bit Cyclic Redundancy Check.</p=
></li>
<li><p><code class=3D"xref py py-const docutils literal notranslate"><span =
class=3D"pre">CHECK_CRC64</span></code>: 64-bit Cyclic Redundancy Check.
This is the default for <code class=3D"xref py py-const docutils literal no=
translate"><span class=3D"pre">FORMAT_XZ</span></code>.</p></li>
<li><p><code class=3D"xref py py-const docutils literal notranslate"><span =
class=3D"pre">CHECK_SHA256</span></code>: 256-bit Secure Hash Algorithm.</p=
></li>
</ul>
<p>If the specified check is not supported, an <a class=3D"reference intern=
al" href=3D"https://docs.python.org/3.8/library/lzma.html#lzma.LZMAError" t=
itle=3D"lzma.LZMAError"><code class=3D"xref py py-class docutils literal no=
translate"><span class=3D"pre">LZMAError</span></code></a> is raised.</p>
<p>The compression settings can be specified either as a preset compression
level (with the <em>preset</em> argument), or in detail as a custom filter =
chain
(with the <em>filters</em> argument).</p>
<p>The <em>preset</em> argument (if provided) should be an integer between =
<code class=3D"docutils literal notranslate"><span class=3D"pre">0</span></=
code> and
<code class=3D"docutils literal notranslate"><span class=3D"pre">9</span></=
code> (inclusive), optionally OR-ed with the constant
<code class=3D"xref py py-const docutils literal notranslate"><span class=
=3D"pre">PRESET_EXTREME</span></code>. If neither <em>preset</em> nor <em>f=
ilters</em> are given, the
default behavior is to use <code class=3D"xref py py-const docutils literal=
 notranslate"><span class=3D"pre">PRESET_DEFAULT</span></code> (preset leve=
l <code class=3D"docutils literal notranslate"><span class=3D"pre">6</span>=
</code>).
Higher presets produce smaller output, but make the compression process
slower.</p>
<div class=3D"admonition note">
<p class=3D"admonition-title">Note</p>
<p>In addition to being more CPU-intensive, compression with higher presets
also requires much more memory (and produces output that needs more memory
to decompress). With preset <code class=3D"docutils literal notranslate"><s=
pan class=3D"pre">9</span></code> for example, the overhead for an
<a class=3D"reference internal" href=3D"https://docs.python.org/3.8/library=
/lzma.html#lzma.LZMACompressor" title=3D"lzma.LZMACompressor"><code class=
=3D"xref py py-class docutils literal notranslate"><span class=3D"pre">LZMA=
Compressor</span></code></a> object can be as high as 800 MiB. For this rea=
son,
it is generally best to stick with the default preset.</p>
</div>
<p>The <em>filters</em> argument (if provided) should be a filter chain spe=
cifier.
See <a class=3D"reference internal" href=3D"https://docs.python.org/3.8/lib=
rary/lzma.html#filter-chain-specs"><span class=3D"std std-ref">Specifying c=
ustom filter chains</span></a> for details.</p>
<dl class=3D"method">
<dt id=3D"lzma.LZMACompressor.compress">
<code class=3D"sig-name descname">compress</code><span class=3D"sig-paren">=
(</span><em class=3D"sig-param">data</em><span class=3D"sig-paren">)</span>=
<a class=3D"headerlink" href=3D"https://docs.python.org/3.8/library/lzma.ht=
ml#lzma.LZMACompressor.compress" title=3D"Permalink to this definition">=C2=
=B6</a></dt>
<dd><p>Compress <em>data</em> (a <a class=3D"reference internal" href=3D"ht=
tps://docs.python.org/3.8/library/stdtypes.html#bytes" title=3D"bytes"><cod=
e class=3D"xref py py-class docutils literal notranslate"><span class=3D"pr=
e">bytes</span></code></a> object), returning a <a class=3D"reference inter=
nal" href=3D"https://docs.python.org/3.8/library/stdtypes.html#bytes" title=
=3D"bytes"><code class=3D"xref py py-class docutils literal notranslate"><s=
pan class=3D"pre">bytes</span></code></a>
object containing compressed data for at least part of the input. Some of
<em>data</em> may be buffered internally, for use in later calls to
<a class=3D"reference internal" href=3D"https://docs.python.org/3.8/library=
/lzma.html#lzma.compress" title=3D"lzma.compress"><code class=3D"xref py py=
-meth docutils literal notranslate"><span class=3D"pre">compress()</span></=
code></a> and <a class=3D"reference internal" href=3D"https://docs.python.o=
rg/3.8/library/lzma.html#lzma.LZMACompressor.flush" title=3D"lzma.LZMACompr=
essor.flush"><code class=3D"xref py py-meth docutils literal notranslate"><=
span class=3D"pre">flush()</span></code></a>. The returned data should be
concatenated with the output of any previous calls to <a class=3D"reference=
 internal" href=3D"https://docs.python.org/3.8/library/lzma.html#lzma.compr=
ess" title=3D"lzma.compress"><code class=3D"xref py py-meth docutils litera=
l notranslate"><span class=3D"pre">compress()</span></code></a>.</p>
</dd></dl>

<dl class=3D"method">
<dt id=3D"lzma.LZMACompressor.flush">
<code class=3D"sig-name descname">flush</code><span class=3D"sig-paren">(</=
span><span class=3D"sig-paren">)</span><a class=3D"headerlink" href=3D"http=
s://docs.python.org/3.8/library/lzma.html#lzma.LZMACompressor.flush" title=
=3D"Permalink to this definition">=C2=B6</a></dt>
<dd><p>Finish the compression process, returning a <a class=3D"reference in=
ternal" href=3D"https://docs.python.org/3.8/library/stdtypes.html#bytes" ti=
tle=3D"bytes"><code class=3D"xref py py-class docutils literal notranslate"=
><span class=3D"pre">bytes</span></code></a> object
containing any data stored in the compressor=E2=80=99s internal buffers.</p=
>
<p>The compressor cannot be used after this method has been called.</p>
</dd></dl>

</dd></dl>

<dl class=3D"class">
<dt id=3D"lzma.LZMADecompressor">
<em class=3D"property">class </em><code class=3D"sig-prename descclassname"=
>lzma.</code><code class=3D"sig-name descname">LZMADecompressor</code><span=
 class=3D"sig-paren">(</span><em class=3D"sig-param">format=3DFORMAT_AUTO</=
em>, <em class=3D"sig-param">memlimit=3DNone</em>, <em class=3D"sig-param">=
filters=3DNone</em><span class=3D"sig-paren">)</span><a class=3D"headerlink=
" href=3D"https://docs.python.org/3.8/library/lzma.html#lzma.LZMADecompress=
or" title=3D"Permalink to this definition">=C2=B6</a></dt>
<dd><p>Create a decompressor object, which can be used to decompress data
incrementally.</p>
<p>For a more convenient way of decompressing an entire compressed stream a=
t
once, see <a class=3D"reference internal" href=3D"https://docs.python.org/3=
.8/library/lzma.html#lzma.decompress" title=3D"lzma.decompress"><code class=
=3D"xref py py-func docutils literal notranslate"><span class=3D"pre">decom=
press()</span></code></a>.</p>
<p>The <em>format</em> argument specifies the container format that should =
be used. The
default is <code class=3D"xref py py-const docutils literal notranslate"><s=
pan class=3D"pre">FORMAT_AUTO</span></code>, which can decompress both <cod=
e class=3D"docutils literal notranslate"><span class=3D"pre">.xz</span></co=
de> and
<code class=3D"docutils literal notranslate"><span class=3D"pre">.lzma</spa=
n></code> files. Other possible values are <code class=3D"xref py py-const =
docutils literal notranslate"><span class=3D"pre">FORMAT_XZ</span></code>,
<code class=3D"xref py py-const docutils literal notranslate"><span class=
=3D"pre">FORMAT_ALONE</span></code>, and <code class=3D"xref py py-const do=
cutils literal notranslate"><span class=3D"pre">FORMAT_RAW</span></code>.</=
p>
<p>The <em>memlimit</em> argument specifies a limit (in bytes) on the amoun=
t of memory
that the decompressor can use. When this argument is used, decompression wi=
ll
fail with an <a class=3D"reference internal" href=3D"https://docs.python.or=
g/3.8/library/lzma.html#lzma.LZMAError" title=3D"lzma.LZMAError"><code clas=
s=3D"xref py py-class docutils literal notranslate"><span class=3D"pre">LZM=
AError</span></code></a> if it is not possible to decompress the input
within the given memory limit.</p>
<p>The <em>filters</em> argument specifies the filter chain that was used t=
o create
the stream being decompressed. This argument is required if <em>format</em>=
 is
<code class=3D"xref py py-const docutils literal notranslate"><span class=
=3D"pre">FORMAT_RAW</span></code>, but should not be used for other formats=
.
See <a class=3D"reference internal" href=3D"https://docs.python.org/3.8/lib=
rary/lzma.html#filter-chain-specs"><span class=3D"std std-ref">Specifying c=
ustom filter chains</span></a> for more information about filter chains.</p=
>
<div class=3D"admonition note">
<p class=3D"admonition-title">Note</p>
<p>This class does not transparently handle inputs containing multiple
compressed streams, unlike <a class=3D"reference internal" href=3D"https://=
docs.python.org/3.8/library/lzma.html#lzma.decompress" title=3D"lzma.decomp=
ress"><code class=3D"xref py py-func docutils literal notranslate"><span cl=
ass=3D"pre">decompress()</span></code></a> and <a class=3D"reference intern=
al" href=3D"https://docs.python.org/3.8/library/lzma.html#lzma.LZMAFile" ti=
tle=3D"lzma.LZMAFile"><code class=3D"xref py py-class docutils literal notr=
anslate"><span class=3D"pre">LZMAFile</span></code></a>. To
decompress a multi-stream input with <a class=3D"reference internal" href=
=3D"https://docs.python.org/3.8/library/lzma.html#lzma.LZMADecompressor" ti=
tle=3D"lzma.LZMADecompressor"><code class=3D"xref py py-class docutils lite=
ral notranslate"><span class=3D"pre">LZMADecompressor</span></code></a>, yo=
u must
create a new decompressor for each stream.</p>
</div>
<dl class=3D"method">
<dt id=3D"lzma.LZMADecompressor.decompress">
<code class=3D"sig-name descname">decompress</code><span class=3D"sig-paren=
">(</span><em class=3D"sig-param">data</em>, <em class=3D"sig-param">max_le=
ngth=3D-1</em><span class=3D"sig-paren">)</span><a class=3D"headerlink" hre=
f=3D"https://docs.python.org/3.8/library/lzma.html#lzma.LZMADecompressor.de=
compress" title=3D"Permalink to this definition">=C2=B6</a></dt>
<dd><p>Decompress <em>data</em> (a <a class=3D"reference internal" href=3D"=
https://docs.python.org/3.8/glossary.html#term-bytes-like-object"><span cla=
ss=3D"xref std std-term">bytes-like object</span></a>), returning
uncompressed data as bytes. Some of <em>data</em> may be buffered
internally, for use in later calls to <a class=3D"reference internal" href=
=3D"https://docs.python.org/3.8/library/lzma.html#lzma.decompress" title=3D=
"lzma.decompress"><code class=3D"xref py py-meth docutils literal notransla=
te"><span class=3D"pre">decompress()</span></code></a>. The
returned data should be concatenated with the output of any
previous calls to <a class=3D"reference internal" href=3D"https://docs.pyth=
on.org/3.8/library/lzma.html#lzma.decompress" title=3D"lzma.decompress"><co=
de class=3D"xref py py-meth docutils literal notranslate"><span class=3D"pr=
e">decompress()</span></code></a>.</p>
<p>If <em>max_length</em> is nonnegative, returns at most <em>max_length</e=
m>
bytes of decompressed data. If this limit is reached and further
output can be produced, the <a class=3D"reference internal" href=3D"https:/=
/docs.python.org/3.8/library/lzma.html#lzma.LZMADecompressor.needs_input" t=
itle=3D"lzma.LZMADecompressor.needs_input"><code class=3D"xref py py-attr d=
ocutils literal notranslate"><span class=3D"pre">needs_input</span></code><=
/a> attribute will
be set to <code class=3D"docutils literal notranslate"><span class=3D"pre">=
False</span></code>. In this case, the next call to
<a class=3D"reference internal" href=3D"https://docs.python.org/3.8/library=
/lzma.html#lzma.LZMADecompressor.decompress" title=3D"lzma.LZMADecompressor=
.decompress"><code class=3D"xref py py-meth docutils literal notranslate"><=
span class=3D"pre">decompress()</span></code></a> may provide <em>data</em>=
 as <code class=3D"docutils literal notranslate"><span class=3D"pre">b''</s=
pan></code> to obtain
more of the output.</p>
<p>If all of the input data was decompressed and returned (either
because this was less than <em>max_length</em> bytes, or because
<em>max_length</em> was negative), the <a class=3D"reference internal" href=
=3D"https://docs.python.org/3.8/library/lzma.html#lzma.LZMADecompressor.nee=
ds_input" title=3D"lzma.LZMADecompressor.needs_input"><code class=3D"xref p=
y py-attr docutils literal notranslate"><span class=3D"pre">needs_input</sp=
an></code></a> attribute
will be set to <code class=3D"docutils literal notranslate"><span class=3D"=
pre">True</span></code>.</p>
<p>Attempting to decompress data after the end of stream is reached
raises an <cite>EOFError</cite>.  Any data found after the end of the
stream is ignored and saved in the <a class=3D"reference internal" href=3D"=
https://docs.python.org/3.8/library/lzma.html#lzma.LZMADecompressor.unused_=
data" title=3D"lzma.LZMADecompressor.unused_data"><code class=3D"xref py py=
-attr docutils literal notranslate"><span class=3D"pre">unused_data</span><=
/code></a> attribute.</p>
<div class=3D"versionchanged">
<p><span class=3D"versionmodified changed">Changed in version 3.5: </span>A=
dded the <em>max_length</em> parameter.</p>
</div>
</dd></dl>

<dl class=3D"attribute">
<dt id=3D"lzma.LZMADecompressor.check">
<code class=3D"sig-name descname">check</code><a class=3D"headerlink" href=
=3D"https://docs.python.org/3.8/library/lzma.html#lzma.LZMADecompressor.che=
ck" title=3D"Permalink to this definition">=C2=B6</a></dt>
<dd><p>The ID of the integrity check used by the input stream. This may be
<code class=3D"xref py py-const docutils literal notranslate"><span class=
=3D"pre">CHECK_UNKNOWN</span></code> until enough of the input has been dec=
oded to
determine what integrity check it uses.</p>
</dd></dl>

<dl class=3D"attribute">
<dt id=3D"lzma.LZMADecompressor.eof">
<code class=3D"sig-name descname">eof</code><a class=3D"headerlink" href=3D=
"https://docs.python.org/3.8/library/lzma.html#lzma.LZMADecompressor.eof" t=
itle=3D"Permalink to this definition">=C2=B6</a></dt>
<dd><p><code class=3D"docutils literal notranslate"><span class=3D"pre">Tru=
e</span></code> if the end-of-stream marker has been reached.</p>
</dd></dl>

<dl class=3D"attribute">
<dt id=3D"lzma.LZMADecompressor.unused_data">
<code class=3D"sig-name descname">unused_data</code><a class=3D"headerlink"=
 href=3D"https://docs.python.org/3.8/library/lzma.html#lzma.LZMADecompresso=
r.unused_data" title=3D"Permalink to this definition">=C2=B6</a></dt>
<dd><p>Data found after the end of the compressed stream.</p>
<p>Before the end of the stream is reached, this will be <code class=3D"doc=
utils literal notranslate"><span class=3D"pre">b""</span></code>.</p>
</dd></dl>

<dl class=3D"attribute">
<dt id=3D"lzma.LZMADecompressor.needs_input">
<code class=3D"sig-name descname">needs_input</code><a class=3D"headerlink"=
 href=3D"https://docs.python.org/3.8/library/lzma.html#lzma.LZMADecompresso=
r.needs_input" title=3D"Permalink to this definition">=C2=B6</a></dt>
<dd><p><code class=3D"docutils literal notranslate"><span class=3D"pre">Fal=
se</span></code> if the <a class=3D"reference internal" href=3D"https://doc=
s.python.org/3.8/library/lzma.html#lzma.LZMADecompressor.decompress" title=
=3D"lzma.LZMADecompressor.decompress"><code class=3D"xref py py-meth docuti=
ls literal notranslate"><span class=3D"pre">decompress()</span></code></a> =
method can provide more
decompressed data before requiring new uncompressed input.</p>
<div class=3D"versionadded">
<p><span class=3D"versionmodified added">New in version 3.5.</span></p>
</div>
</dd></dl>

</dd></dl>

<dl class=3D"function">
<dt id=3D"lzma.compress">
<code class=3D"sig-prename descclassname">lzma.</code><code class=3D"sig-na=
me descname">compress</code><span class=3D"sig-paren">(</span><em class=3D"=
sig-param">data</em>, <em class=3D"sig-param">format=3DFORMAT_XZ</em>, <em =
class=3D"sig-param">check=3D-1</em>, <em class=3D"sig-param">preset=3DNone<=
/em>, <em class=3D"sig-param">filters=3DNone</em><span class=3D"sig-paren">=
)</span><a class=3D"headerlink" href=3D"https://docs.python.org/3.8/library=
/lzma.html#lzma.compress" title=3D"Permalink to this definition">=C2=B6</a>=
</dt>
<dd><p>Compress <em>data</em> (a <a class=3D"reference internal" href=3D"ht=
tps://docs.python.org/3.8/library/stdtypes.html#bytes" title=3D"bytes"><cod=
e class=3D"xref py py-class docutils literal notranslate"><span class=3D"pr=
e">bytes</span></code></a> object), returning the compressed data as a
<a class=3D"reference internal" href=3D"https://docs.python.org/3.8/library=
/stdtypes.html#bytes" title=3D"bytes"><code class=3D"xref py py-class docut=
ils literal notranslate"><span class=3D"pre">bytes</span></code></a> object=
.</p>
<p>See <a class=3D"reference internal" href=3D"https://docs.python.org/3.8/=
library/lzma.html#lzma.LZMACompressor" title=3D"lzma.LZMACompressor"><code =
class=3D"xref py py-class docutils literal notranslate"><span class=3D"pre"=
>LZMACompressor</span></code></a> above for a description of the <em>format=
</em>, <em>check</em>,
<em>preset</em> and <em>filters</em> arguments.</p>
</dd></dl>

<dl class=3D"function">
<dt id=3D"lzma.decompress">
<code class=3D"sig-prename descclassname">lzma.</code><code class=3D"sig-na=
me descname">decompress</code><span class=3D"sig-paren">(</span><em class=
=3D"sig-param">data</em>, <em class=3D"sig-param">format=3DFORMAT_AUTO</em>=
, <em class=3D"sig-param">memlimit=3DNone</em>, <em class=3D"sig-param">fil=
ters=3DNone</em><span class=3D"sig-paren">)</span><a class=3D"headerlink" h=
ref=3D"https://docs.python.org/3.8/library/lzma.html#lzma.decompress" title=
=3D"Permalink to this definition">=C2=B6</a></dt>
<dd><p>Decompress <em>data</em> (a <a class=3D"reference internal" href=3D"=
https://docs.python.org/3.8/library/stdtypes.html#bytes" title=3D"bytes"><c=
ode class=3D"xref py py-class docutils literal notranslate"><span class=3D"=
pre">bytes</span></code></a> object), returning the uncompressed data
as a <a class=3D"reference internal" href=3D"https://docs.python.org/3.8/li=
brary/stdtypes.html#bytes" title=3D"bytes"><code class=3D"xref py py-class =
docutils literal notranslate"><span class=3D"pre">bytes</span></code></a> o=
bject.</p>
<p>If <em>data</em> is the concatenation of multiple distinct compressed st=
reams,
decompress all of these streams, and return the concatenation of the result=
s.</p>
<p>See <a class=3D"reference internal" href=3D"https://docs.python.org/3.8/=
library/lzma.html#lzma.LZMADecompressor" title=3D"lzma.LZMADecompressor"><c=
ode class=3D"xref py py-class docutils literal notranslate"><span class=3D"=
pre">LZMADecompressor</span></code></a> above for a description of the <em>=
format</em>,
<em>memlimit</em> and <em>filters</em> arguments.</p>
</dd></dl>

</div>
<div class=3D"section" id=3D"miscellaneous">
<h2>Miscellaneous<a class=3D"headerlink" href=3D"https://docs.python.org/3.=
8/library/lzma.html#miscellaneous" title=3D"Permalink to this headline">=C2=
=B6</a></h2>
<dl class=3D"function">
<dt id=3D"lzma.is_check_supported">
<code class=3D"sig-prename descclassname">lzma.</code><code class=3D"sig-na=
me descname">is_check_supported</code><span class=3D"sig-paren">(</span><em=
 class=3D"sig-param">check</em><span class=3D"sig-paren">)</span><a class=
=3D"headerlink" href=3D"https://docs.python.org/3.8/library/lzma.html#lzma.=
is_check_supported" title=3D"Permalink to this definition">=C2=B6</a></dt>
<dd><p>Return <code class=3D"docutils literal notranslate"><span class=3D"p=
re">True</span></code> if the given integrity check is supported on this sy=
stem.</p>
<p><code class=3D"xref py py-const docutils literal notranslate"><span clas=
s=3D"pre">CHECK_NONE</span></code> and <code class=3D"xref py py-const docu=
tils literal notranslate"><span class=3D"pre">CHECK_CRC32</span></code> are=
 always supported.
<code class=3D"xref py py-const docutils literal notranslate"><span class=
=3D"pre">CHECK_CRC64</span></code> and <code class=3D"xref py py-const docu=
tils literal notranslate"><span class=3D"pre">CHECK_SHA256</span></code> ma=
y be unavailable if you are
using a version of <strong class=3D"program">liblzma</strong> that was comp=
iled with a limited
feature set.</p>
</dd></dl>

</div>
<div class=3D"section" id=3D"specifying-custom-filter-chains">
<span id=3D"filter-chain-specs"></span><h2>Specifying custom filter chains<=
a class=3D"headerlink" href=3D"https://docs.python.org/3.8/library/lzma.htm=
l#specifying-custom-filter-chains" title=3D"Permalink to this headline">=C2=
=B6</a></h2>
<p>A filter chain specifier is a sequence of dictionaries, where each dicti=
onary
contains the ID and options for a single filter. Each dictionary must conta=
in
the key <code class=3D"docutils literal notranslate"><span class=3D"pre">"i=
d"</span></code>, and may contain additional keys to specify filter-depende=
nt
options. Valid filter IDs are as follows:</p>
<ul class=3D"simple">
<li><dl class=3D"simple">
<dt>Compression filters:</dt><dd><ul>
<li><p><code class=3D"xref py py-const docutils literal notranslate"><span =
class=3D"pre">FILTER_LZMA1</span></code> (for use with <code class=3D"xref =
py py-const docutils literal notranslate"><span class=3D"pre">FORMAT_ALONE<=
/span></code>)</p></li>
<li><p><code class=3D"xref py py-const docutils literal notranslate"><span =
class=3D"pre">FILTER_LZMA2</span></code> (for use with <code class=3D"xref =
py py-const docutils literal notranslate"><span class=3D"pre">FORMAT_XZ</sp=
an></code> and <code class=3D"xref py py-const docutils literal notranslate=
"><span class=3D"pre">FORMAT_RAW</span></code>)</p></li>
</ul>
</dd>
</dl>
</li>
<li><dl class=3D"simple">
<dt>Delta filter:</dt><dd><ul>
<li><p><code class=3D"xref py py-const docutils literal notranslate"><span =
class=3D"pre">FILTER_DELTA</span></code></p></li>
</ul>
</dd>
</dl>
</li>
<li><dl class=3D"simple">
<dt>Branch-Call-Jump (BCJ) filters:</dt><dd><ul>
<li><p><code class=3D"xref py py-const docutils literal notranslate"><span =
class=3D"pre">FILTER_X86</span></code></p></li>
<li><p><code class=3D"xref py py-const docutils literal notranslate"><span =
class=3D"pre">FILTER_IA64</span></code></p></li>
<li><p><code class=3D"xref py py-const docutils literal notranslate"><span =
class=3D"pre">FILTER_ARM</span></code></p></li>
<li><p><code class=3D"xref py py-const docutils literal notranslate"><span =
class=3D"pre">FILTER_ARMTHUMB</span></code></p></li>
<li><p><code class=3D"xref py py-const docutils literal notranslate"><span =
class=3D"pre">FILTER_POWERPC</span></code></p></li>
<li><p><code class=3D"xref py py-const docutils literal notranslate"><span =
class=3D"pre">FILTER_SPARC</span></code></p></li>
</ul>
</dd>
</dl>
</li>
</ul>
<p>A filter chain can consist of up to 4 filters, and cannot be empty. The =
last
filter in the chain must be a compression filter, and any other filters mus=
t be
delta or BCJ filters.</p>
<p>Compression filters support the following options (specified as addition=
al
entries in the dictionary representing the filter):</p>
<blockquote>
<div><ul class=3D"simple">
<li><p><code class=3D"docutils literal notranslate"><span class=3D"pre">pre=
set</span></code>: A compression preset to use as a source of default value=
s for
options that are not specified explicitly.</p></li>
<li><p><code class=3D"docutils literal notranslate"><span class=3D"pre">dic=
t_size</span></code>: Dictionary size in bytes. This should be between 4 Ki=
B and
1.5 GiB (inclusive).</p></li>
<li><p><code class=3D"docutils literal notranslate"><span class=3D"pre">lc<=
/span></code>: Number of literal context bits.</p></li>
<li><p><code class=3D"docutils literal notranslate"><span class=3D"pre">lp<=
/span></code>: Number of literal position bits. The sum <code class=3D"docu=
tils literal notranslate"><span class=3D"pre">lc</span> <span class=3D"pre"=
>+</span> <span class=3D"pre">lp</span></code> must be at
most 4.</p></li>
<li><p><code class=3D"docutils literal notranslate"><span class=3D"pre">pb<=
/span></code>: Number of position bits; must be at most 4.</p></li>
<li><p><code class=3D"docutils literal notranslate"><span class=3D"pre">mod=
e</span></code>: <code class=3D"xref py py-const docutils literal notransla=
te"><span class=3D"pre">MODE_FAST</span></code> or <code class=3D"xref py p=
y-const docutils literal notranslate"><span class=3D"pre">MODE_NORMAL</span=
></code>.</p></li>
<li><p><code class=3D"docutils literal notranslate"><span class=3D"pre">nic=
e_len</span></code>: What should be considered a =E2=80=9Cnice length=E2=80=
=9D for a match.
This should be 273 or less.</p></li>
<li><p><code class=3D"docutils literal notranslate"><span class=3D"pre">mf<=
/span></code>: What match finder to use =E2=80=93 <code class=3D"xref py py=
-const docutils literal notranslate"><span class=3D"pre">MF_HC3</span></cod=
e>, <code class=3D"xref py py-const docutils literal notranslate"><span cla=
ss=3D"pre">MF_HC4</span></code>,
<code class=3D"xref py py-const docutils literal notranslate"><span class=
=3D"pre">MF_BT2</span></code>, <code class=3D"xref py py-const docutils lit=
eral notranslate"><span class=3D"pre">MF_BT3</span></code>, or <code class=
=3D"xref py py-const docutils literal notranslate"><span class=3D"pre">MF_B=
T4</span></code>.</p></li>
<li><p><code class=3D"docutils literal notranslate"><span class=3D"pre">dep=
th</span></code>: Maximum search depth used by match finder. 0 (default) me=
ans to
select automatically based on other filter options.</p></li>
</ul>
</div></blockquote>
<p>The delta filter stores the differences between bytes, producing more re=
petitive
input for the compressor in certain circumstances. It supports one option,
<code class=3D"docutils literal notranslate"><span class=3D"pre">dist</span=
></code>. This indicates the distance between bytes to be subtracted. The
default is 1, i.e. take the differences between adjacent bytes.</p>
<p>The BCJ filters are intended to be applied to machine code. They convert
relative branches, calls and jumps in the code to use absolute addressing, =
with
the aim of increasing the redundancy that can be exploited by the compresso=
r.
These filters support one option, <code class=3D"docutils literal notransla=
te"><span class=3D"pre">start_offset</span></code>. This specifies the addr=
ess
that should be mapped to the beginning of the input data. The default is 0.=
</p>
</div>
<div class=3D"section" id=3D"examples">
<h2>Examples<a class=3D"headerlink" href=3D"https://docs.python.org/3.8/lib=
rary/lzma.html#examples" title=3D"Permalink to this headline">=C2=B6</a></h=
2>
<p>Reading in a compressed file:</p>
<div class=3D"highlight-python3 notranslate" style=3D"position: relative;">=
<div class=3D"highlight"><pre><span></span><span class=3D"kn">import</span>=
 <span class=3D"nn">lzma</span>
<span class=3D"k">with</span> <span class=3D"n">lzma</span><span class=3D"o=
">.</span><span class=3D"n">open</span><span class=3D"p">(</span><span clas=
s=3D"s2">"file.xz"</span><span class=3D"p">)</span> <span class=3D"k">as</s=
pan> <span class=3D"n">f</span><span class=3D"p">:</span>
    <span class=3D"n">file_content</span> <span class=3D"o">=3D</span> <spa=
n class=3D"n">f</span><span class=3D"o">.</span><span class=3D"n">read</spa=
n><span class=3D"p">()</span>
</pre></div>
</div>
<p>Creating a compressed file:</p>
<div class=3D"highlight-python3 notranslate" style=3D"position: relative;">=
<div class=3D"highlight"><pre><span></span><span class=3D"kn">import</span>=
 <span class=3D"nn">lzma</span>
<span class=3D"n">data</span> <span class=3D"o">=3D</span> <span class=3D"s=
a">b</span><span class=3D"s2">"Insert Data Here"</span>
<span class=3D"k">with</span> <span class=3D"n">lzma</span><span class=3D"o=
">.</span><span class=3D"n">open</span><span class=3D"p">(</span><span clas=
s=3D"s2">"file.xz"</span><span class=3D"p">,</span> <span class=3D"s2">"w"<=
/span><span class=3D"p">)</span> <span class=3D"k">as</span> <span class=3D=
"n">f</span><span class=3D"p">:</span>
    <span class=3D"n">f</span><span class=3D"o">.</span><span class=3D"n">w=
rite</span><span class=3D"p">(</span><span class=3D"n">data</span><span cla=
ss=3D"p">)</span>
</pre></div>
</div>
<p>Compressing data in memory:</p>
<div class=3D"highlight-python3 notranslate" style=3D"position: relative;">=
<div class=3D"highlight"><pre><span></span><span class=3D"kn">import</span>=
 <span class=3D"nn">lzma</span>
<span class=3D"n">data_in</span> <span class=3D"o">=3D</span> <span class=
=3D"sa">b</span><span class=3D"s2">"Insert Data Here"</span>
<span class=3D"n">data_out</span> <span class=3D"o">=3D</span> <span class=
=3D"n">lzma</span><span class=3D"o">.</span><span class=3D"n">compress</spa=
n><span class=3D"p">(</span><span class=3D"n">data_in</span><span class=3D"=
p">)</span>
</pre></div>
</div>
<p>Incremental compression:</p>
<div class=3D"highlight-python3 notranslate" style=3D"position: relative;">=
<div class=3D"highlight"><pre><span></span><span class=3D"kn">import</span>=
 <span class=3D"nn">lzma</span>
<span class=3D"n">lzc</span> <span class=3D"o">=3D</span> <span class=3D"n"=
>lzma</span><span class=3D"o">.</span><span class=3D"n">LZMACompressor</spa=
n><span class=3D"p">()</span>
<span class=3D"n">out1</span> <span class=3D"o">=3D</span> <span class=3D"n=
">lzc</span><span class=3D"o">.</span><span class=3D"n">compress</span><spa=
n class=3D"p">(</span><span class=3D"sa">b</span><span class=3D"s2">"Some d=
ata</span><span class=3D"se">\n</span><span class=3D"s2">"</span><span clas=
s=3D"p">)</span>
<span class=3D"n">out2</span> <span class=3D"o">=3D</span> <span class=3D"n=
">lzc</span><span class=3D"o">.</span><span class=3D"n">compress</span><spa=
n class=3D"p">(</span><span class=3D"sa">b</span><span class=3D"s2">"Anothe=
r piece of data</span><span class=3D"se">\n</span><span class=3D"s2">"</spa=
n><span class=3D"p">)</span>
<span class=3D"n">out3</span> <span class=3D"o">=3D</span> <span class=3D"n=
">lzc</span><span class=3D"o">.</span><span class=3D"n">compress</span><spa=
n class=3D"p">(</span><span class=3D"sa">b</span><span class=3D"s2">"Even m=
ore data</span><span class=3D"se">\n</span><span class=3D"s2">"</span><span=
 class=3D"p">)</span>
<span class=3D"n">out4</span> <span class=3D"o">=3D</span> <span class=3D"n=
">lzc</span><span class=3D"o">.</span><span class=3D"n">flush</span><span c=
lass=3D"p">()</span>
<span class=3D"c1"># Concatenate all the partial results:</span>
<span class=3D"n">result</span> <span class=3D"o">=3D</span> <span class=3D=
"sa">b</span><span class=3D"s2">""</span><span class=3D"o">.</span><span cl=
ass=3D"n">join</span><span class=3D"p">([</span><span class=3D"n">out1</spa=
n><span class=3D"p">,</span> <span class=3D"n">out2</span><span class=3D"p"=
>,</span> <span class=3D"n">out3</span><span class=3D"p">,</span> <span cla=
ss=3D"n">out4</span><span class=3D"p">])</span>
</pre></div>
</div>
<p>Writing compressed data to an already-open file:</p>
<div class=3D"highlight-python3 notranslate" style=3D"position: relative;">=
<div class=3D"highlight"><pre><span></span><span class=3D"kn">import</span>=
 <span class=3D"nn">lzma</span>
<span class=3D"k">with</span> <span class=3D"nb">open</span><span class=3D"=
p">(</span><span class=3D"s2">"file.xz"</span><span class=3D"p">,</span> <s=
pan class=3D"s2">"wb"</span><span class=3D"p">)</span> <span class=3D"k">as=
</span> <span class=3D"n">f</span><span class=3D"p">:</span>
    <span class=3D"n">f</span><span class=3D"o">.</span><span class=3D"n">w=
rite</span><span class=3D"p">(</span><span class=3D"sa">b</span><span class=
=3D"s2">"This data will not be compressed</span><span class=3D"se">\n</span=
><span class=3D"s2">"</span><span class=3D"p">)</span>
    <span class=3D"k">with</span> <span class=3D"n">lzma</span><span class=
=3D"o">.</span><span class=3D"n">open</span><span class=3D"p">(</span><span=
 class=3D"n">f</span><span class=3D"p">,</span> <span class=3D"s2">"w"</spa=
n><span class=3D"p">)</span> <span class=3D"k">as</span> <span class=3D"n">=
lzf</span><span class=3D"p">:</span>
        <span class=3D"n">lzf</span><span class=3D"o">.</span><span class=
=3D"n">write</span><span class=3D"p">(</span><span class=3D"sa">b</span><sp=
an class=3D"s2">"This *will* be compressed</span><span class=3D"se">\n</spa=
n><span class=3D"s2">"</span><span class=3D"p">)</span>
    <span class=3D"n">f</span><span class=3D"o">.</span><span class=3D"n">w=
rite</span><span class=3D"p">(</span><span class=3D"sa">b</span><span class=
=3D"s2">"Not compressed</span><span class=3D"se">\n</span><span class=3D"s2=
">"</span><span class=3D"p">)</span>
</pre></div>
</div>
<p>Creating a compressed file using a custom filter chain:</p>
<div class=3D"highlight-python3 notranslate" style=3D"position: relative;">=
<div class=3D"highlight"><pre><span></span><span class=3D"kn">import</span>=
 <span class=3D"nn">lzma</span>
<span class=3D"n">my_filters</span> <span class=3D"o">=3D</span> <span clas=
s=3D"p">[</span>
    <span class=3D"p">{</span><span class=3D"s2">"id"</span><span class=3D"=
p">:</span> <span class=3D"n">lzma</span><span class=3D"o">.</span><span cl=
ass=3D"n">FILTER_DELTA</span><span class=3D"p">,</span> <span class=3D"s2">=
"dist"</span><span class=3D"p">:</span> <span class=3D"mi">5</span><span cl=
ass=3D"p">},</span>
    <span class=3D"p">{</span><span class=3D"s2">"id"</span><span class=3D"=
p">:</span> <span class=3D"n">lzma</span><span class=3D"o">.</span><span cl=
ass=3D"n">FILTER_LZMA2</span><span class=3D"p">,</span> <span class=3D"s2">=
"preset"</span><span class=3D"p">:</span> <span class=3D"mi">7</span> <span=
 class=3D"o">|</span> <span class=3D"n">lzma</span><span class=3D"o">.</spa=
n><span class=3D"n">PRESET_EXTREME</span><span class=3D"p">},</span>
<span class=3D"p">]</span>
<span class=3D"k">with</span> <span class=3D"n">lzma</span><span class=3D"o=
">.</span><span class=3D"n">open</span><span class=3D"p">(</span><span clas=
s=3D"s2">"file.xz"</span><span class=3D"p">,</span> <span class=3D"s2">"w"<=
/span><span class=3D"p">,</span> <span class=3D"n">filters</span><span clas=
s=3D"o">=3D</span><span class=3D"n">my_filters</span><span class=3D"p">)</s=
pan> <span class=3D"k">as</span> <span class=3D"n">f</span><span class=3D"p=
">:</span>
    <span class=3D"n">f</span><span class=3D"o">.</span><span class=3D"n">w=
rite</span><span class=3D"p">(</span><span class=3D"sa">b</span><span class=
=3D"s2">"blah blah blah"</span><span class=3D"p">)</span>
</pre></div>
</div>
</div>
</div>


          </div>
        </div>
      </div>
      <div class=3D"sphinxsidebar" role=3D"navigation" aria-label=3D"main n=
avigation">
        <div class=3D"sphinxsidebarwrapper" style=3D"float: left; margin-ri=
ght: 0px; width: 202px;">
  <h3><a href=3D"https://docs.python.org/3.8/contents.html">Table of Conten=
ts</a></h3>
  <ul>
<li><a class=3D"reference internal" href=3D"https://docs.python.org/3.8/lib=
rary/lzma.html#"><code class=3D"xref py py-mod docutils literal notranslate=
"><span class=3D"pre">lzma</span></code> =E2=80=94 Compression using the LZ=
MA algorithm</a><ul>
<li><a class=3D"reference internal" href=3D"https://docs.python.org/3.8/lib=
rary/lzma.html#reading-and-writing-compressed-files">Reading and writing co=
mpressed files</a></li>
<li><a class=3D"reference internal" href=3D"https://docs.python.org/3.8/lib=
rary/lzma.html#compressing-and-decompressing-data-in-memory">Compressing an=
d decompressing data in memory</a></li>
<li><a class=3D"reference internal" href=3D"https://docs.python.org/3.8/lib=
rary/lzma.html#miscellaneous">Miscellaneous</a></li>
<li><a class=3D"reference internal" href=3D"https://docs.python.org/3.8/lib=
rary/lzma.html#specifying-custom-filter-chains">Specifying custom filter ch=
ains</a></li>
<li><a class=3D"reference internal" href=3D"https://docs.python.org/3.8/lib=
rary/lzma.html#examples">Examples</a></li>
</ul>
</li>
</ul>

  <h4>Previous topic</h4>
  <p class=3D"topless"><a href=3D"https://docs.python.org/3.8/library/bz2.h=
tml" title=3D"previous chapter"><code class=3D"xref py py-mod docutils lite=
ral notranslate"><span class=3D"pre">bz2</span></code> =E2=80=94 Support fo=
r <strong class=3D"program">bzip2</strong> compression</a></p>
  <h4>Next topic</h4>
  <p class=3D"topless"><a href=3D"https://docs.python.org/3.8/library/zipfi=
le.html" title=3D"next chapter"><code class=3D"xref py py-mod docutils lite=
ral notranslate"><span class=3D"pre">zipfile</span></code> =E2=80=94 Work w=
ith ZIP archives</a></p>
  <div role=3D"note" aria-label=3D"source link">
    <h3>This Page</h3>
    <ul class=3D"this-page-menu">
      <li><a href=3D"https://docs.python.org/3.8/bugs.html">Report a Bug</a=
></li>
      <li>
        <a href=3D"https://github.com/python/cpython/blob/3.8/Doc/library/l=
zma.rst" rel=3D"nofollow">Show Source
        </a>
      </li>
    </ul>
  </div>
        </div>
      <div id=3D"sidebarbutton" title=3D"Collapse sidebar" style=3D"border-=
radius: 0px 5px 5px 0px; color: rgb(68, 68, 68); background-color: rgb(204,=
 204, 204); font-size: 1.2em; cursor: pointer; height: 6757.34px; padding-t=
op: 1px; padding-left: 1px; margin-left: 218px;"><span style=3D"display: bl=
ock; position: fixed; top: 464.5px;">=C2=AB</span></div></div>
      <div class=3D"clearer"></div>
    </div> =20
    <div class=3D"related" role=3D"navigation" aria-label=3D"related naviga=
tion">
      <h3>Navigation</h3>
      <ul>
        <li class=3D"right" style=3D"margin-right: 10px">
          <a href=3D"https://docs.python.org/3.8/genindex.html" title=3D"Ge=
neral Index">index</a></li>
        <li class=3D"right">
          <a href=3D"https://docs.python.org/3.8/py-modindex.html" title=3D=
"Python Module Index">modules</a> |</li>
        <li class=3D"right">
          <a href=3D"https://docs.python.org/3.8/library/zipfile.html" titl=
e=3D"zipfile =E2=80=94 Work with ZIP archives">next</a> |</li>
        <li class=3D"right">
          <a href=3D"https://docs.python.org/3.8/library/bz2.html" title=3D=
"bz2 =E2=80=94 Support for bzip2 compression">previous</a> |</li>

    <li><img src=3D"https://docs.python.org/3.8/_static/py.png" alt=3D"" st=
yle=3D"vertical-align: middle; margin-top: -1px"></li>
    <li><a href=3D"https://www.python.org/">Python</a> =C2=BB</li>
   =20

    <li>
      <span class=3D"language_switcher_placeholder"><select><option value=
=3D"en" selected=3D"selected">English</option><option value=3D"fr">French</=
option><option value=3D"ja">Japanese</option><option value=3D"ko">Korean</o=
ption><option value=3D"pt-br">Brazilian Portuguese</option><option value=3D=
"zh-cn">Simplified Chinese</option></select></span>
      <span class=3D"version_switcher_placeholder"><select><option value=3D=
"3.10">dev (3.10)</option><option value=3D"3.9">pre (3.9)</option><option v=
alue=3D"3.8" selected=3D"selected">3.8.3</option><option value=3D"3.7">3.7<=
/option><option value=3D"3.6">3.6</option><option value=3D"3.5">3.5</option=
><option value=3D"2.7">2.7</option></select></span>
      <a href=3D"https://docs.python.org/3.8/index.html">Documentation </a>=
 =C2=BB
    </li>

          <li class=3D"nav-item nav-item-1"><a href=3D"https://docs.python.=
org/3.8/library/index.html">The Python Standard Library</a> =C2=BB</li>
          <li class=3D"nav-item nav-item-2"><a href=3D"https://docs.python.=
org/3.8/library/archiving.html">Data Compression and Archiving</a> =C2=BB</=
li>
    <li class=3D"right">
       =20

    <div class=3D"inline-search" style=3D"" role=3D"search">
        <form class=3D"inline-search" action=3D"https://docs.python.org/3.8=
/search.html" method=3D"get">
          <input placeholder=3D"Quick search" type=3D"text" name=3D"q">
          <input type=3D"submit" value=3D"Go">
         =20
         =20
        </form>
    </div>
   =20
         |
    </li>

      </ul>
    </div> =20
    <div class=3D"footer">
    =C2=A9 <a href=3D"https://docs.python.org/3.8/copyright.html">Copyright=
</a> 2001-2020, Python Software Foundation.
    <br>

    The Python Software Foundation is a non-profit corporation.
<a href=3D"https://www.python.org/psf/donations/">Please donate.</a>
<br>
    <br>

    Last updated on Jun 03, 2020.
    <a href=3D"https://docs.python.org/3/bugs.html">Found a bug</a>?
    <br>

    Created using <a href=3D"https://www.sphinx-doc.org/">Sphinx</a> 2.3.1.
    </div>

 =20
</body></html>
------MultipartBoundary--phPsYHfPUJlpNkG3NxOQHszjJAKLekE70eG0JaOVhQ----
Content-Type: text/css
Content-Transfer-Encoding: quoted-printable
Content-Location: cid:css-0c71ada2-dbf3-4404-a6a5-3b0be4d6bd08@mhtml.blink

@charset "utf-8";

@media only screen {
  table.full-width-table { width: 100%; }
}
------MultipartBoundary--phPsYHfPUJlpNkG3NxOQHszjJAKLekE70eG0JaOVhQ----
Content-Type: text/css
Content-Transfer-Encoding: quoted-printable
Content-Location: https://docs.python.org/3.8/_static/pydoctheme.css

@charset "utf-8";

@import url("default.css");

body { background-color: white; margin-left: 1em; margin-right: 1em; }

div.related { margin-bottom: 1.2em; padding: 0.5em 0px; border-top: 1px sol=
id rgb(204, 204, 204); margin-top: 0.5em; }

div.related a:hover { color: rgb(0, 149, 196); }

div.related:first-child { border-top: 0px; border-bottom: 1px solid rgb(204=
, 204, 204); }

.inline-search { display: inline; }

form.inline-search input { display: inline; }

form.inline-search input[type=3D"submit"] { width: 40px; }

div.sphinxsidebar { background-color: rgb(238, 238, 238); border-radius: 5p=
x; line-height: 130%; font-size: smaller; }

div.sphinxsidebar h3, div.sphinxsidebar h4 { margin-top: 1.5em; }

div.sphinxsidebarwrapper > h3:first-child { margin-top: 0.2em; }

div.sphinxsidebarwrapper > ul > li > ul > li { margin-bottom: 0.4em; }

div.sphinxsidebar a:hover { color: rgb(0, 149, 196); }

form.inline-search input, div.sphinxsidebar input { font-family: "Lucida Gr=
ande", Arial, sans-serif; border: 1px solid rgb(153, 153, 153); font-size: =
smaller; border-radius: 3px; }

div.sphinxsidebar input[type=3D"text"] { max-width: 150px; }

div.body { padding: 0px 0px 0px 1.2em; }

div.body p { line-height: 140%; }

div.body h1, div.body h2, div.body h3, div.body h4, div.body h5, div.body h=
6 { margin: 0px; border: 0px; padding: 0.3em 0px; }

div.body hr { border: 0px; background-color: rgb(204, 204, 204); height: 1p=
x; }

div.body pre { border-radius: 3px; border: 1px solid rgb(170, 204, 153); }

div.body div.admonition, div.body div.impl-detail { border-radius: 3px; }

div.body div.impl-detail > p { margin: 0px; }

div.body div.seealso { border: 1px solid rgb(221, 221, 102); }

div.body a { color: rgb(0, 114, 170); }

div.body a:visited { color: rgb(99, 99, 187); }

div.body a:hover { color: rgb(0, 176, 228); }

tt, code, pre { font-family: monospace, sans-serif; font-size: 96.5%; }

div.body tt, div.body code { border-radius: 3px; }

div.body tt.descname, div.body code.descname { font-size: 120%; }

div.body tt.xref, div.body a tt, div.body code.xref, div.body a code { font=
-weight: normal; }

table.docutils { border: 1px solid rgb(221, 221, 221); min-width: 20%; bord=
er-radius: 3px; margin-top: 10px; margin-bottom: 10px; }

table.docutils td, table.docutils th { border-radius: 3px; border: 1px soli=
d rgb(221, 221, 221) !important; }

table p, table li { text-align: left !important; }

table.docutils th { background-color: rgb(238, 238, 238); padding: 0.3em 0.=
5em; }

table.docutils td { background-color: white; padding: 0.3em 0.5em; }

table.footnote, table.footnote td { border: 0px !important; }

div.footer { line-height: 150%; margin-top: -2em; text-align: right; width:=
 auto; margin-right: 10px; }

div.footer a:hover { color: rgb(0, 149, 196); }

.refcount { color: rgb(0, 102, 0); }

.stableabi { color: rgb(34, 34, 153); }

.highlight { background: none !important; }

dl > dt span ~ em { font-family: monospace, sans-serif; }
------MultipartBoundary--phPsYHfPUJlpNkG3NxOQHszjJAKLekE70eG0JaOVhQ----
Content-Type: text/css
Content-Transfer-Encoding: quoted-printable
Content-Location: https://docs.python.org/3.8/_static/default.css

@charset "utf-8";

@import url("classic.css");
------MultipartBoundary--phPsYHfPUJlpNkG3NxOQHszjJAKLekE70eG0JaOVhQ----
Content-Type: text/css
Content-Transfer-Encoding: quoted-printable
Content-Location: https://docs.python.org/3.8/_static/classic.css

@charset "utf-8";

@import url("basic.css");

html { background-color: rgb(255, 255, 255); }

body { font-family: "Lucida Grande", Arial, sans-serif; font-size: 100%; ba=
ckground-color: white; color: rgb(0, 0, 0); margin: 0px; padding: 0px; }

div.document { background-color: white; }

div.documentwrapper { float: left; width: 100%; }

div.bodywrapper { margin: 0px 0px 0px 230px; }

div.body { background-color: white; color: rgb(34, 34, 34); padding: 0px 20=
px 30px; }

div.footer { color: rgb(85, 85, 85); width: 100%; padding: 9px 0px; text-al=
ign: center; font-size: 75%; }

div.footer a { color: rgb(85, 85, 85); text-decoration: underline; }

div.related { background-color: white; line-height: 30px; color: rgb(102, 1=
02, 102); }

div.related a { color: rgb(68, 68, 68); }

div.sphinxsidebar { }

div.sphinxsidebar h3 { font-family: "Lucida Grande", Arial, sans-serif; col=
or: rgb(68, 68, 68); font-size: 1.4em; font-weight: normal; margin: 0px; pa=
dding: 0px; }

div.sphinxsidebar h3 a { color: rgb(68, 68, 68); }

div.sphinxsidebar h4 { font-family: "Lucida Grande", Arial, sans-serif; col=
or: rgb(68, 68, 68); font-size: 1.3em; font-weight: normal; margin: 5px 0px=
 0px; padding: 0px; }

div.sphinxsidebar p { color: rgb(68, 68, 68); }

div.sphinxsidebar p.topless { margin: 5px 10px 10px; }

div.sphinxsidebar ul { margin: 10px; padding: 0px; color: rgb(68, 68, 68); =
}

div.sphinxsidebar a { color: rgb(68, 68, 68); }

div.sphinxsidebar input { border: 1px solid rgb(68, 68, 68); font-family: s=
ans-serif; font-size: 1em; }

div#sidebarbutton { background-color: rgb(60, 110, 131); }

a { color: rgb(0, 144, 192); text-decoration: none; }

a:visited { color: rgb(0, 96, 143); text-decoration: none; }

a:hover { text-decoration: underline; }

div.body h1, div.body h2, div.body h3, div.body h4, div.body h5, div.body h=
6 { font-family: "Lucida Grande", Arial, sans-serif; background-color: whit=
e; font-weight: normal; color: rgb(26, 26, 26); border-bottom: 1px solid rg=
b(204, 204, 204); margin: 20px -20px 10px; padding: 3px 0px 3px 10px; }

div.body h1 { margin-top: 0px; font-size: 200%; }

div.body h2 { font-size: 160%; }

div.body h3 { font-size: 140%; }

div.body h4 { font-size: 120%; }

div.body h5 { font-size: 110%; }

div.body h6 { font-size: 100%; }

a.headerlink { color: rgb(170, 170, 170); font-size: 0.8em; padding: 0px 4p=
x; text-decoration: none; }

a.headerlink:hover { background-color: rgb(170, 170, 170); color: white; }

div.body p, div.body dd, div.body li, div.body blockquote { text-align: jus=
tify; line-height: 130%; }

div.admonition p.admonition-title + p { display: inline; }

div.admonition p { margin-bottom: 5px; }

div.admonition pre { margin-bottom: 5px; }

div.admonition ul, div.admonition ol { margin-bottom: 5px; }

div.note { background-color: rgb(238, 238, 238); border: 1px solid rgb(204,=
 204, 204); }

div.seealso { background-color: rgb(255, 255, 204); border: 1px solid rgb(2=
55, 255, 102); }

div.topic { background-color: rgb(238, 238, 238); }

div.warning { background-color: rgb(255, 228, 228); border: 1px solid rgb(2=
55, 102, 102); }

p.admonition-title { display: inline; }

p.admonition-title::after { content: ":"; }

pre { padding: 5px; background-color: rgb(238, 255, 204); color: rgb(51, 51=
, 51); line-height: 120%; border-top: 1px solid rgb(170, 204, 153); border-=
bottom: 1px solid rgb(170, 204, 153); border-image: initial; border-left: n=
one; border-right: none; }

code { background-color: rgb(236, 240, 243); padding: 0px 1px; font-size: 0=
.95em; }

th, dl.field-list > dt { background-color: rgb(238, 221, 238); }

.warning code { background: rgb(239, 194, 194); }

.note code { background: rgb(214, 214, 214); }

.viewcode-back { font-family: "Lucida Grande", Arial, sans-serif; }

div.viewcode-block:target { background-color: rgb(244, 222, 191); border-to=
p: 1px solid rgb(170, 204, 153); border-bottom: 1px solid rgb(170, 204, 153=
); }

div.code-block-caption { color: rgb(239, 239, 239); background-color: rgb(2=
8, 78, 99); }
------MultipartBoundary--phPsYHfPUJlpNkG3NxOQHszjJAKLekE70eG0JaOVhQ----
Content-Type: text/css
Content-Transfer-Encoding: quoted-printable
Content-Location: https://docs.python.org/3.8/_static/basic.css

@charset "utf-8";

div.clearer { clear: both; }

div.related { width: 100%; font-size: 90%; }

div.related h3 { display: none; }

div.related ul { margin: 0px; padding: 0px 0px 0px 10px; list-style: none; =
}

div.related li { display: inline; }

div.related li.right { float: right; margin-right: 5px; }

div.sphinxsidebarwrapper { padding: 10px 5px 0px 10px; }

div.sphinxsidebar { float: left; width: 230px; margin-left: -100%; font-siz=
e: 90%; overflow-wrap: break-word; }

div.sphinxsidebar ul { list-style: none; }

div.sphinxsidebar ul ul, div.sphinxsidebar ul.want-points { margin-left: 20=
px; list-style: square; }

div.sphinxsidebar ul ul { margin-top: 0px; margin-bottom: 0px; }

div.sphinxsidebar form { margin-top: 10px; }

div.sphinxsidebar input { border: 1px solid rgb(152, 219, 204); font-family=
: sans-serif; font-size: 1em; }

div.sphinxsidebar #searchbox form.search { overflow: hidden; }

div.sphinxsidebar #searchbox input[type=3D"text"] { float: left; width: 80%=
; padding: 0.25em; box-sizing: border-box; }

div.sphinxsidebar #searchbox input[type=3D"submit"] { float: left; width: 2=
0%; border-left: none; padding: 0.25em; box-sizing: border-box; }

img { border: 0px; max-width: 100%; }

ul.search { margin: 10px 0px 0px 20px; padding: 0px; }

ul.search li { padding: 5px 0px 5px 20px; background-image: url("file.png")=
; background-repeat: no-repeat; background-position: 0px 7px; }

ul.search li a { font-weight: bold; }

ul.search li div.context { color: rgb(136, 136, 136); margin: 2px 0px 0px 3=
0px; text-align: left; }

ul.keywordmatches li.goodmatch a { font-weight: bold; }

table.contentstable { width: 90%; margin-left: auto; margin-right: auto; }

table.contentstable p.biglink { line-height: 150%; }

a.biglink { font-size: 1.3em; }

span.linkdescr { font-style: italic; padding-top: 5px; font-size: 90%; }

table.indextable { width: 100%; }

table.indextable td { text-align: left; vertical-align: top; }

table.indextable ul { margin-top: 0px; margin-bottom: 0px; list-style-type:=
 none; }

table.indextable > tbody > tr > td > ul { padding-left: 0em; }

table.indextable tr.pcap { height: 10px; }

table.indextable tr.cap { margin-top: 10px; background-color: rgb(242, 242,=
 242); }

img.toggler { margin-right: 3px; margin-top: 3px; cursor: pointer; }

div.modindex-jumpbox { border-top: 1px solid rgb(221, 221, 221); border-bot=
tom: 1px solid rgb(221, 221, 221); margin: 1em 0px; padding: 0.4em; }

div.genindex-jumpbox { border-top: 1px solid rgb(221, 221, 221); border-bot=
tom: 1px solid rgb(221, 221, 221); margin: 1em 0px; padding: 0.4em; }

table.modindextable td { padding: 2px; border-collapse: collapse; }

div.body { min-width: 450px; max-width: 800px; }

div.body p, div.body dd, div.body li, div.body blockquote { }

a.headerlink { visibility: hidden; }

a.brackets::before, span.brackets > a::before { content: "["; }

a.brackets::after, span.brackets > a::after { content: "]"; }

h1:hover > a.headerlink, h2:hover > a.headerlink, h3:hover > a.headerlink, =
h4:hover > a.headerlink, h5:hover > a.headerlink, h6:hover > a.headerlink, =
dt:hover > a.headerlink, caption:hover > a.headerlink, p.caption:hover > a.=
headerlink, div.code-block-caption:hover > a.headerlink { visibility: visib=
le; }

div.body p.caption { text-align: inherit; }

div.body td { text-align: left; }

.first { margin-top: 0px !important; }

p.rubric { margin-top: 30px; font-weight: bold; }

img.align-left, .figure.align-left, object.align-left { clear: left; float:=
 left; margin-right: 1em; }

img.align-right, .figure.align-right, object.align-right { clear: right; fl=
oat: right; margin-left: 1em; }

img.align-center, .figure.align-center, object.align-center { display: bloc=
k; margin-left: auto; margin-right: auto; }

img.align-default, .figure.align-default { display: block; margin-left: aut=
o; margin-right: auto; }

.align-left { text-align: left; }

.align-center { text-align: center; }

.align-default { text-align: center; }

.align-right { text-align: right; }

div.sidebar { margin: 0px 0px 0.5em 1em; border: 1px solid rgb(221, 221, 18=
7); padding: 7px 7px 0px; background-color: rgb(255, 255, 238); width: 40%;=
 float: right; }

p.sidebar-title { font-weight: bold; }

div.topic { border: 1px solid rgb(204, 204, 204); padding: 7px 7px 0px; mar=
gin: 10px 0px; }

p.topic-title { font-size: 1.1em; font-weight: bold; margin-top: 10px; }

div.admonition { margin-top: 10px; margin-bottom: 10px; padding: 7px; }

div.admonition dt { font-weight: bold; }

div.admonition dl { margin-bottom: 0px; }

p.admonition-title { margin: 0px 10px 5px 0px; font-weight: bold; }

div.body p.centered { text-align: center; margin-top: 25px; }

table.docutils { border: 0px; border-collapse: collapse; }

table.align-center { margin-left: auto; margin-right: auto; }

table.align-default { margin-left: auto; margin-right: auto; }

table caption span.caption-number { font-style: italic; }

table caption span.caption-text { }

table.docutils td, table.docutils th { padding: 1px 8px 1px 5px; border-wid=
th: 0px 0px 1px; border-top-style: initial; border-top-color: initial; bord=
er-left-style: initial; border-left-color: initial; border-right-style: ini=
tial; border-right-color: initial; border-bottom-style: solid; border-botto=
m-color: rgb(170, 170, 170); }

table.footnote td, table.footnote th { border: 0px !important; }

th { text-align: left; padding-right: 5px; }

table.citation { border-left: 1px solid gray; margin-left: 1px; }

table.citation td { border-bottom: none; }

th > p:first-child, td > p:first-child { margin-top: 0px; }

th > p:last-child, td > p:last-child { margin-bottom: 0px; }

div.figure { margin: 0.5em; padding: 0.5em; }

div.figure p.caption { padding: 0.3em; }

div.figure p.caption span.caption-number { font-style: italic; }

div.figure p.caption span.caption-text { }

table.field-list td, table.field-list th { border: 0px !important; }

.field-list ul { margin: 0px; padding-left: 1em; }

.field-list p { margin: 0px; }

.field-name { hyphens: manual; }

table.hlist td { vertical-align: top; }

ol.arabic { list-style: decimal; }

ol.loweralpha { list-style: lower-alpha; }

ol.upperalpha { list-style: upper-alpha; }

ol.lowerroman { list-style: lower-roman; }

ol.upperroman { list-style: upper-roman; }

li > p:first-child { margin-top: 0px; }

li > p:last-child { margin-bottom: 0px; }

dl.footnote > dt, dl.citation > dt { float: left; }

dl.footnote > dd, dl.citation > dd { margin-bottom: 0em; }

dl.footnote > dd::after, dl.citation > dd::after { content: ""; clear: both=
; }

dl.field-list { display: grid; grid-template-columns: fit-content(30%) auto=
; }

dl.field-list > dt { font-weight: bold; word-break: break-word; padding-lef=
t: 0.5em; padding-right: 5px; }

dl.field-list > dt::after { content: ":"; }

dl.field-list > dd { padding-left: 0.5em; margin-top: 0em; margin-left: 0em=
; margin-bottom: 0em; }

dl { margin-bottom: 15px; }

dd > p:first-child { margin-top: 0px; }

dd ul, dd table { margin-bottom: 10px; }

dd { margin-top: 3px; margin-bottom: 10px; margin-left: 30px; }

dt:target, span.highlighted { background-color: rgb(251, 229, 78); }

rect.highlighted { fill: rgb(251, 229, 78); }

dl.glossary dt { font-weight: bold; font-size: 1.1em; }

.optional { font-size: 1.3em; }

.sig-paren { font-size: larger; }

.versionmodified { font-style: italic; }

.system-message { background-color: rgb(255, 221, 170); padding: 5px; borde=
r: 3px solid red; }

.footnote:target { background-color: rgb(255, 255, 170); }

.line-block { display: block; margin-top: 1em; margin-bottom: 1em; }

.line-block .line-block { margin-top: 0px; margin-bottom: 0px; margin-left:=
 1.5em; }

.guilabel, .menuselection { font-family: sans-serif; }

.accelerator { text-decoration: underline; }

.classifier { font-style: oblique; }

.classifier::before { font-style: normal; margin: 0.5em; content: ":"; }

abbr, acronym { border-bottom: 1px dotted; cursor: help; }

pre { overflow: auto hidden; }

span.pre { hyphens: none; }

td.linenos pre { padding: 5px 0px; border: 0px; background-color: transpare=
nt; color: rgb(170, 170, 170); }

table.highlighttable { margin-left: 0.5em; }

table.highlighttable td { padding: 0px 0.5em; }

div.code-block-caption { padding: 2px 5px; font-size: small; }

div.code-block-caption code { background-color: transparent; }

div.code-block-caption + div > div.highlight > pre { margin-top: 0px; }

div.doctest > div.highlight span.gp { user-select: none; }

div.code-block-caption span.caption-number { padding: 0.1em 0.3em; font-sty=
le: italic; }

div.code-block-caption span.caption-text { }

div.literal-block-wrapper { padding: 1em 1em 0px; }

div.literal-block-wrapper div.highlight { margin: 0px; }

code.descname { background-color: transparent; font-weight: bold; font-size=
: 1.2em; }

code.descclassname { background-color: transparent; }

code.xref, a code { background-color: transparent; font-weight: bold; }

h1 code, h2 code, h3 code, h4 code, h5 code, h6 code { background-color: tr=
ansparent; }

.viewcode-link { float: right; }

.viewcode-back { float: right; font-family: sans-serif; }

div.viewcode-block:target { margin: -1px -10px; padding: 0px 10px; }

img.math { vertical-align: middle; }

div.body div.math p { text-align: center; }

span.eqno { float: right; }

span.eqno a.headerlink { position: relative; left: 0px; z-index: 1; }

div.math:hover a.headerlink { visibility: visible; }

@media print {
  div.document, div.documentwrapper, div.bodywrapper { width: 100%; margin:=
 0px !important; }
  div.sphinxsidebar, div.related, div.footer, #top-link { display: none; }
}
------MultipartBoundary--phPsYHfPUJlpNkG3NxOQHszjJAKLekE70eG0JaOVhQ----
Content-Type: text/css
Content-Transfer-Encoding: quoted-printable
Content-Location: https://docs.python.org/3.8/_static/pygments.css

@charset "utf-8";

.highlight .hll { background-color: rgb(255, 255, 204); }

.highlight { background: rgb(238, 255, 204); }

.highlight .c { color: rgb(64, 128, 144); font-style: italic; }

.highlight .err { border: 1px solid rgb(255, 0, 0); }

.highlight .k { color: rgb(0, 112, 32); font-weight: bold; }

.highlight .o { color: rgb(102, 102, 102); }

.highlight .ch { color: rgb(64, 128, 144); font-style: italic; }

.highlight .cm { color: rgb(64, 128, 144); font-style: italic; }

.highlight .cp { color: rgb(0, 112, 32); }

.highlight .cpf { color: rgb(64, 128, 144); font-style: italic; }

.highlight .c1 { color: rgb(64, 128, 144); font-style: italic; }

.highlight .cs { color: rgb(64, 128, 144); background-color: rgb(255, 240, =
240); }

.highlight .gd { color: rgb(160, 0, 0); }

.highlight .ge { font-style: italic; }

.highlight .gr { color: rgb(255, 0, 0); }

.highlight .gh { color: rgb(0, 0, 128); font-weight: bold; }

.highlight .gi { color: rgb(0, 160, 0); }

.highlight .go { color: rgb(51, 51, 51); }

.highlight .gp { color: rgb(198, 93, 9); font-weight: bold; }

.highlight .gs { font-weight: bold; }

.highlight .gu { color: rgb(128, 0, 128); font-weight: bold; }

.highlight .gt { color: rgb(0, 68, 221); }

.highlight .kc { color: rgb(0, 112, 32); font-weight: bold; }

.highlight .kd { color: rgb(0, 112, 32); font-weight: bold; }

.highlight .kn { color: rgb(0, 112, 32); font-weight: bold; }

.highlight .kp { color: rgb(0, 112, 32); }

.highlight .kr { color: rgb(0, 112, 32); font-weight: bold; }

.highlight .kt { color: rgb(144, 32, 0); }

.highlight .m { color: rgb(32, 128, 80); }

.highlight .s { color: rgb(64, 112, 160); }

.highlight .na { color: rgb(64, 112, 160); }

.highlight .nb { color: rgb(0, 112, 32); }

.highlight .nc { color: rgb(14, 132, 181); font-weight: bold; }

.highlight .no { color: rgb(96, 173, 213); }

.highlight .nd { color: rgb(85, 85, 85); font-weight: bold; }

.highlight .ni { color: rgb(213, 85, 55); font-weight: bold; }

.highlight .ne { color: rgb(0, 112, 32); }

.highlight .nf { color: rgb(6, 40, 126); }

.highlight .nl { color: rgb(0, 32, 112); font-weight: bold; }

.highlight .nn { color: rgb(14, 132, 181); font-weight: bold; }

.highlight .nt { color: rgb(6, 40, 115); font-weight: bold; }

.highlight .nv { color: rgb(187, 96, 213); }

.highlight .ow { color: rgb(0, 112, 32); font-weight: bold; }

.highlight .w { color: rgb(187, 187, 187); }

.highlight .mb { color: rgb(32, 128, 80); }

.highlight .mf { color: rgb(32, 128, 80); }

.highlight .mh { color: rgb(32, 128, 80); }

.highlight .mi { color: rgb(32, 128, 80); }

.highlight .mo { color: rgb(32, 128, 80); }

.highlight .sa { color: rgb(64, 112, 160); }

.highlight .sb { color: rgb(64, 112, 160); }

.highlight .sc { color: rgb(64, 112, 160); }

.highlight .dl { color: rgb(64, 112, 160); }

.highlight .sd { color: rgb(64, 112, 160); font-style: italic; }

.highlight .s2 { color: rgb(64, 112, 160); }

.highlight .se { color: rgb(64, 112, 160); font-weight: bold; }

.highlight .sh { color: rgb(64, 112, 160); }

.highlight .si { color: rgb(112, 160, 208); font-style: italic; }

.highlight .sx { color: rgb(198, 93, 9); }

.highlight .sr { color: rgb(35, 83, 136); }

.highlight .s1 { color: rgb(64, 112, 160); }

.highlight .ss { color: rgb(81, 121, 24); }

.highlight .bp { color: rgb(0, 112, 32); }

.highlight .fm { color: rgb(6, 40, 126); }

.highlight .vc { color: rgb(187, 96, 213); }

.highlight .vg { color: rgb(187, 96, 213); }

.highlight .vi { color: rgb(187, 96, 213); }

.highlight .vm { color: rgb(187, 96, 213); }

.highlight .il { color: rgb(32, 128, 80); }
------MultipartBoundary--phPsYHfPUJlpNkG3NxOQHszjJAKLekE70eG0JaOVhQ----
Content-Type: image/png
Content-Transfer-Encoding: base64
Content-Location: https://docs.python.org/3.8/_static/py.png

iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAAAXNSR0IArs4c6QAAAAZiS0dEAP8A
/wD/oL2nkwAAAAlwSFlzAAALEwAACxMBAJqcGAAAAAd0SU1FB9gEGxE4IQYzJ14AAAI3SURBVDjL
ZZNPSFVBFIe/e9+zd3silBCl0SZoU4s2rVq0EB5tQip4UNvATVGu3QRBiyAi2iltWkgbF5EgRhFF
RpiWtrWIzDIV1Pzz7p15M2fmtvDevOqBw8DM9zvnN8ycgF3R/eDtM2mac96ZdrFNxBikqbRV+vHH
/ut9gAZczoe7C3gnF0f6au1OLM5avFi8d1Ea+JvAMSAq8nsKOGs5f2cYJ3Y7rc2PO4BqkS8DdD98
f9tbe1ysCoxOBo1qlEXHJWcM4b5KPU19zleA0o4Clx99eO3EdqVewHsCoFRugUoVghJO7A6H6Vx9
wdtYi27cr5x6dy/03nVtWTU7bWeZh6jNUcAiCaFTURl9A+gs56AviHzh3mnqtdPxm6knfQPLU7Ua
okASQq/agY7yDrG16Mba6Pz48NP56VdrgAApYObGaicPtkovToFLQBKA/WUxTe3FRk4san15aGKg
d3Dj560rrdGJS6FT0X9YYvLuiMKL1kAQOpHZ3PqfyZfP41+9PW1VfzX0RXFSECfgNEmSTgImdDru
F2O0E8vvqZG1auQubAsKooIYYHpGvwA2g+xndQBHgWa6cG0ih5cW/w6VvEq3nChwCoBvs+bL2Z7V
ceBHGTDAIrABpMVuhw+4OiLgLIglOLPYBTQAlfErIeCzjRVg1dtEb1kt5Omv+DTV2YssAN+zNdkz
C42N9brV8WdvYp07seOdM2Of1F3AAknW0AJpwN6IgEPAEaANaMlcbmZdl7KRBuAfAb+v//yMAJoA
AAAASUVORK5CYII=

------MultipartBoundary--phPsYHfPUJlpNkG3NxOQHszjJAKLekE70eG0JaOVhQ------
