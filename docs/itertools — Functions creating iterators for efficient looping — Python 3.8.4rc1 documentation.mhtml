From: <Saved by Blink>
Snapshot-Content-Location: https://docs.python.org/3/library/itertools.html
Subject: =?utf-8?Q?itertools=20=E2=80=94=20Functions=20creating=20iterators=20for?=
 =?utf-8?Q?=20efficient=20looping=20=E2=80=94=20Python=203.8.4rc1=20docume?=
 =?utf-8?Q?ntation?=
Date: Thu, 2 Jul 2020 13:55:51 -0000
MIME-Version: 1.0
Content-Type: multipart/related;
	type="text/html";
	boundary="----MultipartBoundary--iCxKw0CgqRlXTKAGpKMnE6M3THKWidLpodYtktEZFt----"


------MultipartBoundary--iCxKw0CgqRlXTKAGpKMnE6M3THKWidLpodYtktEZFt----
Content-Type: text/html
Content-ID: <frame-1BE5A819D7A6F143487818656F768528@mhtml.blink>
Content-Transfer-Encoding: quoted-printable
Content-Location: https://docs.python.org/3/library/itertools.html

<!DOCTYPE html><html xmlns=3D"http://www.w3.org/1999/xhtml"><head><meta htt=
p-equiv=3D"Content-Type" content=3D"text/html; charset=3DUTF-8"><link rel=
=3D"stylesheet" type=3D"text/css" href=3D"cid:css-dcec73bf-e777-41c3-b914-b=
83e59c97c3a@mhtml.blink" />
   =20
    <title>itertools =E2=80=94 Functions creating iterators for efficient l=
ooping =E2=80=94 Python 3.8.4rc1 documentation</title>
    <link rel=3D"stylesheet" href=3D"https://docs.python.org/3/_static/pydo=
ctheme.css" type=3D"text/css">
    <link rel=3D"stylesheet" href=3D"https://docs.python.org/3/_static/pygm=
ents.css" type=3D"text/css">
   =20
   =20
   =20
   =20
   =20
   =20
   =20
   =20
   =20
    <link rel=3D"search" type=3D"application/opensearchdescription+xml" tit=
le=3D"Search within Python 3.8.4rc1 documentation" href=3D"https://docs.pyt=
hon.org/3/_static/opensearch.xml">
    <link rel=3D"author" title=3D"About these documents" href=3D"https://do=
cs.python.org/3/about.html">
    <link rel=3D"index" title=3D"Index" href=3D"https://docs.python.org/3/g=
enindex.html">
    <link rel=3D"search" title=3D"Search" href=3D"https://docs.python.org/3=
/search.html">
    <link rel=3D"copyright" title=3D"Copyright" href=3D"https://docs.python=
.org/3/copyright.html">
    <link rel=3D"next" title=3D"functools =E2=80=94 Higher-order functions =
and operations on callable objects" href=3D"https://docs.python.org/3/libra=
ry/functools.html">
    <link rel=3D"prev" title=3D"Functional Programming Modules" href=3D"htt=
ps://docs.python.org/3/library/functional.html">
    <link rel=3D"canonical" href=3D"https://docs.python.org/3/library/itert=
ools.html">
   =20
     =20
     =20
   =20

   =20
   =20

    <link rel=3D"shortcut icon" type=3D"image/png" href=3D"https://docs.pyt=
hon.org/3/_static/py.png">
   =20
   =20
   =20
    =20


  </head><body>
 =20
    <div class=3D"related" role=3D"navigation" aria-label=3D"related naviga=
tion">
      <h3>Navigation</h3>
      <ul>
        <li class=3D"right" style=3D"margin-right: 10px">
          <a href=3D"https://docs.python.org/3/genindex.html" title=3D"Gene=
ral Index" accesskey=3D"I">index</a></li>
        <li class=3D"right">
          <a href=3D"https://docs.python.org/3/py-modindex.html" title=3D"P=
ython Module Index">modules</a> |</li>
        <li class=3D"right">
          <a href=3D"https://docs.python.org/3/library/functools.html" titl=
e=3D"functools =E2=80=94 Higher-order functions and operations on callable =
objects" accesskey=3D"N">next</a> |</li>
        <li class=3D"right">
          <a href=3D"https://docs.python.org/3/library/functional.html" tit=
le=3D"Functional Programming Modules" accesskey=3D"P">previous</a> |</li>

    <li><img src=3D"https://docs.python.org/3/_static/py.png" alt=3D"" styl=
e=3D"vertical-align: middle; margin-top: -1px"></li>
    <li><a href=3D"https://www.python.org/">Python</a> =C2=BB</li>
   =20

    <li><span class=3D"language_switcher_placeholder"><select><option value=
=3D"en" selected=3D"selected">English</option><option value=3D"fr">French</=
option><option value=3D"ja">Japanese</option><option value=3D"ko">Korean</o=
ption><option value=3D"pt-br">Brazilian Portuguese</option><option value=3D=
"zh-cn">Simplified Chinese</option><option value=3D"zh-tw">Traditional Chin=
ese</option></select></span> <span class=3D"version_switcher_placeholder"><=
select><option value=3D"3.10">dev (3.10)</option><option value=3D"3.9">pre =
(3.9)</option><option value=3D"3.8" selected=3D"selected">3.8.4rc1</option>=
<option value=3D"3.7">3.7</option><option value=3D"3.6">3.6</option><option=
 value=3D"3.5">3.5</option><option value=3D"2.7">2.7</option></select></spa=
n> <a href=3D"https://docs.python.org/3/index.html">Documentation</a> =C2=
=BB</li>

          <li class=3D"nav-item nav-item-1"><a href=3D"https://docs.python.=
org/3/library/index.html">The Python Standard Library</a> =C2=BB</li>
          <li class=3D"nav-item nav-item-2"><a href=3D"https://docs.python.=
org/3/library/functional.html" accesskey=3D"U">Functional Programming Modul=
es</a> =C2=BB</li>
    <li class=3D"right">
       =20

    <div class=3D"inline-search" style=3D"" role=3D"search">
        <form class=3D"inline-search" action=3D"https://docs.python.org/3/s=
earch.html" method=3D"get">
          <input placeholder=3D"Quick search" type=3D"text" name=3D"q">
          <input type=3D"submit" value=3D"Go">
         =20
         =20
        </form>
    </div>
   =20
         |
    </li>

      </ul>
    </div>   =20

    <div class=3D"document">
      <div class=3D"documentwrapper">
        <div class=3D"bodywrapper">
          <div class=3D"body" role=3D"main">
           =20
  <div class=3D"section" id=3D"module-itertools">
<span id=3D"itertools-functions-creating-iterators-for-efficient-looping"><=
/span><h1><a class=3D"reference internal" href=3D"https://docs.python.org/3=
/library/itertools.html#module-itertools" title=3D"itertools: Functions cre=
ating iterators for efficient looping."><code class=3D"xref py py-mod docut=
ils literal notranslate"><span class=3D"pre">itertools</span></code></a> =
=E2=80=94 Functions creating iterators for efficient looping<a class=3D"hea=
derlink" href=3D"https://docs.python.org/3/library/itertools.html#module-it=
ertools" title=3D"Permalink to this headline">=C2=B6</a></h1>
<hr class=3D"docutils">
<p>This module implements a number of <a class=3D"reference internal" href=
=3D"https://docs.python.org/3/glossary.html#term-iterator"><span class=3D"x=
ref std std-term">iterator</span></a> building blocks inspired
by constructs from APL, Haskell, and SML.  Each has been recast in a form
suitable for Python.</p>
<p>The module standardizes a core set of fast, memory efficient tools that =
are
useful by themselves or in combination.  Together, they form an =E2=80=9Cit=
erator
algebra=E2=80=9D making it possible to construct specialized tools succinct=
ly and
efficiently in pure Python.</p>
<p>For instance, SML provides a tabulation tool: <code class=3D"docutils li=
teral notranslate"><span class=3D"pre">tabulate(f)</span></code> which prod=
uces a
sequence <code class=3D"docutils literal notranslate"><span class=3D"pre">f=
(0),</span> <span class=3D"pre">f(1),</span> <span class=3D"pre">...</span>=
</code>.  The same effect can be achieved in Python
by combining <a class=3D"reference internal" href=3D"https://docs.python.or=
g/3/library/functions.html#map" title=3D"map"><code class=3D"xref py py-fun=
c docutils literal notranslate"><span class=3D"pre">map()</span></code></a>=
 and <a class=3D"reference internal" href=3D"https://docs.python.org/3/libr=
ary/itertools.html#itertools.count" title=3D"itertools.count"><code class=
=3D"xref py py-func docutils literal notranslate"><span class=3D"pre">count=
()</span></code></a> to form <code class=3D"docutils literal notranslate"><=
span class=3D"pre">map(f,</span> <span class=3D"pre">count())</span></code>=
.</p>
<p>These tools and their built-in counterparts also work well with the high=
-speed
functions in the <a class=3D"reference internal" href=3D"https://docs.pytho=
n.org/3/library/operator.html#module-operator" title=3D"operator: Functions=
 corresponding to the standard operators."><code class=3D"xref py py-mod do=
cutils literal notranslate"><span class=3D"pre">operator</span></code></a> =
module.  For example, the multiplication
operator can be mapped across two vectors to form an efficient dot-product:
<code class=3D"docutils literal notranslate"><span class=3D"pre">sum(map(op=
erator.mul,</span> <span class=3D"pre">vector1,</span> <span class=3D"pre">=
vector2))</span></code>.</p>
<p><strong>Infinite iterators:</strong></p>
<table class=3D"docutils align-default">
<colgroup>
<col style=3D"width: 14%">
<col style=3D"width: 14%">
<col style=3D"width: 39%">
<col style=3D"width: 33%">
</colgroup>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>Iterator</p></th>
<th class=3D"head"><p>Arguments</p></th>
<th class=3D"head"><p>Results</p></th>
<th class=3D"head"><p>Example</p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><a class=3D"reference internal" href=3D"https=
://docs.python.org/3/library/itertools.html#itertools.count" title=3D"itert=
ools.count"><code class=3D"xref py py-func docutils literal notranslate"><s=
pan class=3D"pre">count()</span></code></a></p></td>
<td><p>start, [step]</p></td>
<td><p>start, start+step, start+2*step, =E2=80=A6</p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cou=
nt(10)</span> <span class=3D"pre">--&gt;</span> <span class=3D"pre">10</spa=
n> <span class=3D"pre">11</span> <span class=3D"pre">12</span> <span class=
=3D"pre">13</span> <span class=3D"pre">14</span> <span class=3D"pre">...</s=
pan></code></p></td>
</tr>
<tr class=3D"row-odd"><td><p><a class=3D"reference internal" href=3D"https:=
//docs.python.org/3/library/itertools.html#itertools.cycle" title=3D"iterto=
ols.cycle"><code class=3D"xref py py-func docutils literal notranslate"><sp=
an class=3D"pre">cycle()</span></code></a></p></td>
<td><p>p</p></td>
<td><p>p0, p1, =E2=80=A6 plast, p0, p1, =E2=80=A6</p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cyc=
le('ABCD')</span> <span class=3D"pre">--&gt;</span> <span class=3D"pre">A</=
span> <span class=3D"pre">B</span> <span class=3D"pre">C</span> <span class=
=3D"pre">D</span> <span class=3D"pre">A</span> <span class=3D"pre">B</span>=
 <span class=3D"pre">C</span> <span class=3D"pre">D</span> <span class=3D"p=
re">...</span></code></p></td>
</tr>
<tr class=3D"row-even"><td><p><a class=3D"reference internal" href=3D"https=
://docs.python.org/3/library/itertools.html#itertools.repeat" title=3D"iter=
tools.repeat"><code class=3D"xref py py-func docutils literal notranslate">=
<span class=3D"pre">repeat()</span></code></a></p></td>
<td><p>elem [,n]</p></td>
<td><p>elem, elem, elem, =E2=80=A6 endlessly or up to n times</p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">rep=
eat(10,</span> <span class=3D"pre">3)</span> <span class=3D"pre">--&gt;</sp=
an> <span class=3D"pre">10</span> <span class=3D"pre">10</span> <span class=
=3D"pre">10</span></code></p></td>
</tr>
</tbody>
</table>
<p><strong>Iterators terminating on the shortest input sequence:</strong></=
p>
<table class=3D"docutils align-default">
<colgroup>
<col style=3D"width: 17%">
<col style=3D"width: 17%">
<col style=3D"width: 30%">
<col style=3D"width: 37%">
</colgroup>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>Iterator</p></th>
<th class=3D"head"><p>Arguments</p></th>
<th class=3D"head"><p>Results</p></th>
<th class=3D"head"><p>Example</p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><a class=3D"reference internal" href=3D"https=
://docs.python.org/3/library/itertools.html#itertools.accumulate" title=3D"=
itertools.accumulate"><code class=3D"xref py py-func docutils literal notra=
nslate"><span class=3D"pre">accumulate()</span></code></a></p></td>
<td><p>p [,func]</p></td>
<td><p>p0, p0+p1, p0+p1+p2, =E2=80=A6</p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">acc=
umulate([1,2,3,4,5])</span> <span class=3D"pre">--&gt;</span> <span class=
=3D"pre">1</span> <span class=3D"pre">3</span> <span class=3D"pre">6</span>=
 <span class=3D"pre">10</span> <span class=3D"pre">15</span></code></p></td=
>
</tr>
<tr class=3D"row-odd"><td><p><a class=3D"reference internal" href=3D"https:=
//docs.python.org/3/library/itertools.html#itertools.chain" title=3D"iterto=
ols.chain"><code class=3D"xref py py-func docutils literal notranslate"><sp=
an class=3D"pre">chain()</span></code></a></p></td>
<td><p>p, q, =E2=80=A6</p></td>
<td><p>p0, p1, =E2=80=A6 plast, q0, q1, =E2=80=A6</p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cha=
in('ABC',</span> <span class=3D"pre">'DEF')</span> <span class=3D"pre">--&g=
t;</span> <span class=3D"pre">A</span> <span class=3D"pre">B</span> <span c=
lass=3D"pre">C</span> <span class=3D"pre">D</span> <span class=3D"pre">E</s=
pan> <span class=3D"pre">F</span></code></p></td>
</tr>
<tr class=3D"row-even"><td><p><a class=3D"reference internal" href=3D"https=
://docs.python.org/3/library/itertools.html#itertools.chain.from_iterable" =
title=3D"itertools.chain.from_iterable"><code class=3D"xref py py-func docu=
tils literal notranslate"><span class=3D"pre">chain.from_iterable()</span><=
/code></a></p></td>
<td><p>iterable</p></td>
<td><p>p0, p1, =E2=80=A6 plast, q0, q1, =E2=80=A6</p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">cha=
in.from_iterable(['ABC',</span> <span class=3D"pre">'DEF'])</span> <span cl=
ass=3D"pre">--&gt;</span> <span class=3D"pre">A</span> <span class=3D"pre">=
B</span> <span class=3D"pre">C</span> <span class=3D"pre">D</span> <span cl=
ass=3D"pre">E</span> <span class=3D"pre">F</span></code></p></td>
</tr>
<tr class=3D"row-odd"><td><p><a class=3D"reference internal" href=3D"https:=
//docs.python.org/3/library/itertools.html#itertools.compress" title=3D"ite=
rtools.compress"><code class=3D"xref py py-func docutils literal notranslat=
e"><span class=3D"pre">compress()</span></code></a></p></td>
<td><p>data, selectors</p></td>
<td><p>(d[0] if s[0]), (d[1] if s[1]), =E2=80=A6</p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">com=
press('ABCDEF',</span> <span class=3D"pre">[1,0,1,0,1,1])</span> <span clas=
s=3D"pre">--&gt;</span> <span class=3D"pre">A</span> <span class=3D"pre">C<=
/span> <span class=3D"pre">E</span> <span class=3D"pre">F</span></code></p>=
</td>
</tr>
<tr class=3D"row-even"><td><p><a class=3D"reference internal" href=3D"https=
://docs.python.org/3/library/itertools.html#itertools.dropwhile" title=3D"i=
tertools.dropwhile"><code class=3D"xref py py-func docutils literal notrans=
late"><span class=3D"pre">dropwhile()</span></code></a></p></td>
<td><p>pred, seq</p></td>
<td><p>seq[n], seq[n+1], starting when pred fails</p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">dro=
pwhile(lambda</span> <span class=3D"pre">x:</span> <span class=3D"pre">x&lt=
;5,</span> <span class=3D"pre">[1,4,6,4,1])</span> <span class=3D"pre">--&g=
t;</span> <span class=3D"pre">6</span> <span class=3D"pre">4</span> <span c=
lass=3D"pre">1</span></code></p></td>
</tr>
<tr class=3D"row-odd"><td><p><a class=3D"reference internal" href=3D"https:=
//docs.python.org/3/library/itertools.html#itertools.filterfalse" title=3D"=
itertools.filterfalse"><code class=3D"xref py py-func docutils literal notr=
anslate"><span class=3D"pre">filterfalse()</span></code></a></p></td>
<td><p>pred, seq</p></td>
<td><p>elements of seq where pred(elem) is false</p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">fil=
terfalse(lambda</span> <span class=3D"pre">x:</span> <span class=3D"pre">x%=
2,</span> <span class=3D"pre">range(10))</span> <span class=3D"pre">--&gt;<=
/span> <span class=3D"pre">0</span> <span class=3D"pre">2</span> <span clas=
s=3D"pre">4</span> <span class=3D"pre">6</span> <span class=3D"pre">8</span=
></code></p></td>
</tr>
<tr class=3D"row-even"><td><p><a class=3D"reference internal" href=3D"https=
://docs.python.org/3/library/itertools.html#itertools.groupby" title=3D"ite=
rtools.groupby"><code class=3D"xref py py-func docutils literal notranslate=
"><span class=3D"pre">groupby()</span></code></a></p></td>
<td><p>iterable[, key]</p></td>
<td><p>sub-iterators grouped by value of key(v)</p></td>
<td></td>
</tr>
<tr class=3D"row-odd"><td><p><a class=3D"reference internal" href=3D"https:=
//docs.python.org/3/library/itertools.html#itertools.islice" title=3D"itert=
ools.islice"><code class=3D"xref py py-func docutils literal notranslate"><=
span class=3D"pre">islice()</span></code></a></p></td>
<td><p>seq, [start,] stop [, step]</p></td>
<td><p>elements from seq[start:stop:step]</p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">isl=
ice('ABCDEFG',</span> <span class=3D"pre">2,</span> <span class=3D"pre">Non=
e)</span> <span class=3D"pre">--&gt;</span> <span class=3D"pre">C</span> <s=
pan class=3D"pre">D</span> <span class=3D"pre">E</span> <span class=3D"pre"=
>F</span> <span class=3D"pre">G</span></code></p></td>
</tr>
<tr class=3D"row-even"><td><p><a class=3D"reference internal" href=3D"https=
://docs.python.org/3/library/itertools.html#itertools.starmap" title=3D"ite=
rtools.starmap"><code class=3D"xref py py-func docutils literal notranslate=
"><span class=3D"pre">starmap()</span></code></a></p></td>
<td><p>func, seq</p></td>
<td><p>func(*seq[0]), func(*seq[1]), =E2=80=A6</p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">sta=
rmap(pow,</span> <span class=3D"pre">[(2,5),</span> <span class=3D"pre">(3,=
2),</span> <span class=3D"pre">(10,3)])</span> <span class=3D"pre">--&gt;</=
span> <span class=3D"pre">32</span> <span class=3D"pre">9</span> <span clas=
s=3D"pre">1000</span></code></p></td>
</tr>
<tr class=3D"row-odd"><td><p><a class=3D"reference internal" href=3D"https:=
//docs.python.org/3/library/itertools.html#itertools.takewhile" title=3D"it=
ertools.takewhile"><code class=3D"xref py py-func docutils literal notransl=
ate"><span class=3D"pre">takewhile()</span></code></a></p></td>
<td><p>pred, seq</p></td>
<td><p>seq[0], seq[1], until pred fails</p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">tak=
ewhile(lambda</span> <span class=3D"pre">x:</span> <span class=3D"pre">x&lt=
;5,</span> <span class=3D"pre">[1,4,6,4,1])</span> <span class=3D"pre">--&g=
t;</span> <span class=3D"pre">1</span> <span class=3D"pre">4</span></code><=
/p></td>
</tr>
<tr class=3D"row-even"><td><p><a class=3D"reference internal" href=3D"https=
://docs.python.org/3/library/itertools.html#itertools.tee" title=3D"itertoo=
ls.tee"><code class=3D"xref py py-func docutils literal notranslate"><span =
class=3D"pre">tee()</span></code></a></p></td>
<td><p>it, n</p></td>
<td><p>it1, it2, =E2=80=A6 itn  splits one iterator into n</p></td>
<td></td>
</tr>
<tr class=3D"row-odd"><td><p><a class=3D"reference internal" href=3D"https:=
//docs.python.org/3/library/itertools.html#itertools.zip_longest" title=3D"=
itertools.zip_longest"><code class=3D"xref py py-func docutils literal notr=
anslate"><span class=3D"pre">zip_longest()</span></code></a></p></td>
<td><p>p, q, =E2=80=A6</p></td>
<td><p>(p[0], q[0]), (p[1], q[1]), =E2=80=A6</p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">zip=
_longest('ABCD',</span> <span class=3D"pre">'xy',</span> <span class=3D"pre=
">fillvalue=3D'-')</span> <span class=3D"pre">--&gt;</span> <span class=3D"=
pre">Ax</span> <span class=3D"pre">By</span> <span class=3D"pre">C-</span> =
<span class=3D"pre">D-</span></code></p></td>
</tr>
</tbody>
</table>
<p><strong>Combinatoric iterators:</strong></p>
<table class=3D"docutils align-default">
<colgroup>
<col style=3D"width: 36%">
<col style=3D"width: 16%">
<col style=3D"width: 48%">
</colgroup>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>Iterator</p></th>
<th class=3D"head"><p>Arguments</p></th>
<th class=3D"head"><p>Results</p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><a class=3D"reference internal" href=3D"https=
://docs.python.org/3/library/itertools.html#itertools.product" title=3D"ite=
rtools.product"><code class=3D"xref py py-func docutils literal notranslate=
"><span class=3D"pre">product()</span></code></a></p></td>
<td><p>p, q, =E2=80=A6 [repeat=3D1]</p></td>
<td><p>cartesian product, equivalent to a nested for-loop</p></td>
</tr>
<tr class=3D"row-odd"><td><p><a class=3D"reference internal" href=3D"https:=
//docs.python.org/3/library/itertools.html#itertools.permutations" title=3D=
"itertools.permutations"><code class=3D"xref py py-func docutils literal no=
translate"><span class=3D"pre">permutations()</span></code></a></p></td>
<td><p>p[, r]</p></td>
<td><p>r-length tuples, all possible orderings, no repeated elements</p></t=
d>
</tr>
<tr class=3D"row-even"><td><p><a class=3D"reference internal" href=3D"https=
://docs.python.org/3/library/itertools.html#itertools.combinations" title=
=3D"itertools.combinations"><code class=3D"xref py py-func docutils literal=
 notranslate"><span class=3D"pre">combinations()</span></code></a></p></td>
<td><p>p, r</p></td>
<td><p>r-length tuples, in sorted order, no repeated elements</p></td>
</tr>
<tr class=3D"row-odd"><td><p><a class=3D"reference internal" href=3D"https:=
//docs.python.org/3/library/itertools.html#itertools.combinations_with_repl=
acement" title=3D"itertools.combinations_with_replacement"><code class=3D"x=
ref py py-func docutils literal notranslate"><span class=3D"pre">combinatio=
ns_with_replacement()</span></code></a></p></td>
<td><p>p, r</p></td>
<td><p>r-length tuples, in sorted order, with repeated elements</p></td>
</tr>
</tbody>
</table>
<table class=3D"docutils align-default">
<colgroup>
<col style=3D"width: 43%">
<col style=3D"width: 57%">
</colgroup>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>Examples</p></th>
<th class=3D"head"><p>Results</p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">product('ABCD',</span> <span class=3D"pre">repeat=3D2)<=
/span></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">AA<=
/span> <span class=3D"pre">AB</span> <span class=3D"pre">AC</span> <span cl=
ass=3D"pre">AD</span> <span class=3D"pre">BA</span> <span class=3D"pre">BB<=
/span> <span class=3D"pre">BC</span> <span class=3D"pre">BD</span> <span cl=
ass=3D"pre">CA</span> <span class=3D"pre">CB</span> <span class=3D"pre">CC<=
/span> <span class=3D"pre">CD</span> <span class=3D"pre">DA</span> <span cl=
ass=3D"pre">DB</span> <span class=3D"pre">DC</span> <span class=3D"pre">DD<=
/span></code></p></td>
</tr>
<tr class=3D"row-odd"><td><p><code class=3D"docutils literal notranslate"><=
span class=3D"pre">permutations('ABCD',</span> <span class=3D"pre">2)</span=
></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">AB<=
/span> <span class=3D"pre">AC</span> <span class=3D"pre">AD</span> <span cl=
ass=3D"pre">BA</span> <span class=3D"pre">BC</span> <span class=3D"pre">BD<=
/span> <span class=3D"pre">CA</span> <span class=3D"pre">CB</span> <span cl=
ass=3D"pre">CD</span> <span class=3D"pre">DA</span> <span class=3D"pre">DB<=
/span> <span class=3D"pre">DC</span></code></p></td>
</tr>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">combinations('ABCD',</span> <span class=3D"pre">2)</spa=
n></code></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">AB<=
/span> <span class=3D"pre">AC</span> <span class=3D"pre">AD</span> <span cl=
ass=3D"pre">BC</span> <span class=3D"pre">BD</span> <span class=3D"pre">CD<=
/span></code></p></td>
</tr>
<tr class=3D"row-odd"><td><p><code class=3D"docutils literal notranslate"><=
span class=3D"pre">combinations_with_replacement('ABCD',&nbsp;2)</span></co=
de></p></td>
<td><p><code class=3D"docutils literal notranslate"><span class=3D"pre">AA<=
/span> <span class=3D"pre">AB</span> <span class=3D"pre">AC</span> <span cl=
ass=3D"pre">AD</span> <span class=3D"pre">BB</span> <span class=3D"pre">BC<=
/span> <span class=3D"pre">BD</span> <span class=3D"pre">CC</span> <span cl=
ass=3D"pre">CD</span> <span class=3D"pre">DD</span></code></p></td>
</tr>
</tbody>
</table>
<div class=3D"section" id=3D"itertool-functions">
<span id=3D"itertools-functions"></span><h2>Itertool functions<a class=3D"h=
eaderlink" href=3D"https://docs.python.org/3/library/itertools.html#itertoo=
l-functions" title=3D"Permalink to this headline">=C2=B6</a></h2>
<p>The following module functions all construct and return iterators. Some =
provide
streams of infinite length, so they should only be accessed by functions or
loops that truncate the stream.</p>
<dl class=3D"function">
<dt id=3D"itertools.accumulate">
<code class=3D"sig-prename descclassname">itertools.</code><code class=3D"s=
ig-name descname">accumulate</code><span class=3D"sig-paren">(</span><em cl=
ass=3D"sig-param">iterable</em><span class=3D"optional">[</span>, <em class=
=3D"sig-param">func</em>, <em class=3D"sig-param">*</em>, <em class=3D"sig-=
param">initial=3DNone</em><span class=3D"optional">]</span><span class=3D"s=
ig-paren">)</span><a class=3D"headerlink" href=3D"https://docs.python.org/3=
/library/itertools.html#itertools.accumulate" title=3D"Permalink to this de=
finition">=C2=B6</a></dt>
<dd><p>Make an iterator that returns accumulated sums, or accumulated
results of other binary functions (specified via the optional
<em>func</em> argument).</p>
<p>If <em>func</em> is supplied, it should be a function
of two arguments. Elements of the input <em>iterable</em> may be any type
that can be accepted as arguments to <em>func</em>. (For example, with
the default operation of addition, elements may be any addable
type including <a class=3D"reference internal" href=3D"https://docs.python.=
org/3/library/decimal.html#decimal.Decimal" title=3D"decimal.Decimal"><code=
 class=3D"xref py py-class docutils literal notranslate"><span class=3D"pre=
">Decimal</span></code></a> or
<a class=3D"reference internal" href=3D"https://docs.python.org/3/library/f=
ractions.html#fractions.Fraction" title=3D"fractions.Fraction"><code class=
=3D"xref py py-class docutils literal notranslate"><span class=3D"pre">Frac=
tion</span></code></a>.)</p>
<p>Usually, the number of elements output matches the input iterable.
However, if the keyword argument <em>initial</em> is provided, the
accumulation leads off with the <em>initial</em> value so that the output
has one more element than the input iterable.</p>
<p>Roughly equivalent to:</p>
<div class=3D"highlight-python3 notranslate" style=3D"position: relative;">=
<div class=3D"highlight"><pre><span></span><span class=3D"k">def</span> <sp=
an class=3D"nf">accumulate</span><span class=3D"p">(</span><span class=3D"n=
">iterable</span><span class=3D"p">,</span> <span class=3D"n">func</span><s=
pan class=3D"o">=3D</span><span class=3D"n">operator</span><span class=3D"o=
">.</span><span class=3D"n">add</span><span class=3D"p">,</span> <span clas=
s=3D"o">*</span><span class=3D"p">,</span> <span class=3D"n">initial</span>=
<span class=3D"o">=3D</span><span class=3D"kc">None</span><span class=3D"p"=
>):</span>
    <span class=3D"s1">'Return running totals'</span>
    <span class=3D"c1"># accumulate([1,2,3,4,5]) --&gt; 1 3 6 10 15</span>
    <span class=3D"c1"># accumulate([1,2,3,4,5], initial=3D100) --&gt; 100 =
101 103 106 110 115</span>
    <span class=3D"c1"># accumulate([1,2,3,4,5], operator.mul) --&gt; 1 2 6=
 24 120</span>
    <span class=3D"n">it</span> <span class=3D"o">=3D</span> <span class=3D=
"nb">iter</span><span class=3D"p">(</span><span class=3D"n">iterable</span>=
<span class=3D"p">)</span>
    <span class=3D"n">total</span> <span class=3D"o">=3D</span> <span class=
=3D"n">initial</span>
    <span class=3D"k">if</span> <span class=3D"n">initial</span> <span clas=
s=3D"ow">is</span> <span class=3D"kc">None</span><span class=3D"p">:</span>
        <span class=3D"k">try</span><span class=3D"p">:</span>
            <span class=3D"n">total</span> <span class=3D"o">=3D</span> <sp=
an class=3D"nb">next</span><span class=3D"p">(</span><span class=3D"n">it</=
span><span class=3D"p">)</span>
        <span class=3D"k">except</span> <span class=3D"ne">StopIteration</s=
pan><span class=3D"p">:</span>
            <span class=3D"k">return</span>
    <span class=3D"k">yield</span> <span class=3D"n">total</span>
    <span class=3D"k">for</span> <span class=3D"n">element</span> <span cla=
ss=3D"ow">in</span> <span class=3D"n">it</span><span class=3D"p">:</span>
        <span class=3D"n">total</span> <span class=3D"o">=3D</span> <span c=
lass=3D"n">func</span><span class=3D"p">(</span><span class=3D"n">total</sp=
an><span class=3D"p">,</span> <span class=3D"n">element</span><span class=
=3D"p">)</span>
        <span class=3D"k">yield</span> <span class=3D"n">total</span>
</pre></div>
</div>
<p>There are a number of uses for the <em>func</em> argument.  It can be se=
t to
<a class=3D"reference internal" href=3D"https://docs.python.org/3/library/f=
unctions.html#min" title=3D"min"><code class=3D"xref py py-func docutils li=
teral notranslate"><span class=3D"pre">min()</span></code></a> for a runnin=
g minimum, <a class=3D"reference internal" href=3D"https://docs.python.org/=
3/library/functions.html#max" title=3D"max"><code class=3D"xref py py-func =
docutils literal notranslate"><span class=3D"pre">max()</span></code></a> f=
or a running maximum, or
<a class=3D"reference internal" href=3D"https://docs.python.org/3/library/o=
perator.html#operator.mul" title=3D"operator.mul"><code class=3D"xref py py=
-func docutils literal notranslate"><span class=3D"pre">operator.mul()</spa=
n></code></a> for a running product.  Amortization tables can be
built by accumulating interest and applying payments.  First-order
<a class=3D"reference external" href=3D"https://en.wikipedia.org/wiki/Recur=
rence_relation">recurrence relations</a>
can be modeled by supplying the initial value in the iterable and using onl=
y
the accumulated total in <em>func</em> argument:</p>
<div class=3D"highlight-python3 notranslate" style=3D"position: relative;">=
<div class=3D"highlight"><span class=3D"copybutton" title=3D"Hide the promp=
ts and output" style=3D"cursor: pointer; position: absolute; top: 0px; righ=
t: 0px; border-color: rgb(170, 204, 153); border-style: solid; border-width=
: 1px; color: rgb(170, 204, 153); font-family: monospace; padding-left: 0.2=
em; padding-right: 0.2em; border-radius: 0px 3px 0px 0px;">&gt;&gt;&gt;</sp=
an><pre><span></span><span class=3D"gp">&gt;&gt;&gt; </span><span class=3D"=
n">data</span> <span class=3D"o">=3D</span> <span class=3D"p">[</span><span=
 class=3D"mi">3</span><span class=3D"p">,</span> <span class=3D"mi">4</span=
><span class=3D"p">,</span> <span class=3D"mi">6</span><span class=3D"p">,<=
/span> <span class=3D"mi">2</span><span class=3D"p">,</span> <span class=3D=
"mi">1</span><span class=3D"p">,</span> <span class=3D"mi">9</span><span cl=
ass=3D"p">,</span> <span class=3D"mi">0</span><span class=3D"p">,</span> <s=
pan class=3D"mi">7</span><span class=3D"p">,</span> <span class=3D"mi">5</s=
pan><span class=3D"p">,</span> <span class=3D"mi">8</span><span class=3D"p"=
>]</span>
<span class=3D"gp">&gt;&gt;&gt; </span><span class=3D"nb">list</span><span =
class=3D"p">(</span><span class=3D"n">accumulate</span><span class=3D"p">(<=
/span><span class=3D"n">data</span><span class=3D"p">,</span> <span class=
=3D"n">operator</span><span class=3D"o">.</span><span class=3D"n">mul</span=
><span class=3D"p">))</span>     <span class=3D"c1"># running product</span=
>
<span class=3D"go">[3, 12, 72, 144, 144, 1296, 0, 0, 0, 0]</span>
<span class=3D"gp">&gt;&gt;&gt; </span><span class=3D"nb">list</span><span =
class=3D"p">(</span><span class=3D"n">accumulate</span><span class=3D"p">(<=
/span><span class=3D"n">data</span><span class=3D"p">,</span> <span class=
=3D"nb">max</span><span class=3D"p">))</span>              <span class=3D"c=
1"># running maximum</span>
<span class=3D"go">[3, 4, 6, 6, 6, 9, 9, 9, 9, 9]</span>

<span class=3D"go"># Amortize a 5% loan of 1000 with 4 annual payments of 9=
0</span>
<span class=3D"gp">&gt;&gt;&gt; </span><span class=3D"n">cashflows</span> <=
span class=3D"o">=3D</span> <span class=3D"p">[</span><span class=3D"mi">10=
00</span><span class=3D"p">,</span> <span class=3D"o">-</span><span class=
=3D"mi">90</span><span class=3D"p">,</span> <span class=3D"o">-</span><span=
 class=3D"mi">90</span><span class=3D"p">,</span> <span class=3D"o">-</span=
><span class=3D"mi">90</span><span class=3D"p">,</span> <span class=3D"o">-=
</span><span class=3D"mi">90</span><span class=3D"p">]</span>
<span class=3D"gp">&gt;&gt;&gt; </span><span class=3D"nb">list</span><span =
class=3D"p">(</span><span class=3D"n">accumulate</span><span class=3D"p">(<=
/span><span class=3D"n">cashflows</span><span class=3D"p">,</span> <span cl=
ass=3D"k">lambda</span> <span class=3D"n">bal</span><span class=3D"p">,</sp=
an> <span class=3D"n">pmt</span><span class=3D"p">:</span> <span class=3D"n=
">bal</span><span class=3D"o">*</span><span class=3D"mf">1.05</span> <span =
class=3D"o">+</span> <span class=3D"n">pmt</span><span class=3D"p">))</span=
>
<span class=3D"go">[1000, 960.0, 918.0, 873.9000000000001, 827.595000000000=
1]</span>

<span class=3D"go"># Chaotic recurrence relation https://en.wikipedia.org/w=
iki/Logistic_map</span>
<span class=3D"gp">&gt;&gt;&gt; </span><span class=3D"n">logistic_map</span=
> <span class=3D"o">=3D</span> <span class=3D"k">lambda</span> <span class=
=3D"n">x</span><span class=3D"p">,</span> <span class=3D"n">_</span><span c=
lass=3D"p">:</span>  <span class=3D"n">r</span> <span class=3D"o">*</span> =
<span class=3D"n">x</span> <span class=3D"o">*</span> <span class=3D"p">(</=
span><span class=3D"mi">1</span> <span class=3D"o">-</span> <span class=3D"=
n">x</span><span class=3D"p">)</span>
<span class=3D"gp">&gt;&gt;&gt; </span><span class=3D"n">r</span> <span cla=
ss=3D"o">=3D</span> <span class=3D"mf">3.8</span>
<span class=3D"gp">&gt;&gt;&gt; </span><span class=3D"n">x0</span> <span cl=
ass=3D"o">=3D</span> <span class=3D"mf">0.4</span>
<span class=3D"gp">&gt;&gt;&gt; </span><span class=3D"n">inputs</span> <spa=
n class=3D"o">=3D</span> <span class=3D"n">repeat</span><span class=3D"p">(=
</span><span class=3D"n">x0</span><span class=3D"p">,</span> <span class=3D=
"mi">36</span><span class=3D"p">)</span>     <span class=3D"c1"># only the =
initial value is used</span>
<span class=3D"gp">&gt;&gt;&gt; </span><span class=3D"p">[</span><span clas=
s=3D"nb">format</span><span class=3D"p">(</span><span class=3D"n">x</span><=
span class=3D"p">,</span> <span class=3D"s1">'.2f'</span><span class=3D"p">=
)</span> <span class=3D"k">for</span> <span class=3D"n">x</span> <span clas=
s=3D"ow">in</span> <span class=3D"n">accumulate</span><span class=3D"p">(</=
span><span class=3D"n">inputs</span><span class=3D"p">,</span> <span class=
=3D"n">logistic_map</span><span class=3D"p">)]</span>
<span class=3D"go">['0.40', '0.91', '0.30', '0.81', '0.60', '0.92', '0.29',=
 '0.79', '0.63',</span>
<span class=3D"go"> '0.88', '0.39', '0.90', '0.33', '0.84', '0.52', '0.95',=
 '0.18', '0.57',</span>
<span class=3D"go"> '0.93', '0.25', '0.71', '0.79', '0.63', '0.88', '0.39',=
 '0.91', '0.32',</span>
<span class=3D"go"> '0.83', '0.54', '0.95', '0.20', '0.60', '0.91', '0.30',=
 '0.80', '0.60']</span>
</pre></div>
</div>
<p>See <a class=3D"reference internal" href=3D"https://docs.python.org/3/li=
brary/functools.html#functools.reduce" title=3D"functools.reduce"><code cla=
ss=3D"xref py py-func docutils literal notranslate"><span class=3D"pre">fun=
ctools.reduce()</span></code></a> for a similar function that returns only =
the
final accumulated value.</p>
<div class=3D"versionadded">
<p><span class=3D"versionmodified added">New in version 3.2.</span></p>
</div>
<div class=3D"versionchanged">
<p><span class=3D"versionmodified changed">Changed in version 3.3: </span>A=
dded the optional <em>func</em> parameter.</p>
</div>
<div class=3D"versionchanged">
<p><span class=3D"versionmodified changed">Changed in version 3.8: </span>A=
dded the optional <em>initial</em> parameter.</p>
</div>
</dd></dl>

<dl class=3D"function">
<dt id=3D"itertools.chain">
<code class=3D"sig-prename descclassname">itertools.</code><code class=3D"s=
ig-name descname">chain</code><span class=3D"sig-paren">(</span><em class=
=3D"sig-param">*iterables</em><span class=3D"sig-paren">)</span><a class=3D=
"headerlink" href=3D"https://docs.python.org/3/library/itertools.html#itert=
ools.chain" title=3D"Permalink to this definition">=C2=B6</a></dt>
<dd><p>Make an iterator that returns elements from the first iterable until=
 it is
exhausted, then proceeds to the next iterable, until all of the iterables a=
re
exhausted.  Used for treating consecutive sequences as a single sequence.
Roughly equivalent to:</p>
<div class=3D"highlight-python3 notranslate" style=3D"position: relative;">=
<div class=3D"highlight"><pre><span></span><span class=3D"k">def</span> <sp=
an class=3D"nf">chain</span><span class=3D"p">(</span><span class=3D"o">*</=
span><span class=3D"n">iterables</span><span class=3D"p">):</span>
    <span class=3D"c1"># chain('ABC', 'DEF') --&gt; A B C D E F</span>
    <span class=3D"k">for</span> <span class=3D"n">it</span> <span class=3D=
"ow">in</span> <span class=3D"n">iterables</span><span class=3D"p">:</span>
        <span class=3D"k">for</span> <span class=3D"n">element</span> <span=
 class=3D"ow">in</span> <span class=3D"n">it</span><span class=3D"p">:</spa=
n>
            <span class=3D"k">yield</span> <span class=3D"n">element</span>
</pre></div>
</div>
</dd></dl>

<dl class=3D"method">
<dt id=3D"itertools.chain.from_iterable">
<em class=3D"property">classmethod </em><code class=3D"sig-prename descclas=
sname">chain.</code><code class=3D"sig-name descname">from_iterable</code><=
span class=3D"sig-paren">(</span><em class=3D"sig-param">iterable</em><span=
 class=3D"sig-paren">)</span><a class=3D"headerlink" href=3D"https://docs.p=
ython.org/3/library/itertools.html#itertools.chain.from_iterable" title=3D"=
Permalink to this definition">=C2=B6</a></dt>
<dd><p>Alternate constructor for <a class=3D"reference internal" href=3D"ht=
tps://docs.python.org/3/library/itertools.html#itertools.chain" title=3D"it=
ertools.chain"><code class=3D"xref py py-func docutils literal notranslate"=
><span class=3D"pre">chain()</span></code></a>.  Gets chained inputs from a
single iterable argument that is evaluated lazily.  Roughly equivalent to:<=
/p>
<div class=3D"highlight-python3 notranslate" style=3D"position: relative;">=
<div class=3D"highlight"><pre><span></span><span class=3D"k">def</span> <sp=
an class=3D"nf">from_iterable</span><span class=3D"p">(</span><span class=
=3D"n">iterables</span><span class=3D"p">):</span>
    <span class=3D"c1"># chain.from_iterable(['ABC', 'DEF']) --&gt; A B C D=
 E F</span>
    <span class=3D"k">for</span> <span class=3D"n">it</span> <span class=3D=
"ow">in</span> <span class=3D"n">iterables</span><span class=3D"p">:</span>
        <span class=3D"k">for</span> <span class=3D"n">element</span> <span=
 class=3D"ow">in</span> <span class=3D"n">it</span><span class=3D"p">:</spa=
n>
            <span class=3D"k">yield</span> <span class=3D"n">element</span>
</pre></div>
</div>
</dd></dl>

<dl class=3D"function">
<dt id=3D"itertools.combinations">
<code class=3D"sig-prename descclassname">itertools.</code><code class=3D"s=
ig-name descname">combinations</code><span class=3D"sig-paren">(</span><em =
class=3D"sig-param">iterable</em>, <em class=3D"sig-param">r</em><span clas=
s=3D"sig-paren">)</span><a class=3D"headerlink" href=3D"https://docs.python=
.org/3/library/itertools.html#itertools.combinations" title=3D"Permalink to=
 this definition">=C2=B6</a></dt>
<dd><p>Return <em>r</em> length subsequences of elements from the input <em=
>iterable</em>.</p>
<p>The combination tuples are emitted in lexicographic ordering according t=
o
the order of the input <em>iterable</em>. So, if the input <em>iterable</em=
> is sorted,
the combination tuples will be produced in sorted order.</p>
<p>Elements are treated as unique based on their position, not on their
value.  So if the input elements are unique, there will be no repeat
values in each combination.</p>
<p>Roughly equivalent to:</p>
<div class=3D"highlight-python3 notranslate" style=3D"position: relative;">=
<div class=3D"highlight"><pre><span></span><span class=3D"k">def</span> <sp=
an class=3D"nf">combinations</span><span class=3D"p">(</span><span class=3D=
"n">iterable</span><span class=3D"p">,</span> <span class=3D"n">r</span><sp=
an class=3D"p">):</span>
    <span class=3D"c1"># combinations('ABCD', 2) --&gt; AB AC AD BC BD CD</=
span>
    <span class=3D"c1"># combinations(range(4), 3) --&gt; 012 013 023 123</=
span>
    <span class=3D"n">pool</span> <span class=3D"o">=3D</span> <span class=
=3D"nb">tuple</span><span class=3D"p">(</span><span class=3D"n">iterable</s=
pan><span class=3D"p">)</span>
    <span class=3D"n">n</span> <span class=3D"o">=3D</span> <span class=3D"=
nb">len</span><span class=3D"p">(</span><span class=3D"n">pool</span><span =
class=3D"p">)</span>
    <span class=3D"k">if</span> <span class=3D"n">r</span> <span class=3D"o=
">&gt;</span> <span class=3D"n">n</span><span class=3D"p">:</span>
        <span class=3D"k">return</span>
    <span class=3D"n">indices</span> <span class=3D"o">=3D</span> <span cla=
ss=3D"nb">list</span><span class=3D"p">(</span><span class=3D"nb">range</sp=
an><span class=3D"p">(</span><span class=3D"n">r</span><span class=3D"p">))=
</span>
    <span class=3D"k">yield</span> <span class=3D"nb">tuple</span><span cla=
ss=3D"p">(</span><span class=3D"n">pool</span><span class=3D"p">[</span><sp=
an class=3D"n">i</span><span class=3D"p">]</span> <span class=3D"k">for</sp=
an> <span class=3D"n">i</span> <span class=3D"ow">in</span> <span class=3D"=
n">indices</span><span class=3D"p">)</span>
    <span class=3D"k">while</span> <span class=3D"kc">True</span><span clas=
s=3D"p">:</span>
        <span class=3D"k">for</span> <span class=3D"n">i</span> <span class=
=3D"ow">in</span> <span class=3D"nb">reversed</span><span class=3D"p">(</sp=
an><span class=3D"nb">range</span><span class=3D"p">(</span><span class=3D"=
n">r</span><span class=3D"p">)):</span>
            <span class=3D"k">if</span> <span class=3D"n">indices</span><sp=
an class=3D"p">[</span><span class=3D"n">i</span><span class=3D"p">]</span>=
 <span class=3D"o">!=3D</span> <span class=3D"n">i</span> <span class=3D"o"=
>+</span> <span class=3D"n">n</span> <span class=3D"o">-</span> <span class=
=3D"n">r</span><span class=3D"p">:</span>
                <span class=3D"k">break</span>
        <span class=3D"k">else</span><span class=3D"p">:</span>
            <span class=3D"k">return</span>
        <span class=3D"n">indices</span><span class=3D"p">[</span><span cla=
ss=3D"n">i</span><span class=3D"p">]</span> <span class=3D"o">+=3D</span> <=
span class=3D"mi">1</span>
        <span class=3D"k">for</span> <span class=3D"n">j</span> <span class=
=3D"ow">in</span> <span class=3D"nb">range</span><span class=3D"p">(</span>=
<span class=3D"n">i</span><span class=3D"o">+</span><span class=3D"mi">1</s=
pan><span class=3D"p">,</span> <span class=3D"n">r</span><span class=3D"p">=
):</span>
            <span class=3D"n">indices</span><span class=3D"p">[</span><span=
 class=3D"n">j</span><span class=3D"p">]</span> <span class=3D"o">=3D</span=
> <span class=3D"n">indices</span><span class=3D"p">[</span><span class=3D"=
n">j</span><span class=3D"o">-</span><span class=3D"mi">1</span><span class=
=3D"p">]</span> <span class=3D"o">+</span> <span class=3D"mi">1</span>
        <span class=3D"k">yield</span> <span class=3D"nb">tuple</span><span=
 class=3D"p">(</span><span class=3D"n">pool</span><span class=3D"p">[</span=
><span class=3D"n">i</span><span class=3D"p">]</span> <span class=3D"k">for=
</span> <span class=3D"n">i</span> <span class=3D"ow">in</span> <span class=
=3D"n">indices</span><span class=3D"p">)</span>
</pre></div>
</div>
<p>The code for <a class=3D"reference internal" href=3D"https://docs.python=
.org/3/library/itertools.html#itertools.combinations" title=3D"itertools.co=
mbinations"><code class=3D"xref py py-func docutils literal notranslate"><s=
pan class=3D"pre">combinations()</span></code></a> can be also expressed as=
 a subsequence
of <a class=3D"reference internal" href=3D"https://docs.python.org/3/librar=
y/itertools.html#itertools.permutations" title=3D"itertools.permutations"><=
code class=3D"xref py py-func docutils literal notranslate"><span class=3D"=
pre">permutations()</span></code></a> after filtering entries where the ele=
ments are not
in sorted order (according to their position in the input pool):</p>
<div class=3D"highlight-python3 notranslate" style=3D"position: relative;">=
<div class=3D"highlight"><pre><span></span><span class=3D"k">def</span> <sp=
an class=3D"nf">combinations</span><span class=3D"p">(</span><span class=3D=
"n">iterable</span><span class=3D"p">,</span> <span class=3D"n">r</span><sp=
an class=3D"p">):</span>
    <span class=3D"n">pool</span> <span class=3D"o">=3D</span> <span class=
=3D"nb">tuple</span><span class=3D"p">(</span><span class=3D"n">iterable</s=
pan><span class=3D"p">)</span>
    <span class=3D"n">n</span> <span class=3D"o">=3D</span> <span class=3D"=
nb">len</span><span class=3D"p">(</span><span class=3D"n">pool</span><span =
class=3D"p">)</span>
    <span class=3D"k">for</span> <span class=3D"n">indices</span> <span cla=
ss=3D"ow">in</span> <span class=3D"n">permutations</span><span class=3D"p">=
(</span><span class=3D"nb">range</span><span class=3D"p">(</span><span clas=
s=3D"n">n</span><span class=3D"p">),</span> <span class=3D"n">r</span><span=
 class=3D"p">):</span>
        <span class=3D"k">if</span> <span class=3D"nb">sorted</span><span c=
lass=3D"p">(</span><span class=3D"n">indices</span><span class=3D"p">)</spa=
n> <span class=3D"o">=3D=3D</span> <span class=3D"nb">list</span><span clas=
s=3D"p">(</span><span class=3D"n">indices</span><span class=3D"p">):</span>
            <span class=3D"k">yield</span> <span class=3D"nb">tuple</span><=
span class=3D"p">(</span><span class=3D"n">pool</span><span class=3D"p">[</=
span><span class=3D"n">i</span><span class=3D"p">]</span> <span class=3D"k"=
>for</span> <span class=3D"n">i</span> <span class=3D"ow">in</span> <span c=
lass=3D"n">indices</span><span class=3D"p">)</span>
</pre></div>
</div>
<p>The number of items returned is <code class=3D"docutils literal notransl=
ate"><span class=3D"pre">n!</span> <span class=3D"pre">/</span> <span class=
=3D"pre">r!</span> <span class=3D"pre">/</span> <span class=3D"pre">(n-r)!<=
/span></code> when <code class=3D"docutils literal notranslate"><span class=
=3D"pre">0</span> <span class=3D"pre">&lt;=3D</span> <span class=3D"pre">r<=
/span> <span class=3D"pre">&lt;=3D</span> <span class=3D"pre">n</span></cod=
e>
or zero when <code class=3D"docutils literal notranslate"><span class=3D"pr=
e">r</span> <span class=3D"pre">&gt;</span> <span class=3D"pre">n</span></c=
ode>.</p>
</dd></dl>

<dl class=3D"function">
<dt id=3D"itertools.combinations_with_replacement">
<code class=3D"sig-prename descclassname">itertools.</code><code class=3D"s=
ig-name descname">combinations_with_replacement</code><span class=3D"sig-pa=
ren">(</span><em class=3D"sig-param">iterable</em>, <em class=3D"sig-param"=
>r</em><span class=3D"sig-paren">)</span><a class=3D"headerlink" href=3D"ht=
tps://docs.python.org/3/library/itertools.html#itertools.combinations_with_=
replacement" title=3D"Permalink to this definition">=C2=B6</a></dt>
<dd><p>Return <em>r</em> length subsequences of elements from the input <em=
>iterable</em>
allowing individual elements to be repeated more than once.</p>
<p>The combination tuples are emitted in lexicographic ordering according t=
o
the order of the input <em>iterable</em>. So, if the input <em>iterable</em=
> is sorted,
the combination tuples will be produced in sorted order.</p>
<p>Elements are treated as unique based on their position, not on their
value.  So if the input elements are unique, the generated combinations
will also be unique.</p>
<p>Roughly equivalent to:</p>
<div class=3D"highlight-python3 notranslate" style=3D"position: relative;">=
<div class=3D"highlight"><pre><span></span><span class=3D"k">def</span> <sp=
an class=3D"nf">combinations_with_replacement</span><span class=3D"p">(</sp=
an><span class=3D"n">iterable</span><span class=3D"p">,</span> <span class=
=3D"n">r</span><span class=3D"p">):</span>
    <span class=3D"c1"># combinations_with_replacement('ABC', 2) --&gt; AA =
AB AC BB BC CC</span>
    <span class=3D"n">pool</span> <span class=3D"o">=3D</span> <span class=
=3D"nb">tuple</span><span class=3D"p">(</span><span class=3D"n">iterable</s=
pan><span class=3D"p">)</span>
    <span class=3D"n">n</span> <span class=3D"o">=3D</span> <span class=3D"=
nb">len</span><span class=3D"p">(</span><span class=3D"n">pool</span><span =
class=3D"p">)</span>
    <span class=3D"k">if</span> <span class=3D"ow">not</span> <span class=
=3D"n">n</span> <span class=3D"ow">and</span> <span class=3D"n">r</span><sp=
an class=3D"p">:</span>
        <span class=3D"k">return</span>
    <span class=3D"n">indices</span> <span class=3D"o">=3D</span> <span cla=
ss=3D"p">[</span><span class=3D"mi">0</span><span class=3D"p">]</span> <spa=
n class=3D"o">*</span> <span class=3D"n">r</span>
    <span class=3D"k">yield</span> <span class=3D"nb">tuple</span><span cla=
ss=3D"p">(</span><span class=3D"n">pool</span><span class=3D"p">[</span><sp=
an class=3D"n">i</span><span class=3D"p">]</span> <span class=3D"k">for</sp=
an> <span class=3D"n">i</span> <span class=3D"ow">in</span> <span class=3D"=
n">indices</span><span class=3D"p">)</span>
    <span class=3D"k">while</span> <span class=3D"kc">True</span><span clas=
s=3D"p">:</span>
        <span class=3D"k">for</span> <span class=3D"n">i</span> <span class=
=3D"ow">in</span> <span class=3D"nb">reversed</span><span class=3D"p">(</sp=
an><span class=3D"nb">range</span><span class=3D"p">(</span><span class=3D"=
n">r</span><span class=3D"p">)):</span>
            <span class=3D"k">if</span> <span class=3D"n">indices</span><sp=
an class=3D"p">[</span><span class=3D"n">i</span><span class=3D"p">]</span>=
 <span class=3D"o">!=3D</span> <span class=3D"n">n</span> <span class=3D"o"=
>-</span> <span class=3D"mi">1</span><span class=3D"p">:</span>
                <span class=3D"k">break</span>
        <span class=3D"k">else</span><span class=3D"p">:</span>
            <span class=3D"k">return</span>
        <span class=3D"n">indices</span><span class=3D"p">[</span><span cla=
ss=3D"n">i</span><span class=3D"p">:]</span> <span class=3D"o">=3D</span> <=
span class=3D"p">[</span><span class=3D"n">indices</span><span class=3D"p">=
[</span><span class=3D"n">i</span><span class=3D"p">]</span> <span class=3D=
"o">+</span> <span class=3D"mi">1</span><span class=3D"p">]</span> <span cl=
ass=3D"o">*</span> <span class=3D"p">(</span><span class=3D"n">r</span> <sp=
an class=3D"o">-</span> <span class=3D"n">i</span><span class=3D"p">)</span=
>
        <span class=3D"k">yield</span> <span class=3D"nb">tuple</span><span=
 class=3D"p">(</span><span class=3D"n">pool</span><span class=3D"p">[</span=
><span class=3D"n">i</span><span class=3D"p">]</span> <span class=3D"k">for=
</span> <span class=3D"n">i</span> <span class=3D"ow">in</span> <span class=
=3D"n">indices</span><span class=3D"p">)</span>
</pre></div>
</div>
<p>The code for <a class=3D"reference internal" href=3D"https://docs.python=
.org/3/library/itertools.html#itertools.combinations_with_replacement" titl=
e=3D"itertools.combinations_with_replacement"><code class=3D"xref py py-fun=
c docutils literal notranslate"><span class=3D"pre">combinations_with_repla=
cement()</span></code></a> can be also expressed as
a subsequence of <a class=3D"reference internal" href=3D"https://docs.pytho=
n.org/3/library/itertools.html#itertools.product" title=3D"itertools.produc=
t"><code class=3D"xref py py-func docutils literal notranslate"><span class=
=3D"pre">product()</span></code></a> after filtering entries where the elem=
ents
are not in sorted order (according to their position in the input pool):</p=
>
<div class=3D"highlight-python3 notranslate" style=3D"position: relative;">=
<div class=3D"highlight"><pre><span></span><span class=3D"k">def</span> <sp=
an class=3D"nf">combinations_with_replacement</span><span class=3D"p">(</sp=
an><span class=3D"n">iterable</span><span class=3D"p">,</span> <span class=
=3D"n">r</span><span class=3D"p">):</span>
    <span class=3D"n">pool</span> <span class=3D"o">=3D</span> <span class=
=3D"nb">tuple</span><span class=3D"p">(</span><span class=3D"n">iterable</s=
pan><span class=3D"p">)</span>
    <span class=3D"n">n</span> <span class=3D"o">=3D</span> <span class=3D"=
nb">len</span><span class=3D"p">(</span><span class=3D"n">pool</span><span =
class=3D"p">)</span>
    <span class=3D"k">for</span> <span class=3D"n">indices</span> <span cla=
ss=3D"ow">in</span> <span class=3D"n">product</span><span class=3D"p">(</sp=
an><span class=3D"nb">range</span><span class=3D"p">(</span><span class=3D"=
n">n</span><span class=3D"p">),</span> <span class=3D"n">repeat</span><span=
 class=3D"o">=3D</span><span class=3D"n">r</span><span class=3D"p">):</span=
>
        <span class=3D"k">if</span> <span class=3D"nb">sorted</span><span c=
lass=3D"p">(</span><span class=3D"n">indices</span><span class=3D"p">)</spa=
n> <span class=3D"o">=3D=3D</span> <span class=3D"nb">list</span><span clas=
s=3D"p">(</span><span class=3D"n">indices</span><span class=3D"p">):</span>
            <span class=3D"k">yield</span> <span class=3D"nb">tuple</span><=
span class=3D"p">(</span><span class=3D"n">pool</span><span class=3D"p">[</=
span><span class=3D"n">i</span><span class=3D"p">]</span> <span class=3D"k"=
>for</span> <span class=3D"n">i</span> <span class=3D"ow">in</span> <span c=
lass=3D"n">indices</span><span class=3D"p">)</span>
</pre></div>
</div>
<p>The number of items returned is <code class=3D"docutils literal notransl=
ate"><span class=3D"pre">(n+r-1)!</span> <span class=3D"pre">/</span> <span=
 class=3D"pre">r!</span> <span class=3D"pre">/</span> <span class=3D"pre">(=
n-1)!</span></code> when <code class=3D"docutils literal notranslate"><span=
 class=3D"pre">n</span> <span class=3D"pre">&gt;</span> <span class=3D"pre"=
>0</span></code>.</p>
<div class=3D"versionadded">
<p><span class=3D"versionmodified added">New in version 3.1.</span></p>
</div>
</dd></dl>

<dl class=3D"function">
<dt id=3D"itertools.compress">
<code class=3D"sig-prename descclassname">itertools.</code><code class=3D"s=
ig-name descname">compress</code><span class=3D"sig-paren">(</span><em clas=
s=3D"sig-param">data</em>, <em class=3D"sig-param">selectors</em><span clas=
s=3D"sig-paren">)</span><a class=3D"headerlink" href=3D"https://docs.python=
.org/3/library/itertools.html#itertools.compress" title=3D"Permalink to thi=
s definition">=C2=B6</a></dt>
<dd><p>Make an iterator that filters elements from <em>data</em> returning =
only those that
have a corresponding element in <em>selectors</em> that evaluates to <code =
class=3D"docutils literal notranslate"><span class=3D"pre">True</span></cod=
e>.
Stops when either the <em>data</em> or <em>selectors</em> iterables has bee=
n exhausted.
Roughly equivalent to:</p>
<div class=3D"highlight-python3 notranslate" style=3D"position: relative;">=
<div class=3D"highlight"><pre><span></span><span class=3D"k">def</span> <sp=
an class=3D"nf">compress</span><span class=3D"p">(</span><span class=3D"n">=
data</span><span class=3D"p">,</span> <span class=3D"n">selectors</span><sp=
an class=3D"p">):</span>
    <span class=3D"c1"># compress('ABCDEF', [1,0,1,0,1,1]) --&gt; A C E F</=
span>
    <span class=3D"k">return</span> <span class=3D"p">(</span><span class=
=3D"n">d</span> <span class=3D"k">for</span> <span class=3D"n">d</span><spa=
n class=3D"p">,</span> <span class=3D"n">s</span> <span class=3D"ow">in</sp=
an> <span class=3D"nb">zip</span><span class=3D"p">(</span><span class=3D"n=
">data</span><span class=3D"p">,</span> <span class=3D"n">selectors</span><=
span class=3D"p">)</span> <span class=3D"k">if</span> <span class=3D"n">s</=
span><span class=3D"p">)</span>
</pre></div>
</div>
<div class=3D"versionadded">
<p><span class=3D"versionmodified added">New in version 3.1.</span></p>
</div>
</dd></dl>

<dl class=3D"function">
<dt id=3D"itertools.count">
<code class=3D"sig-prename descclassname">itertools.</code><code class=3D"s=
ig-name descname">count</code><span class=3D"sig-paren">(</span><em class=
=3D"sig-param">start=3D0</em>, <em class=3D"sig-param">step=3D1</em><span c=
lass=3D"sig-paren">)</span><a class=3D"headerlink" href=3D"https://docs.pyt=
hon.org/3/library/itertools.html#itertools.count" title=3D"Permalink to thi=
s definition">=C2=B6</a></dt>
<dd><p>Make an iterator that returns evenly spaced values starting with num=
ber <em>start</em>. Often
used as an argument to <a class=3D"reference internal" href=3D"https://docs=
.python.org/3/library/functions.html#map" title=3D"map"><code class=3D"xref=
 py py-func docutils literal notranslate"><span class=3D"pre">map()</span><=
/code></a> to generate consecutive data points.
Also, used with <a class=3D"reference internal" href=3D"https://docs.python=
.org/3/library/functions.html#zip" title=3D"zip"><code class=3D"xref py py-=
func docutils literal notranslate"><span class=3D"pre">zip()</span></code><=
/a> to add sequence numbers.  Roughly equivalent to:</p>
<div class=3D"highlight-python3 notranslate" style=3D"position: relative;">=
<div class=3D"highlight"><pre><span></span><span class=3D"k">def</span> <sp=
an class=3D"nf">count</span><span class=3D"p">(</span><span class=3D"n">sta=
rt</span><span class=3D"o">=3D</span><span class=3D"mi">0</span><span class=
=3D"p">,</span> <span class=3D"n">step</span><span class=3D"o">=3D</span><s=
pan class=3D"mi">1</span><span class=3D"p">):</span>
    <span class=3D"c1"># count(10) --&gt; 10 11 12 13 14 ...</span>
    <span class=3D"c1"># count(2.5, 0.5) -&gt; 2.5 3.0 3.5 ...</span>
    <span class=3D"n">n</span> <span class=3D"o">=3D</span> <span class=3D"=
n">start</span>
    <span class=3D"k">while</span> <span class=3D"kc">True</span><span clas=
s=3D"p">:</span>
        <span class=3D"k">yield</span> <span class=3D"n">n</span>
        <span class=3D"n">n</span> <span class=3D"o">+=3D</span> <span clas=
s=3D"n">step</span>
</pre></div>
</div>
<p>When counting with floating point numbers, better accuracy can sometimes=
 be
achieved by substituting multiplicative code such as: <code class=3D"docuti=
ls literal notranslate"><span class=3D"pre">(start</span> <span class=3D"pr=
e">+</span> <span class=3D"pre">step</span> <span class=3D"pre">*</span> <s=
pan class=3D"pre">i</span>
<span class=3D"pre">for</span> <span class=3D"pre">i</span> <span class=3D"=
pre">in</span> <span class=3D"pre">count())</span></code>.</p>
<div class=3D"versionchanged">
<p><span class=3D"versionmodified changed">Changed in version 3.1: </span>A=
dded <em>step</em> argument and allowed non-integer arguments.</p>
</div>
</dd></dl>

<dl class=3D"function">
<dt id=3D"itertools.cycle">
<code class=3D"sig-prename descclassname">itertools.</code><code class=3D"s=
ig-name descname">cycle</code><span class=3D"sig-paren">(</span><em class=
=3D"sig-param">iterable</em><span class=3D"sig-paren">)</span><a class=3D"h=
eaderlink" href=3D"https://docs.python.org/3/library/itertools.html#itertoo=
ls.cycle" title=3D"Permalink to this definition">=C2=B6</a></dt>
<dd><p>Make an iterator returning elements from the iterable and saving a c=
opy of each.
When the iterable is exhausted, return elements from the saved copy.  Repea=
ts
indefinitely.  Roughly equivalent to:</p>
<div class=3D"highlight-python3 notranslate" style=3D"position: relative;">=
<div class=3D"highlight"><pre><span></span><span class=3D"k">def</span> <sp=
an class=3D"nf">cycle</span><span class=3D"p">(</span><span class=3D"n">ite=
rable</span><span class=3D"p">):</span>
    <span class=3D"c1"># cycle('ABCD') --&gt; A B C D A B C D A B C D ...</=
span>
    <span class=3D"n">saved</span> <span class=3D"o">=3D</span> <span class=
=3D"p">[]</span>
    <span class=3D"k">for</span> <span class=3D"n">element</span> <span cla=
ss=3D"ow">in</span> <span class=3D"n">iterable</span><span class=3D"p">:</s=
pan>
        <span class=3D"k">yield</span> <span class=3D"n">element</span>
        <span class=3D"n">saved</span><span class=3D"o">.</span><span class=
=3D"n">append</span><span class=3D"p">(</span><span class=3D"n">element</sp=
an><span class=3D"p">)</span>
    <span class=3D"k">while</span> <span class=3D"n">saved</span><span clas=
s=3D"p">:</span>
        <span class=3D"k">for</span> <span class=3D"n">element</span> <span=
 class=3D"ow">in</span> <span class=3D"n">saved</span><span class=3D"p">:</=
span>
              <span class=3D"k">yield</span> <span class=3D"n">element</spa=
n>
</pre></div>
</div>
<p>Note, this member of the toolkit may require significant auxiliary stora=
ge
(depending on the length of the iterable).</p>
</dd></dl>

<dl class=3D"function">
<dt id=3D"itertools.dropwhile">
<code class=3D"sig-prename descclassname">itertools.</code><code class=3D"s=
ig-name descname">dropwhile</code><span class=3D"sig-paren">(</span><em cla=
ss=3D"sig-param">predicate</em>, <em class=3D"sig-param">iterable</em><span=
 class=3D"sig-paren">)</span><a class=3D"headerlink" href=3D"https://docs.p=
ython.org/3/library/itertools.html#itertools.dropwhile" title=3D"Permalink =
to this definition">=C2=B6</a></dt>
<dd><p>Make an iterator that drops elements from the iterable as long as th=
e predicate
is true; afterwards, returns every element.  Note, the iterator does not pr=
oduce
<em>any</em> output until the predicate first becomes false, so it may have=
 a lengthy
start-up time.  Roughly equivalent to:</p>
<div class=3D"highlight-python3 notranslate" style=3D"position: relative;">=
<div class=3D"highlight"><pre><span></span><span class=3D"k">def</span> <sp=
an class=3D"nf">dropwhile</span><span class=3D"p">(</span><span class=3D"n"=
>predicate</span><span class=3D"p">,</span> <span class=3D"n">iterable</spa=
n><span class=3D"p">):</span>
    <span class=3D"c1"># dropwhile(lambda x: x&lt;5, [1,4,6,4,1]) --&gt; 6 =
4 1</span>
    <span class=3D"n">iterable</span> <span class=3D"o">=3D</span> <span cl=
ass=3D"nb">iter</span><span class=3D"p">(</span><span class=3D"n">iterable<=
/span><span class=3D"p">)</span>
    <span class=3D"k">for</span> <span class=3D"n">x</span> <span class=3D"=
ow">in</span> <span class=3D"n">iterable</span><span class=3D"p">:</span>
        <span class=3D"k">if</span> <span class=3D"ow">not</span> <span cla=
ss=3D"n">predicate</span><span class=3D"p">(</span><span class=3D"n">x</spa=
n><span class=3D"p">):</span>
            <span class=3D"k">yield</span> <span class=3D"n">x</span>
            <span class=3D"k">break</span>
    <span class=3D"k">for</span> <span class=3D"n">x</span> <span class=3D"=
ow">in</span> <span class=3D"n">iterable</span><span class=3D"p">:</span>
        <span class=3D"k">yield</span> <span class=3D"n">x</span>
</pre></div>
</div>
</dd></dl>

<dl class=3D"function">
<dt id=3D"itertools.filterfalse">
<code class=3D"sig-prename descclassname">itertools.</code><code class=3D"s=
ig-name descname">filterfalse</code><span class=3D"sig-paren">(</span><em c=
lass=3D"sig-param">predicate</em>, <em class=3D"sig-param">iterable</em><sp=
an class=3D"sig-paren">)</span><a class=3D"headerlink" href=3D"https://docs=
.python.org/3/library/itertools.html#itertools.filterfalse" title=3D"Permal=
ink to this definition">=C2=B6</a></dt>
<dd><p>Make an iterator that filters elements from iterable returning only =
those for
which the predicate is <code class=3D"docutils literal notranslate"><span c=
lass=3D"pre">False</span></code>. If <em>predicate</em> is <code class=3D"d=
ocutils literal notranslate"><span class=3D"pre">None</span></code>, return=
 the items
that are false. Roughly equivalent to:</p>
<div class=3D"highlight-python3 notranslate" style=3D"position: relative;">=
<div class=3D"highlight"><pre><span></span><span class=3D"k">def</span> <sp=
an class=3D"nf">filterfalse</span><span class=3D"p">(</span><span class=3D"=
n">predicate</span><span class=3D"p">,</span> <span class=3D"n">iterable</s=
pan><span class=3D"p">):</span>
    <span class=3D"c1"># filterfalse(lambda x: x%2, range(10)) --&gt; 0 2 4=
 6 8</span>
    <span class=3D"k">if</span> <span class=3D"n">predicate</span> <span cl=
ass=3D"ow">is</span> <span class=3D"kc">None</span><span class=3D"p">:</spa=
n>
        <span class=3D"n">predicate</span> <span class=3D"o">=3D</span> <sp=
an class=3D"nb">bool</span>
    <span class=3D"k">for</span> <span class=3D"n">x</span> <span class=3D"=
ow">in</span> <span class=3D"n">iterable</span><span class=3D"p">:</span>
        <span class=3D"k">if</span> <span class=3D"ow">not</span> <span cla=
ss=3D"n">predicate</span><span class=3D"p">(</span><span class=3D"n">x</spa=
n><span class=3D"p">):</span>
            <span class=3D"k">yield</span> <span class=3D"n">x</span>
</pre></div>
</div>
</dd></dl>

<dl class=3D"function">
<dt id=3D"itertools.groupby">
<code class=3D"sig-prename descclassname">itertools.</code><code class=3D"s=
ig-name descname">groupby</code><span class=3D"sig-paren">(</span><em class=
=3D"sig-param">iterable</em>, <em class=3D"sig-param">key=3DNone</em><span =
class=3D"sig-paren">)</span><a class=3D"headerlink" href=3D"https://docs.py=
thon.org/3/library/itertools.html#itertools.groupby" title=3D"Permalink to =
this definition">=C2=B6</a></dt>
<dd><p>Make an iterator that returns consecutive keys and groups from the <=
em>iterable</em>.
The <em>key</em> is a function computing a key value for each element.  If =
not
specified or is <code class=3D"docutils literal notranslate"><span class=3D=
"pre">None</span></code>, <em>key</em> defaults to an identity function and=
 returns
the element unchanged.  Generally, the iterable needs to already be sorted =
on
the same key function.</p>
<p>The operation of <a class=3D"reference internal" href=3D"https://docs.py=
thon.org/3/library/itertools.html#itertools.groupby" title=3D"itertools.gro=
upby"><code class=3D"xref py py-func docutils literal notranslate"><span cl=
ass=3D"pre">groupby()</span></code></a> is similar to the <code class=3D"do=
cutils literal notranslate"><span class=3D"pre">uniq</span></code> filter i=
n Unix.  It
generates a break or new group every time the value of the key function cha=
nges
(which is why it is usually necessary to have sorted the data using the sam=
e key
function).  That behavior differs from SQL=E2=80=99s GROUP BY which aggrega=
tes common
elements regardless of their input order.</p>
<p>The returned group is itself an iterator that shares the underlying iter=
able
with <a class=3D"reference internal" href=3D"https://docs.python.org/3/libr=
ary/itertools.html#itertools.groupby" title=3D"itertools.groupby"><code cla=
ss=3D"xref py py-func docutils literal notranslate"><span class=3D"pre">gro=
upby()</span></code></a>.  Because the source is shared, when the <a class=
=3D"reference internal" href=3D"https://docs.python.org/3/library/itertools=
.html#itertools.groupby" title=3D"itertools.groupby"><code class=3D"xref py=
 py-func docutils literal notranslate"><span class=3D"pre">groupby()</span>=
</code></a>
object is advanced, the previous group is no longer visible.  So, if that d=
ata
is needed later, it should be stored as a list:</p>
<div class=3D"highlight-python3 notranslate" style=3D"position: relative;">=
<div class=3D"highlight"><pre><span></span><span class=3D"n">groups</span> =
<span class=3D"o">=3D</span> <span class=3D"p">[]</span>
<span class=3D"n">uniquekeys</span> <span class=3D"o">=3D</span> <span clas=
s=3D"p">[]</span>
<span class=3D"n">data</span> <span class=3D"o">=3D</span> <span class=3D"n=
b">sorted</span><span class=3D"p">(</span><span class=3D"n">data</span><spa=
n class=3D"p">,</span> <span class=3D"n">key</span><span class=3D"o">=3D</s=
pan><span class=3D"n">keyfunc</span><span class=3D"p">)</span>
<span class=3D"k">for</span> <span class=3D"n">k</span><span class=3D"p">,<=
/span> <span class=3D"n">g</span> <span class=3D"ow">in</span> <span class=
=3D"n">groupby</span><span class=3D"p">(</span><span class=3D"n">data</span=
><span class=3D"p">,</span> <span class=3D"n">keyfunc</span><span class=3D"=
p">):</span>
    <span class=3D"n">groups</span><span class=3D"o">.</span><span class=3D=
"n">append</span><span class=3D"p">(</span><span class=3D"nb">list</span><s=
pan class=3D"p">(</span><span class=3D"n">g</span><span class=3D"p">))</spa=
n>      <span class=3D"c1"># Store group iterator as a list</span>
    <span class=3D"n">uniquekeys</span><span class=3D"o">.</span><span clas=
s=3D"n">append</span><span class=3D"p">(</span><span class=3D"n">k</span><s=
pan class=3D"p">)</span>
</pre></div>
</div>
<p><a class=3D"reference internal" href=3D"https://docs.python.org/3/librar=
y/itertools.html#itertools.groupby" title=3D"itertools.groupby"><code class=
=3D"xref py py-func docutils literal notranslate"><span class=3D"pre">group=
by()</span></code></a> is roughly equivalent to:</p>
<div class=3D"highlight-python3 notranslate" style=3D"position: relative;">=
<div class=3D"highlight"><pre><span></span><span class=3D"k">class</span> <=
span class=3D"nc">groupby</span><span class=3D"p">:</span>
    <span class=3D"c1"># [k for k, g in groupby('AAAABBBCCDAABBB')] --&gt; =
A B C D A B</span>
    <span class=3D"c1"># [list(g) for k, g in groupby('AAAABBBCCD')] --&gt;=
 AAAA BBB CC D</span>
    <span class=3D"k">def</span> <span class=3D"fm">__init__</span><span cl=
ass=3D"p">(</span><span class=3D"bp">self</span><span class=3D"p">,</span> =
<span class=3D"n">iterable</span><span class=3D"p">,</span> <span class=3D"=
n">key</span><span class=3D"o">=3D</span><span class=3D"kc">None</span><spa=
n class=3D"p">):</span>
        <span class=3D"k">if</span> <span class=3D"n">key</span> <span clas=
s=3D"ow">is</span> <span class=3D"kc">None</span><span class=3D"p">:</span>
            <span class=3D"n">key</span> <span class=3D"o">=3D</span> <span=
 class=3D"k">lambda</span> <span class=3D"n">x</span><span class=3D"p">:</s=
pan> <span class=3D"n">x</span>
        <span class=3D"bp">self</span><span class=3D"o">.</span><span class=
=3D"n">keyfunc</span> <span class=3D"o">=3D</span> <span class=3D"n">key</s=
pan>
        <span class=3D"bp">self</span><span class=3D"o">.</span><span class=
=3D"n">it</span> <span class=3D"o">=3D</span> <span class=3D"nb">iter</span=
><span class=3D"p">(</span><span class=3D"n">iterable</span><span class=3D"=
p">)</span>
        <span class=3D"bp">self</span><span class=3D"o">.</span><span class=
=3D"n">tgtkey</span> <span class=3D"o">=3D</span> <span class=3D"bp">self</=
span><span class=3D"o">.</span><span class=3D"n">currkey</span> <span class=
=3D"o">=3D</span> <span class=3D"bp">self</span><span class=3D"o">.</span><=
span class=3D"n">currvalue</span> <span class=3D"o">=3D</span> <span class=
=3D"nb">object</span><span class=3D"p">()</span>
    <span class=3D"k">def</span> <span class=3D"fm">__iter__</span><span cl=
ass=3D"p">(</span><span class=3D"bp">self</span><span class=3D"p">):</span>
        <span class=3D"k">return</span> <span class=3D"bp">self</span>
    <span class=3D"k">def</span> <span class=3D"fm">__next__</span><span cl=
ass=3D"p">(</span><span class=3D"bp">self</span><span class=3D"p">):</span>
        <span class=3D"bp">self</span><span class=3D"o">.</span><span class=
=3D"n">id</span> <span class=3D"o">=3D</span> <span class=3D"nb">object</sp=
an><span class=3D"p">()</span>
        <span class=3D"k">while</span> <span class=3D"bp">self</span><span =
class=3D"o">.</span><span class=3D"n">currkey</span> <span class=3D"o">=3D=
=3D</span> <span class=3D"bp">self</span><span class=3D"o">.</span><span cl=
ass=3D"n">tgtkey</span><span class=3D"p">:</span>
            <span class=3D"bp">self</span><span class=3D"o">.</span><span c=
lass=3D"n">currvalue</span> <span class=3D"o">=3D</span> <span class=3D"nb"=
>next</span><span class=3D"p">(</span><span class=3D"bp">self</span><span c=
lass=3D"o">.</span><span class=3D"n">it</span><span class=3D"p">)</span>   =
 <span class=3D"c1"># Exit on StopIteration</span>
            <span class=3D"bp">self</span><span class=3D"o">.</span><span c=
lass=3D"n">currkey</span> <span class=3D"o">=3D</span> <span class=3D"bp">s=
elf</span><span class=3D"o">.</span><span class=3D"n">keyfunc</span><span c=
lass=3D"p">(</span><span class=3D"bp">self</span><span class=3D"o">.</span>=
<span class=3D"n">currvalue</span><span class=3D"p">)</span>
        <span class=3D"bp">self</span><span class=3D"o">.</span><span class=
=3D"n">tgtkey</span> <span class=3D"o">=3D</span> <span class=3D"bp">self</=
span><span class=3D"o">.</span><span class=3D"n">currkey</span>
        <span class=3D"k">return</span> <span class=3D"p">(</span><span cla=
ss=3D"bp">self</span><span class=3D"o">.</span><span class=3D"n">currkey</s=
pan><span class=3D"p">,</span> <span class=3D"bp">self</span><span class=3D=
"o">.</span><span class=3D"n">_grouper</span><span class=3D"p">(</span><spa=
n class=3D"bp">self</span><span class=3D"o">.</span><span class=3D"n">tgtke=
y</span><span class=3D"p">,</span> <span class=3D"bp">self</span><span clas=
s=3D"o">.</span><span class=3D"n">id</span><span class=3D"p">))</span>
    <span class=3D"k">def</span> <span class=3D"nf">_grouper</span><span cl=
ass=3D"p">(</span><span class=3D"bp">self</span><span class=3D"p">,</span> =
<span class=3D"n">tgtkey</span><span class=3D"p">,</span> <span class=3D"nb=
">id</span><span class=3D"p">):</span>
        <span class=3D"k">while</span> <span class=3D"bp">self</span><span =
class=3D"o">.</span><span class=3D"n">id</span> <span class=3D"ow">is</span=
> <span class=3D"nb">id</span> <span class=3D"ow">and</span> <span class=3D=
"bp">self</span><span class=3D"o">.</span><span class=3D"n">currkey</span> =
<span class=3D"o">=3D=3D</span> <span class=3D"n">tgtkey</span><span class=
=3D"p">:</span>
            <span class=3D"k">yield</span> <span class=3D"bp">self</span><s=
pan class=3D"o">.</span><span class=3D"n">currvalue</span>
            <span class=3D"k">try</span><span class=3D"p">:</span>
                <span class=3D"bp">self</span><span class=3D"o">.</span><sp=
an class=3D"n">currvalue</span> <span class=3D"o">=3D</span> <span class=3D=
"nb">next</span><span class=3D"p">(</span><span class=3D"bp">self</span><sp=
an class=3D"o">.</span><span class=3D"n">it</span><span class=3D"p">)</span=
>
            <span class=3D"k">except</span> <span class=3D"ne">StopIteratio=
n</span><span class=3D"p">:</span>
                <span class=3D"k">return</span>
            <span class=3D"bp">self</span><span class=3D"o">.</span><span c=
lass=3D"n">currkey</span> <span class=3D"o">=3D</span> <span class=3D"bp">s=
elf</span><span class=3D"o">.</span><span class=3D"n">keyfunc</span><span c=
lass=3D"p">(</span><span class=3D"bp">self</span><span class=3D"o">.</span>=
<span class=3D"n">currvalue</span><span class=3D"p">)</span>
</pre></div>
</div>
</dd></dl>

<dl class=3D"function">
<dt id=3D"itertools.islice">
<code class=3D"sig-prename descclassname">itertools.</code><code class=3D"s=
ig-name descname">islice</code><span class=3D"sig-paren">(</span><em class=
=3D"sig-param">iterable</em>, <em class=3D"sig-param">stop</em><span class=
=3D"sig-paren">)</span><a class=3D"headerlink" href=3D"https://docs.python.=
org/3/library/itertools.html#itertools.islice" title=3D"Permalink to this d=
efinition">=C2=B6</a></dt>
<dt>
<code class=3D"sig-prename descclassname">itertools.</code><code class=3D"s=
ig-name descname">islice</code><span class=3D"sig-paren">(</span><em class=
=3D"sig-param">iterable</em>, <em class=3D"sig-param">start</em>, <em class=
=3D"sig-param">stop</em><span class=3D"optional">[</span>, <em class=3D"sig=
-param">step</em><span class=3D"optional">]</span><span class=3D"sig-paren"=
>)</span></dt>
<dd><p>Make an iterator that returns selected elements from the iterable. I=
f <em>start</em> is
non-zero, then elements from the iterable are skipped until start is reache=
d.
Afterward, elements are returned consecutively unless <em>step</em> is set =
higher than
one which results in items being skipped.  If <em>stop</em> is <code class=
=3D"docutils literal notranslate"><span class=3D"pre">None</span></code>, t=
hen iteration
continues until the iterator is exhausted, if at all; otherwise, it stops a=
t the
specified position.  Unlike regular slicing, <a class=3D"reference internal=
" href=3D"https://docs.python.org/3/library/itertools.html#itertools.islice=
" title=3D"itertools.islice"><code class=3D"xref py py-func docutils litera=
l notranslate"><span class=3D"pre">islice()</span></code></a> does not supp=
ort
negative values for <em>start</em>, <em>stop</em>, or <em>step</em>.  Can b=
e used to extract related
fields from data where the internal structure has been flattened (for examp=
le, a
multi-line report may list a name field on every third line).  Roughly equi=
valent to:</p>
<div class=3D"highlight-python3 notranslate" style=3D"position: relative;">=
<div class=3D"highlight"><pre><span></span><span class=3D"k">def</span> <sp=
an class=3D"nf">islice</span><span class=3D"p">(</span><span class=3D"n">it=
erable</span><span class=3D"p">,</span> <span class=3D"o">*</span><span cla=
ss=3D"n">args</span><span class=3D"p">):</span>
    <span class=3D"c1"># islice('ABCDEFG', 2) --&gt; A B</span>
    <span class=3D"c1"># islice('ABCDEFG', 2, 4) --&gt; C D</span>
    <span class=3D"c1"># islice('ABCDEFG', 2, None) --&gt; C D E F G</span>
    <span class=3D"c1"># islice('ABCDEFG', 0, None, 2) --&gt; A C E G</span=
>
    <span class=3D"n">s</span> <span class=3D"o">=3D</span> <span class=3D"=
nb">slice</span><span class=3D"p">(</span><span class=3D"o">*</span><span c=
lass=3D"n">args</span><span class=3D"p">)</span>
    <span class=3D"n">start</span><span class=3D"p">,</span> <span class=3D=
"n">stop</span><span class=3D"p">,</span> <span class=3D"n">step</span> <sp=
an class=3D"o">=3D</span> <span class=3D"n">s</span><span class=3D"o">.</sp=
an><span class=3D"n">start</span> <span class=3D"ow">or</span> <span class=
=3D"mi">0</span><span class=3D"p">,</span> <span class=3D"n">s</span><span =
class=3D"o">.</span><span class=3D"n">stop</span> <span class=3D"ow">or</sp=
an> <span class=3D"n">sys</span><span class=3D"o">.</span><span class=3D"n"=
>maxsize</span><span class=3D"p">,</span> <span class=3D"n">s</span><span c=
lass=3D"o">.</span><span class=3D"n">step</span> <span class=3D"ow">or</spa=
n> <span class=3D"mi">1</span>
    <span class=3D"n">it</span> <span class=3D"o">=3D</span> <span class=3D=
"nb">iter</span><span class=3D"p">(</span><span class=3D"nb">range</span><s=
pan class=3D"p">(</span><span class=3D"n">start</span><span class=3D"p">,</=
span> <span class=3D"n">stop</span><span class=3D"p">,</span> <span class=
=3D"n">step</span><span class=3D"p">))</span>
    <span class=3D"k">try</span><span class=3D"p">:</span>
        <span class=3D"n">nexti</span> <span class=3D"o">=3D</span> <span c=
lass=3D"nb">next</span><span class=3D"p">(</span><span class=3D"n">it</span=
><span class=3D"p">)</span>
    <span class=3D"k">except</span> <span class=3D"ne">StopIteration</span>=
<span class=3D"p">:</span>
        <span class=3D"c1"># Consume *iterable* up to the *start* position.=
</span>
        <span class=3D"k">for</span> <span class=3D"n">i</span><span class=
=3D"p">,</span> <span class=3D"n">element</span> <span class=3D"ow">in</spa=
n> <span class=3D"nb">zip</span><span class=3D"p">(</span><span class=3D"nb=
">range</span><span class=3D"p">(</span><span class=3D"n">start</span><span=
 class=3D"p">),</span> <span class=3D"n">iterable</span><span class=3D"p">)=
:</span>
            <span class=3D"k">pass</span>
        <span class=3D"k">return</span>
    <span class=3D"k">try</span><span class=3D"p">:</span>
        <span class=3D"k">for</span> <span class=3D"n">i</span><span class=
=3D"p">,</span> <span class=3D"n">element</span> <span class=3D"ow">in</spa=
n> <span class=3D"nb">enumerate</span><span class=3D"p">(</span><span class=
=3D"n">iterable</span><span class=3D"p">):</span>
            <span class=3D"k">if</span> <span class=3D"n">i</span> <span cl=
ass=3D"o">=3D=3D</span> <span class=3D"n">nexti</span><span class=3D"p">:</=
span>
                <span class=3D"k">yield</span> <span class=3D"n">element</s=
pan>
                <span class=3D"n">nexti</span> <span class=3D"o">=3D</span>=
 <span class=3D"nb">next</span><span class=3D"p">(</span><span class=3D"n">=
it</span><span class=3D"p">)</span>
    <span class=3D"k">except</span> <span class=3D"ne">StopIteration</span>=
<span class=3D"p">:</span>
        <span class=3D"c1"># Consume to *stop*.</span>
        <span class=3D"k">for</span> <span class=3D"n">i</span><span class=
=3D"p">,</span> <span class=3D"n">element</span> <span class=3D"ow">in</spa=
n> <span class=3D"nb">zip</span><span class=3D"p">(</span><span class=3D"nb=
">range</span><span class=3D"p">(</span><span class=3D"n">i</span> <span cl=
ass=3D"o">+</span> <span class=3D"mi">1</span><span class=3D"p">,</span> <s=
pan class=3D"n">stop</span><span class=3D"p">),</span> <span class=3D"n">it=
erable</span><span class=3D"p">):</span>
            <span class=3D"k">pass</span>
</pre></div>
</div>
<p>If <em>start</em> is <code class=3D"docutils literal notranslate"><span =
class=3D"pre">None</span></code>, then iteration starts at zero. If <em>ste=
p</em> is <code class=3D"docutils literal notranslate"><span class=3D"pre">=
None</span></code>,
then the step defaults to one.</p>
</dd></dl>

<dl class=3D"function">
<dt id=3D"itertools.permutations">
<code class=3D"sig-prename descclassname">itertools.</code><code class=3D"s=
ig-name descname">permutations</code><span class=3D"sig-paren">(</span><em =
class=3D"sig-param">iterable</em>, <em class=3D"sig-param">r=3DNone</em><sp=
an class=3D"sig-paren">)</span><a class=3D"headerlink" href=3D"https://docs=
.python.org/3/library/itertools.html#itertools.permutations" title=3D"Perma=
link to this definition">=C2=B6</a></dt>
<dd><p>Return successive <em>r</em> length permutations of elements in the =
<em>iterable</em>.</p>
<p>If <em>r</em> is not specified or is <code class=3D"docutils literal not=
ranslate"><span class=3D"pre">None</span></code>, then <em>r</em> defaults =
to the length
of the <em>iterable</em> and all possible full-length permutations
are generated.</p>
<p>The permutation tuples are emitted in lexicographic ordering according t=
o
the order of the input <em>iterable</em>. So, if the input <em>iterable</em=
> is sorted,
the combination tuples will be produced in sorted order.</p>
<p>Elements are treated as unique based on their position, not on their
value.  So if the input elements are unique, there will be no repeat
values in each permutation.</p>
<p>Roughly equivalent to:</p>
<div class=3D"highlight-python3 notranslate" style=3D"position: relative;">=
<div class=3D"highlight"><pre><span></span><span class=3D"k">def</span> <sp=
an class=3D"nf">permutations</span><span class=3D"p">(</span><span class=3D=
"n">iterable</span><span class=3D"p">,</span> <span class=3D"n">r</span><sp=
an class=3D"o">=3D</span><span class=3D"kc">None</span><span class=3D"p">):=
</span>
    <span class=3D"c1"># permutations('ABCD', 2) --&gt; AB AC AD BA BC BD C=
A CB CD DA DB DC</span>
    <span class=3D"c1"># permutations(range(3)) --&gt; 012 021 102 120 201 =
210</span>
    <span class=3D"n">pool</span> <span class=3D"o">=3D</span> <span class=
=3D"nb">tuple</span><span class=3D"p">(</span><span class=3D"n">iterable</s=
pan><span class=3D"p">)</span>
    <span class=3D"n">n</span> <span class=3D"o">=3D</span> <span class=3D"=
nb">len</span><span class=3D"p">(</span><span class=3D"n">pool</span><span =
class=3D"p">)</span>
    <span class=3D"n">r</span> <span class=3D"o">=3D</span> <span class=3D"=
n">n</span> <span class=3D"k">if</span> <span class=3D"n">r</span> <span cl=
ass=3D"ow">is</span> <span class=3D"kc">None</span> <span class=3D"k">else<=
/span> <span class=3D"n">r</span>
    <span class=3D"k">if</span> <span class=3D"n">r</span> <span class=3D"o=
">&gt;</span> <span class=3D"n">n</span><span class=3D"p">:</span>
        <span class=3D"k">return</span>
    <span class=3D"n">indices</span> <span class=3D"o">=3D</span> <span cla=
ss=3D"nb">list</span><span class=3D"p">(</span><span class=3D"nb">range</sp=
an><span class=3D"p">(</span><span class=3D"n">n</span><span class=3D"p">))=
</span>
    <span class=3D"n">cycles</span> <span class=3D"o">=3D</span> <span clas=
s=3D"nb">list</span><span class=3D"p">(</span><span class=3D"nb">range</spa=
n><span class=3D"p">(</span><span class=3D"n">n</span><span class=3D"p">,</=
span> <span class=3D"n">n</span><span class=3D"o">-</span><span class=3D"n"=
>r</span><span class=3D"p">,</span> <span class=3D"o">-</span><span class=
=3D"mi">1</span><span class=3D"p">))</span>
    <span class=3D"k">yield</span> <span class=3D"nb">tuple</span><span cla=
ss=3D"p">(</span><span class=3D"n">pool</span><span class=3D"p">[</span><sp=
an class=3D"n">i</span><span class=3D"p">]</span> <span class=3D"k">for</sp=
an> <span class=3D"n">i</span> <span class=3D"ow">in</span> <span class=3D"=
n">indices</span><span class=3D"p">[:</span><span class=3D"n">r</span><span=
 class=3D"p">])</span>
    <span class=3D"k">while</span> <span class=3D"n">n</span><span class=3D=
"p">:</span>
        <span class=3D"k">for</span> <span class=3D"n">i</span> <span class=
=3D"ow">in</span> <span class=3D"nb">reversed</span><span class=3D"p">(</sp=
an><span class=3D"nb">range</span><span class=3D"p">(</span><span class=3D"=
n">r</span><span class=3D"p">)):</span>
            <span class=3D"n">cycles</span><span class=3D"p">[</span><span =
class=3D"n">i</span><span class=3D"p">]</span> <span class=3D"o">-=3D</span=
> <span class=3D"mi">1</span>
            <span class=3D"k">if</span> <span class=3D"n">cycles</span><spa=
n class=3D"p">[</span><span class=3D"n">i</span><span class=3D"p">]</span> =
<span class=3D"o">=3D=3D</span> <span class=3D"mi">0</span><span class=3D"p=
">:</span>
                <span class=3D"n">indices</span><span class=3D"p">[</span><=
span class=3D"n">i</span><span class=3D"p">:]</span> <span class=3D"o">=3D<=
/span> <span class=3D"n">indices</span><span class=3D"p">[</span><span clas=
s=3D"n">i</span><span class=3D"o">+</span><span class=3D"mi">1</span><span =
class=3D"p">:]</span> <span class=3D"o">+</span> <span class=3D"n">indices<=
/span><span class=3D"p">[</span><span class=3D"n">i</span><span class=3D"p"=
>:</span><span class=3D"n">i</span><span class=3D"o">+</span><span class=3D=
"mi">1</span><span class=3D"p">]</span>
                <span class=3D"n">cycles</span><span class=3D"p">[</span><s=
pan class=3D"n">i</span><span class=3D"p">]</span> <span class=3D"o">=3D</s=
pan> <span class=3D"n">n</span> <span class=3D"o">-</span> <span class=3D"n=
">i</span>
            <span class=3D"k">else</span><span class=3D"p">:</span>
                <span class=3D"n">j</span> <span class=3D"o">=3D</span> <sp=
an class=3D"n">cycles</span><span class=3D"p">[</span><span class=3D"n">i</=
span><span class=3D"p">]</span>
                <span class=3D"n">indices</span><span class=3D"p">[</span><=
span class=3D"n">i</span><span class=3D"p">],</span> <span class=3D"n">indi=
ces</span><span class=3D"p">[</span><span class=3D"o">-</span><span class=
=3D"n">j</span><span class=3D"p">]</span> <span class=3D"o">=3D</span> <spa=
n class=3D"n">indices</span><span class=3D"p">[</span><span class=3D"o">-</=
span><span class=3D"n">j</span><span class=3D"p">],</span> <span class=3D"n=
">indices</span><span class=3D"p">[</span><span class=3D"n">i</span><span c=
lass=3D"p">]</span>
                <span class=3D"k">yield</span> <span class=3D"nb">tuple</sp=
an><span class=3D"p">(</span><span class=3D"n">pool</span><span class=3D"p"=
>[</span><span class=3D"n">i</span><span class=3D"p">]</span> <span class=
=3D"k">for</span> <span class=3D"n">i</span> <span class=3D"ow">in</span> <=
span class=3D"n">indices</span><span class=3D"p">[:</span><span class=3D"n"=
>r</span><span class=3D"p">])</span>
                <span class=3D"k">break</span>
        <span class=3D"k">else</span><span class=3D"p">:</span>
            <span class=3D"k">return</span>
</pre></div>
</div>
<p>The code for <a class=3D"reference internal" href=3D"https://docs.python=
.org/3/library/itertools.html#itertools.permutations" title=3D"itertools.pe=
rmutations"><code class=3D"xref py py-func docutils literal notranslate"><s=
pan class=3D"pre">permutations()</span></code></a> can be also expressed as=
 a subsequence of
<a class=3D"reference internal" href=3D"https://docs.python.org/3/library/i=
tertools.html#itertools.product" title=3D"itertools.product"><code class=3D=
"xref py py-func docutils literal notranslate"><span class=3D"pre">product(=
)</span></code></a>, filtered to exclude entries with repeated elements (th=
ose
from the same position in the input pool):</p>
<div class=3D"highlight-python3 notranslate" style=3D"position: relative;">=
<div class=3D"highlight"><pre><span></span><span class=3D"k">def</span> <sp=
an class=3D"nf">permutations</span><span class=3D"p">(</span><span class=3D=
"n">iterable</span><span class=3D"p">,</span> <span class=3D"n">r</span><sp=
an class=3D"o">=3D</span><span class=3D"kc">None</span><span class=3D"p">):=
</span>
    <span class=3D"n">pool</span> <span class=3D"o">=3D</span> <span class=
=3D"nb">tuple</span><span class=3D"p">(</span><span class=3D"n">iterable</s=
pan><span class=3D"p">)</span>
    <span class=3D"n">n</span> <span class=3D"o">=3D</span> <span class=3D"=
nb">len</span><span class=3D"p">(</span><span class=3D"n">pool</span><span =
class=3D"p">)</span>
    <span class=3D"n">r</span> <span class=3D"o">=3D</span> <span class=3D"=
n">n</span> <span class=3D"k">if</span> <span class=3D"n">r</span> <span cl=
ass=3D"ow">is</span> <span class=3D"kc">None</span> <span class=3D"k">else<=
/span> <span class=3D"n">r</span>
    <span class=3D"k">for</span> <span class=3D"n">indices</span> <span cla=
ss=3D"ow">in</span> <span class=3D"n">product</span><span class=3D"p">(</sp=
an><span class=3D"nb">range</span><span class=3D"p">(</span><span class=3D"=
n">n</span><span class=3D"p">),</span> <span class=3D"n">repeat</span><span=
 class=3D"o">=3D</span><span class=3D"n">r</span><span class=3D"p">):</span=
>
        <span class=3D"k">if</span> <span class=3D"nb">len</span><span clas=
s=3D"p">(</span><span class=3D"nb">set</span><span class=3D"p">(</span><spa=
n class=3D"n">indices</span><span class=3D"p">))</span> <span class=3D"o">=
=3D=3D</span> <span class=3D"n">r</span><span class=3D"p">:</span>
            <span class=3D"k">yield</span> <span class=3D"nb">tuple</span><=
span class=3D"p">(</span><span class=3D"n">pool</span><span class=3D"p">[</=
span><span class=3D"n">i</span><span class=3D"p">]</span> <span class=3D"k"=
>for</span> <span class=3D"n">i</span> <span class=3D"ow">in</span> <span c=
lass=3D"n">indices</span><span class=3D"p">)</span>
</pre></div>
</div>
<p>The number of items returned is <code class=3D"docutils literal notransl=
ate"><span class=3D"pre">n!</span> <span class=3D"pre">/</span> <span class=
=3D"pre">(n-r)!</span></code> when <code class=3D"docutils literal notransl=
ate"><span class=3D"pre">0</span> <span class=3D"pre">&lt;=3D</span> <span =
class=3D"pre">r</span> <span class=3D"pre">&lt;=3D</span> <span class=3D"pr=
e">n</span></code>
or zero when <code class=3D"docutils literal notranslate"><span class=3D"pr=
e">r</span> <span class=3D"pre">&gt;</span> <span class=3D"pre">n</span></c=
ode>.</p>
</dd></dl>

<dl class=3D"function">
<dt id=3D"itertools.product">
<code class=3D"sig-prename descclassname">itertools.</code><code class=3D"s=
ig-name descname">product</code><span class=3D"sig-paren">(</span><em class=
=3D"sig-param">*iterables</em>, <em class=3D"sig-param">repeat=3D1</em><spa=
n class=3D"sig-paren">)</span><a class=3D"headerlink" href=3D"https://docs.=
python.org/3/library/itertools.html#itertools.product" title=3D"Permalink t=
o this definition">=C2=B6</a></dt>
<dd><p>Cartesian product of input iterables.</p>
<p>Roughly equivalent to nested for-loops in a generator expression. For ex=
ample,
<code class=3D"docutils literal notranslate"><span class=3D"pre">product(A,=
</span> <span class=3D"pre">B)</span></code> returns the same as <code clas=
s=3D"docutils literal notranslate"><span class=3D"pre">((x,y)</span> <span =
class=3D"pre">for</span> <span class=3D"pre">x</span> <span class=3D"pre">i=
n</span> <span class=3D"pre">A</span> <span class=3D"pre">for</span> <span =
class=3D"pre">y</span> <span class=3D"pre">in</span> <span class=3D"pre">B)=
</span></code>.</p>
<p>The nested loops cycle like an odometer with the rightmost element advan=
cing
on every iteration.  This pattern creates a lexicographic ordering so that =
if
the input=E2=80=99s iterables are sorted, the product tuples are emitted in=
 sorted
order.</p>
<p>To compute the product of an iterable with itself, specify the number of
repetitions with the optional <em>repeat</em> keyword argument.  For exampl=
e,
<code class=3D"docutils literal notranslate"><span class=3D"pre">product(A,=
</span> <span class=3D"pre">repeat=3D4)</span></code> means the same as <co=
de class=3D"docutils literal notranslate"><span class=3D"pre">product(A,</s=
pan> <span class=3D"pre">A,</span> <span class=3D"pre">A,</span> <span clas=
s=3D"pre">A)</span></code>.</p>
<p>This function is roughly equivalent to the following code, except that t=
he
actual implementation does not build up intermediate results in memory:</p>
<div class=3D"highlight-python3 notranslate" style=3D"position: relative;">=
<div class=3D"highlight"><pre><span></span><span class=3D"k">def</span> <sp=
an class=3D"nf">product</span><span class=3D"p">(</span><span class=3D"o">*=
</span><span class=3D"n">args</span><span class=3D"p">,</span> <span class=
=3D"n">repeat</span><span class=3D"o">=3D</span><span class=3D"mi">1</span>=
<span class=3D"p">):</span>
    <span class=3D"c1"># product('ABCD', 'xy') --&gt; Ax Ay Bx By Cx Cy Dx =
Dy</span>
    <span class=3D"c1"># product(range(2), repeat=3D3) --&gt; 000 001 010 0=
11 100 101 110 111</span>
    <span class=3D"n">pools</span> <span class=3D"o">=3D</span> <span class=
=3D"p">[</span><span class=3D"nb">tuple</span><span class=3D"p">(</span><sp=
an class=3D"n">pool</span><span class=3D"p">)</span> <span class=3D"k">for<=
/span> <span class=3D"n">pool</span> <span class=3D"ow">in</span> <span cla=
ss=3D"n">args</span><span class=3D"p">]</span> <span class=3D"o">*</span> <=
span class=3D"n">repeat</span>
    <span class=3D"n">result</span> <span class=3D"o">=3D</span> <span clas=
s=3D"p">[[]]</span>
    <span class=3D"k">for</span> <span class=3D"n">pool</span> <span class=
=3D"ow">in</span> <span class=3D"n">pools</span><span class=3D"p">:</span>
        <span class=3D"n">result</span> <span class=3D"o">=3D</span> <span =
class=3D"p">[</span><span class=3D"n">x</span><span class=3D"o">+</span><sp=
an class=3D"p">[</span><span class=3D"n">y</span><span class=3D"p">]</span>=
 <span class=3D"k">for</span> <span class=3D"n">x</span> <span class=3D"ow"=
>in</span> <span class=3D"n">result</span> <span class=3D"k">for</span> <sp=
an class=3D"n">y</span> <span class=3D"ow">in</span> <span class=3D"n">pool=
</span><span class=3D"p">]</span>
    <span class=3D"k">for</span> <span class=3D"n">prod</span> <span class=
=3D"ow">in</span> <span class=3D"n">result</span><span class=3D"p">:</span>
        <span class=3D"k">yield</span> <span class=3D"nb">tuple</span><span=
 class=3D"p">(</span><span class=3D"n">prod</span><span class=3D"p">)</span=
>
</pre></div>
</div>
</dd></dl>

<dl class=3D"function">
<dt id=3D"itertools.repeat">
<code class=3D"sig-prename descclassname">itertools.</code><code class=3D"s=
ig-name descname">repeat</code><span class=3D"sig-paren">(</span><em class=
=3D"sig-param">object</em><span class=3D"optional">[</span>, <em class=3D"s=
ig-param">times</em><span class=3D"optional">]</span><span class=3D"sig-par=
en">)</span><a class=3D"headerlink" href=3D"https://docs.python.org/3/libra=
ry/itertools.html#itertools.repeat" title=3D"Permalink to this definition">=
=C2=B6</a></dt>
<dd><p>Make an iterator that returns <em>object</em> over and over again. R=
uns indefinitely
unless the <em>times</em> argument is specified. Used as argument to <a cla=
ss=3D"reference internal" href=3D"https://docs.python.org/3/library/functio=
ns.html#map" title=3D"map"><code class=3D"xref py py-func docutils literal =
notranslate"><span class=3D"pre">map()</span></code></a> for
invariant parameters to the called function.  Also used with <a class=3D"re=
ference internal" href=3D"https://docs.python.org/3/library/functions.html#=
zip" title=3D"zip"><code class=3D"xref py py-func docutils literal notransl=
ate"><span class=3D"pre">zip()</span></code></a> to
create an invariant part of a tuple record.</p>
<p>Roughly equivalent to:</p>
<div class=3D"highlight-python3 notranslate" style=3D"position: relative;">=
<div class=3D"highlight"><pre><span></span><span class=3D"k">def</span> <sp=
an class=3D"nf">repeat</span><span class=3D"p">(</span><span class=3D"nb">o=
bject</span><span class=3D"p">,</span> <span class=3D"n">times</span><span =
class=3D"o">=3D</span><span class=3D"kc">None</span><span class=3D"p">):</s=
pan>
    <span class=3D"c1"># repeat(10, 3) --&gt; 10 10 10</span>
    <span class=3D"k">if</span> <span class=3D"n">times</span> <span class=
=3D"ow">is</span> <span class=3D"kc">None</span><span class=3D"p">:</span>
        <span class=3D"k">while</span> <span class=3D"kc">True</span><span =
class=3D"p">:</span>
            <span class=3D"k">yield</span> <span class=3D"nb">object</span>
    <span class=3D"k">else</span><span class=3D"p">:</span>
        <span class=3D"k">for</span> <span class=3D"n">i</span> <span class=
=3D"ow">in</span> <span class=3D"nb">range</span><span class=3D"p">(</span>=
<span class=3D"n">times</span><span class=3D"p">):</span>
            <span class=3D"k">yield</span> <span class=3D"nb">object</span>
</pre></div>
</div>
<p>A common use for <em>repeat</em> is to supply a stream of constant value=
s to <em>map</em>
or <em>zip</em>:</p>
<div class=3D"highlight-python3 notranslate" style=3D"position: relative;">=
<div class=3D"highlight"><span class=3D"copybutton" title=3D"Hide the promp=
ts and output" style=3D"cursor: pointer; position: absolute; top: 0px; righ=
t: 0px; border-color: rgb(170, 204, 153); border-style: solid; border-width=
: 1px; color: rgb(170, 204, 153); font-family: monospace; padding-left: 0.2=
em; padding-right: 0.2em; border-radius: 0px 3px 0px 0px;">&gt;&gt;&gt;</sp=
an><pre><span></span><span class=3D"gp">&gt;&gt;&gt; </span><span class=3D"=
nb">list</span><span class=3D"p">(</span><span class=3D"nb">map</span><span=
 class=3D"p">(</span><span class=3D"nb">pow</span><span class=3D"p">,</span=
> <span class=3D"nb">range</span><span class=3D"p">(</span><span class=3D"m=
i">10</span><span class=3D"p">),</span> <span class=3D"n">repeat</span><spa=
n class=3D"p">(</span><span class=3D"mi">2</span><span class=3D"p">)))</spa=
n>
<span class=3D"go">[0, 1, 4, 9, 16, 25, 36, 49, 64, 81]</span>
</pre></div>
</div>
</dd></dl>

<dl class=3D"function">
<dt id=3D"itertools.starmap">
<code class=3D"sig-prename descclassname">itertools.</code><code class=3D"s=
ig-name descname">starmap</code><span class=3D"sig-paren">(</span><em class=
=3D"sig-param">function</em>, <em class=3D"sig-param">iterable</em><span cl=
ass=3D"sig-paren">)</span><a class=3D"headerlink" href=3D"https://docs.pyth=
on.org/3/library/itertools.html#itertools.starmap" title=3D"Permalink to th=
is definition">=C2=B6</a></dt>
<dd><p>Make an iterator that computes the function using arguments obtained=
 from
the iterable.  Used instead of <a class=3D"reference internal" href=3D"http=
s://docs.python.org/3/library/functions.html#map" title=3D"map"><code class=
=3D"xref py py-func docutils literal notranslate"><span class=3D"pre">map()=
</span></code></a> when argument parameters are already
grouped in tuples from a single iterable (the data has been =E2=80=9Cpre-zi=
pped=E2=80=9D).  The
difference between <a class=3D"reference internal" href=3D"https://docs.pyt=
hon.org/3/library/functions.html#map" title=3D"map"><code class=3D"xref py =
py-func docutils literal notranslate"><span class=3D"pre">map()</span></cod=
e></a> and <a class=3D"reference internal" href=3D"https://docs.python.org/=
3/library/itertools.html#itertools.starmap" title=3D"itertools.starmap"><co=
de class=3D"xref py py-func docutils literal notranslate"><span class=3D"pr=
e">starmap()</span></code></a> parallels the distinction
between <code class=3D"docutils literal notranslate"><span class=3D"pre">fu=
nction(a,b)</span></code> and <code class=3D"docutils literal notranslate">=
<span class=3D"pre">function(*c)</span></code>. Roughly equivalent to:</p>
<div class=3D"highlight-python3 notranslate" style=3D"position: relative;">=
<div class=3D"highlight"><pre><span></span><span class=3D"k">def</span> <sp=
an class=3D"nf">starmap</span><span class=3D"p">(</span><span class=3D"n">f=
unction</span><span class=3D"p">,</span> <span class=3D"n">iterable</span><=
span class=3D"p">):</span>
    <span class=3D"c1"># starmap(pow, [(2,5), (3,2), (10,3)]) --&gt; 32 9 1=
000</span>
    <span class=3D"k">for</span> <span class=3D"n">args</span> <span class=
=3D"ow">in</span> <span class=3D"n">iterable</span><span class=3D"p">:</spa=
n>
        <span class=3D"k">yield</span> <span class=3D"n">function</span><sp=
an class=3D"p">(</span><span class=3D"o">*</span><span class=3D"n">args</sp=
an><span class=3D"p">)</span>
</pre></div>
</div>
</dd></dl>

<dl class=3D"function">
<dt id=3D"itertools.takewhile">
<code class=3D"sig-prename descclassname">itertools.</code><code class=3D"s=
ig-name descname">takewhile</code><span class=3D"sig-paren">(</span><em cla=
ss=3D"sig-param">predicate</em>, <em class=3D"sig-param">iterable</em><span=
 class=3D"sig-paren">)</span><a class=3D"headerlink" href=3D"https://docs.p=
ython.org/3/library/itertools.html#itertools.takewhile" title=3D"Permalink =
to this definition">=C2=B6</a></dt>
<dd><p>Make an iterator that returns elements from the iterable as long as =
the
predicate is true.  Roughly equivalent to:</p>
<div class=3D"highlight-python3 notranslate" style=3D"position: relative;">=
<div class=3D"highlight"><pre><span></span><span class=3D"k">def</span> <sp=
an class=3D"nf">takewhile</span><span class=3D"p">(</span><span class=3D"n"=
>predicate</span><span class=3D"p">,</span> <span class=3D"n">iterable</spa=
n><span class=3D"p">):</span>
    <span class=3D"c1"># takewhile(lambda x: x&lt;5, [1,4,6,4,1]) --&gt; 1 =
4</span>
    <span class=3D"k">for</span> <span class=3D"n">x</span> <span class=3D"=
ow">in</span> <span class=3D"n">iterable</span><span class=3D"p">:</span>
        <span class=3D"k">if</span> <span class=3D"n">predicate</span><span=
 class=3D"p">(</span><span class=3D"n">x</span><span class=3D"p">):</span>
            <span class=3D"k">yield</span> <span class=3D"n">x</span>
        <span class=3D"k">else</span><span class=3D"p">:</span>
            <span class=3D"k">break</span>
</pre></div>
</div>
</dd></dl>

<dl class=3D"function">
<dt id=3D"itertools.tee">
<code class=3D"sig-prename descclassname">itertools.</code><code class=3D"s=
ig-name descname">tee</code><span class=3D"sig-paren">(</span><em class=3D"=
sig-param">iterable</em>, <em class=3D"sig-param">n=3D2</em><span class=3D"=
sig-paren">)</span><a class=3D"headerlink" href=3D"https://docs.python.org/=
3/library/itertools.html#itertools.tee" title=3D"Permalink to this definiti=
on">=C2=B6</a></dt>
<dd><p>Return <em>n</em> independent iterators from a single iterable.</p>
<p>The following Python code helps explain what <em>tee</em> does (although=
 the actual
implementation is more complex and uses only a single underlying
<abbr title=3D"first-in, first-out">FIFO</abbr> queue).</p>
<p>Roughly equivalent to:</p>
<div class=3D"highlight-python3 notranslate" style=3D"position: relative;">=
<div class=3D"highlight"><pre><span></span><span class=3D"k">def</span> <sp=
an class=3D"nf">tee</span><span class=3D"p">(</span><span class=3D"n">itera=
ble</span><span class=3D"p">,</span> <span class=3D"n">n</span><span class=
=3D"o">=3D</span><span class=3D"mi">2</span><span class=3D"p">):</span>
    <span class=3D"n">it</span> <span class=3D"o">=3D</span> <span class=3D=
"nb">iter</span><span class=3D"p">(</span><span class=3D"n">iterable</span>=
<span class=3D"p">)</span>
    <span class=3D"n">deques</span> <span class=3D"o">=3D</span> <span clas=
s=3D"p">[</span><span class=3D"n">collections</span><span class=3D"o">.</sp=
an><span class=3D"n">deque</span><span class=3D"p">()</span> <span class=3D=
"k">for</span> <span class=3D"n">i</span> <span class=3D"ow">in</span> <spa=
n class=3D"nb">range</span><span class=3D"p">(</span><span class=3D"n">n</s=
pan><span class=3D"p">)]</span>
    <span class=3D"k">def</span> <span class=3D"nf">gen</span><span class=
=3D"p">(</span><span class=3D"n">mydeque</span><span class=3D"p">):</span>
        <span class=3D"k">while</span> <span class=3D"kc">True</span><span =
class=3D"p">:</span>
            <span class=3D"k">if</span> <span class=3D"ow">not</span> <span=
 class=3D"n">mydeque</span><span class=3D"p">:</span>             <span cla=
ss=3D"c1"># when the local deque is empty</span>
                <span class=3D"k">try</span><span class=3D"p">:</span>
                    <span class=3D"n">newval</span> <span class=3D"o">=3D</=
span> <span class=3D"nb">next</span><span class=3D"p">(</span><span class=
=3D"n">it</span><span class=3D"p">)</span>   <span class=3D"c1"># fetch a n=
ew value and</span>
                <span class=3D"k">except</span> <span class=3D"ne">StopIter=
ation</span><span class=3D"p">:</span>
                    <span class=3D"k">return</span>
                <span class=3D"k">for</span> <span class=3D"n">d</span> <sp=
an class=3D"ow">in</span> <span class=3D"n">deques</span><span class=3D"p">=
:</span>        <span class=3D"c1"># load it to all the deques</span>
                    <span class=3D"n">d</span><span class=3D"o">.</span><sp=
an class=3D"n">append</span><span class=3D"p">(</span><span class=3D"n">new=
val</span><span class=3D"p">)</span>
            <span class=3D"k">yield</span> <span class=3D"n">mydeque</span>=
<span class=3D"o">.</span><span class=3D"n">popleft</span><span class=3D"p"=
>()</span>
    <span class=3D"k">return</span> <span class=3D"nb">tuple</span><span cl=
ass=3D"p">(</span><span class=3D"n">gen</span><span class=3D"p">(</span><sp=
an class=3D"n">d</span><span class=3D"p">)</span> <span class=3D"k">for</sp=
an> <span class=3D"n">d</span> <span class=3D"ow">in</span> <span class=3D"=
n">deques</span><span class=3D"p">)</span>
</pre></div>
</div>
<p>Once <a class=3D"reference internal" href=3D"https://docs.python.org/3/l=
ibrary/itertools.html#itertools.tee" title=3D"itertools.tee"><code class=3D=
"xref py py-func docutils literal notranslate"><span class=3D"pre">tee()</s=
pan></code></a> has made a split, the original <em>iterable</em> should not=
 be
used anywhere else; otherwise, the <em>iterable</em> could get advanced wit=
hout
the tee objects being informed.</p>
<p><code class=3D"docutils literal notranslate"><span class=3D"pre">tee</sp=
an></code> iterators are not threadsafe. A <a class=3D"reference internal" =
href=3D"https://docs.python.org/3/library/exceptions.html#RuntimeError" tit=
le=3D"RuntimeError"><code class=3D"xref py py-exc docutils literal notransl=
ate"><span class=3D"pre">RuntimeError</span></code></a> may be
raised when using simultaneously iterators returned by the same <a class=3D=
"reference internal" href=3D"https://docs.python.org/3/library/itertools.ht=
ml#itertools.tee" title=3D"itertools.tee"><code class=3D"xref py py-func do=
cutils literal notranslate"><span class=3D"pre">tee()</span></code></a>
call, even if the original <em>iterable</em> is threadsafe.</p>
<p>This itertool may require significant auxiliary storage (depending on ho=
w
much temporary data needs to be stored). In general, if one iterator uses
most or all of the data before another iterator starts, it is faster to use
<a class=3D"reference internal" href=3D"https://docs.python.org/3/library/s=
tdtypes.html#list" title=3D"list"><code class=3D"xref py py-func docutils l=
iteral notranslate"><span class=3D"pre">list()</span></code></a> instead of=
 <a class=3D"reference internal" href=3D"https://docs.python.org/3/library/=
itertools.html#itertools.tee" title=3D"itertools.tee"><code class=3D"xref p=
y py-func docutils literal notranslate"><span class=3D"pre">tee()</span></c=
ode></a>.</p>
</dd></dl>

<dl class=3D"function">
<dt id=3D"itertools.zip_longest">
<code class=3D"sig-prename descclassname">itertools.</code><code class=3D"s=
ig-name descname">zip_longest</code><span class=3D"sig-paren">(</span><em c=
lass=3D"sig-param">*iterables</em>, <em class=3D"sig-param">fillvalue=3DNon=
e</em><span class=3D"sig-paren">)</span><a class=3D"headerlink" href=3D"htt=
ps://docs.python.org/3/library/itertools.html#itertools.zip_longest" title=
=3D"Permalink to this definition">=C2=B6</a></dt>
<dd><p>Make an iterator that aggregates elements from each of the iterables=
. If the
iterables are of uneven length, missing values are filled-in with <em>fillv=
alue</em>.
Iteration continues until the longest iterable is exhausted.  Roughly equiv=
alent to:</p>
<div class=3D"highlight-python3 notranslate" style=3D"position: relative;">=
<div class=3D"highlight"><pre><span></span><span class=3D"k">def</span> <sp=
an class=3D"nf">zip_longest</span><span class=3D"p">(</span><span class=3D"=
o">*</span><span class=3D"n">args</span><span class=3D"p">,</span> <span cl=
ass=3D"n">fillvalue</span><span class=3D"o">=3D</span><span class=3D"kc">No=
ne</span><span class=3D"p">):</span>
    <span class=3D"c1"># zip_longest('ABCD', 'xy', fillvalue=3D'-') --&gt; =
Ax By C- D-</span>
    <span class=3D"n">iterators</span> <span class=3D"o">=3D</span> <span c=
lass=3D"p">[</span><span class=3D"nb">iter</span><span class=3D"p">(</span>=
<span class=3D"n">it</span><span class=3D"p">)</span> <span class=3D"k">for=
</span> <span class=3D"n">it</span> <span class=3D"ow">in</span> <span clas=
s=3D"n">args</span><span class=3D"p">]</span>
    <span class=3D"n">num_active</span> <span class=3D"o">=3D</span> <span =
class=3D"nb">len</span><span class=3D"p">(</span><span class=3D"n">iterator=
s</span><span class=3D"p">)</span>
    <span class=3D"k">if</span> <span class=3D"ow">not</span> <span class=
=3D"n">num_active</span><span class=3D"p">:</span>
        <span class=3D"k">return</span>
    <span class=3D"k">while</span> <span class=3D"kc">True</span><span clas=
s=3D"p">:</span>
        <span class=3D"n">values</span> <span class=3D"o">=3D</span> <span =
class=3D"p">[]</span>
        <span class=3D"k">for</span> <span class=3D"n">i</span><span class=
=3D"p">,</span> <span class=3D"n">it</span> <span class=3D"ow">in</span> <s=
pan class=3D"nb">enumerate</span><span class=3D"p">(</span><span class=3D"n=
">iterators</span><span class=3D"p">):</span>
            <span class=3D"k">try</span><span class=3D"p">:</span>
                <span class=3D"n">value</span> <span class=3D"o">=3D</span>=
 <span class=3D"nb">next</span><span class=3D"p">(</span><span class=3D"n">=
it</span><span class=3D"p">)</span>
            <span class=3D"k">except</span> <span class=3D"ne">StopIteratio=
n</span><span class=3D"p">:</span>
                <span class=3D"n">num_active</span> <span class=3D"o">-=3D<=
/span> <span class=3D"mi">1</span>
                <span class=3D"k">if</span> <span class=3D"ow">not</span> <=
span class=3D"n">num_active</span><span class=3D"p">:</span>
                    <span class=3D"k">return</span>
                <span class=3D"n">iterators</span><span class=3D"p">[</span=
><span class=3D"n">i</span><span class=3D"p">]</span> <span class=3D"o">=3D=
</span> <span class=3D"n">repeat</span><span class=3D"p">(</span><span clas=
s=3D"n">fillvalue</span><span class=3D"p">)</span>
                <span class=3D"n">value</span> <span class=3D"o">=3D</span>=
 <span class=3D"n">fillvalue</span>
            <span class=3D"n">values</span><span class=3D"o">.</span><span =
class=3D"n">append</span><span class=3D"p">(</span><span class=3D"n">value<=
/span><span class=3D"p">)</span>
        <span class=3D"k">yield</span> <span class=3D"nb">tuple</span><span=
 class=3D"p">(</span><span class=3D"n">values</span><span class=3D"p">)</sp=
an>
</pre></div>
</div>
<p>If one of the iterables is potentially infinite, then the <a class=3D"re=
ference internal" href=3D"https://docs.python.org/3/library/itertools.html#=
itertools.zip_longest" title=3D"itertools.zip_longest"><code class=3D"xref =
py py-func docutils literal notranslate"><span class=3D"pre">zip_longest()<=
/span></code></a>
function should be wrapped with something that limits the number of calls
(for example <a class=3D"reference internal" href=3D"https://docs.python.or=
g/3/library/itertools.html#itertools.islice" title=3D"itertools.islice"><co=
de class=3D"xref py py-func docutils literal notranslate"><span class=3D"pr=
e">islice()</span></code></a> or <a class=3D"reference internal" href=3D"ht=
tps://docs.python.org/3/library/itertools.html#itertools.takewhile" title=
=3D"itertools.takewhile"><code class=3D"xref py py-func docutils literal no=
translate"><span class=3D"pre">takewhile()</span></code></a>).  If not spec=
ified,
<em>fillvalue</em> defaults to <code class=3D"docutils literal notranslate"=
><span class=3D"pre">None</span></code>.</p>
</dd></dl>

</div>
<div class=3D"section" id=3D"itertools-recipes">
<span id=3D"id1"></span><h2>Itertools Recipes<a class=3D"headerlink" href=
=3D"https://docs.python.org/3/library/itertools.html#itertools-recipes" tit=
le=3D"Permalink to this headline">=C2=B6</a></h2>
<p>This section shows recipes for creating an extended toolset using the ex=
isting
itertools as building blocks.</p>
<p>Substantially all of these recipes and many, many others can be installe=
d from
the <a class=3D"reference external" href=3D"https://pypi.org/project/more-i=
tertools/">more-itertools project</a> found
on the Python Package Index:</p>
<div class=3D"highlight-python3 notranslate" style=3D"position: relative;">=
<div class=3D"highlight"><pre><span></span><span class=3D"n">pip</span> <sp=
an class=3D"n">install</span> <span class=3D"n">more</span><span class=3D"o=
">-</span><span class=3D"n">itertools</span>
</pre></div>
</div>
<p>The extended tools offer the same high performance as the underlying too=
lset.
The superior memory performance is kept by processing elements one at a tim=
e
rather than bringing the whole iterable into memory all at once. Code volum=
e is
kept small by linking the tools together in a functional style which helps
eliminate temporary variables.  High speed is retained by preferring
=E2=80=9Cvectorized=E2=80=9D building blocks over the use of for-loops and =
<a class=3D"reference internal" href=3D"https://docs.python.org/3/glossary.=
html#term-generator"><span class=3D"xref std std-term">generator</span></a>=
s
which incur interpreter overhead.</p>
<div class=3D"highlight-python3 notranslate" style=3D"position: relative;">=
<div class=3D"highlight"><pre><span></span><span class=3D"k">def</span> <sp=
an class=3D"nf">take</span><span class=3D"p">(</span><span class=3D"n">n</s=
pan><span class=3D"p">,</span> <span class=3D"n">iterable</span><span class=
=3D"p">):</span>
    <span class=3D"s2">"Return first n items of the iterable as a list"</sp=
an>
    <span class=3D"k">return</span> <span class=3D"nb">list</span><span cla=
ss=3D"p">(</span><span class=3D"n">islice</span><span class=3D"p">(</span><=
span class=3D"n">iterable</span><span class=3D"p">,</span> <span class=3D"n=
">n</span><span class=3D"p">))</span>

<span class=3D"k">def</span> <span class=3D"nf">prepend</span><span class=
=3D"p">(</span><span class=3D"n">value</span><span class=3D"p">,</span> <sp=
an class=3D"n">iterator</span><span class=3D"p">):</span>
    <span class=3D"s2">"Prepend a single value in front of an iterator"</sp=
an>
    <span class=3D"c1"># prepend(1, [2, 3, 4]) -&gt; 1 2 3 4</span>
    <span class=3D"k">return</span> <span class=3D"n">chain</span><span cla=
ss=3D"p">([</span><span class=3D"n">value</span><span class=3D"p">],</span>=
 <span class=3D"n">iterator</span><span class=3D"p">)</span>

<span class=3D"k">def</span> <span class=3D"nf">tabulate</span><span class=
=3D"p">(</span><span class=3D"n">function</span><span class=3D"p">,</span> =
<span class=3D"n">start</span><span class=3D"o">=3D</span><span class=3D"mi=
">0</span><span class=3D"p">):</span>
    <span class=3D"s2">"Return function(0), function(1), ..."</span>
    <span class=3D"k">return</span> <span class=3D"nb">map</span><span clas=
s=3D"p">(</span><span class=3D"n">function</span><span class=3D"p">,</span>=
 <span class=3D"n">count</span><span class=3D"p">(</span><span class=3D"n">=
start</span><span class=3D"p">))</span>

<span class=3D"k">def</span> <span class=3D"nf">tail</span><span class=3D"p=
">(</span><span class=3D"n">n</span><span class=3D"p">,</span> <span class=
=3D"n">iterable</span><span class=3D"p">):</span>
    <span class=3D"s2">"Return an iterator over the last n items"</span>
    <span class=3D"c1"># tail(3, 'ABCDEFG') --&gt; E F G</span>
    <span class=3D"k">return</span> <span class=3D"nb">iter</span><span cla=
ss=3D"p">(</span><span class=3D"n">collections</span><span class=3D"o">.</s=
pan><span class=3D"n">deque</span><span class=3D"p">(</span><span class=3D"=
n">iterable</span><span class=3D"p">,</span> <span class=3D"n">maxlen</span=
><span class=3D"o">=3D</span><span class=3D"n">n</span><span class=3D"p">))=
</span>

<span class=3D"k">def</span> <span class=3D"nf">consume</span><span class=
=3D"p">(</span><span class=3D"n">iterator</span><span class=3D"p">,</span> =
<span class=3D"n">n</span><span class=3D"o">=3D</span><span class=3D"kc">No=
ne</span><span class=3D"p">):</span>
    <span class=3D"s2">"Advance the iterator n-steps ahead. If n is None, c=
onsume entirely."</span>
    <span class=3D"c1"># Use functions that consume iterators at C speed.</=
span>
    <span class=3D"k">if</span> <span class=3D"n">n</span> <span class=3D"o=
w">is</span> <span class=3D"kc">None</span><span class=3D"p">:</span>
        <span class=3D"c1"># feed the entire iterator into a zero-length de=
que</span>
        <span class=3D"n">collections</span><span class=3D"o">.</span><span=
 class=3D"n">deque</span><span class=3D"p">(</span><span class=3D"n">iterat=
or</span><span class=3D"p">,</span> <span class=3D"n">maxlen</span><span cl=
ass=3D"o">=3D</span><span class=3D"mi">0</span><span class=3D"p">)</span>
    <span class=3D"k">else</span><span class=3D"p">:</span>
        <span class=3D"c1"># advance to the empty slice starting at positio=
n n</span>
        <span class=3D"nb">next</span><span class=3D"p">(</span><span class=
=3D"n">islice</span><span class=3D"p">(</span><span class=3D"n">iterator</s=
pan><span class=3D"p">,</span> <span class=3D"n">n</span><span class=3D"p">=
,</span> <span class=3D"n">n</span><span class=3D"p">),</span> <span class=
=3D"kc">None</span><span class=3D"p">)</span>

<span class=3D"k">def</span> <span class=3D"nf">nth</span><span class=3D"p"=
>(</span><span class=3D"n">iterable</span><span class=3D"p">,</span> <span =
class=3D"n">n</span><span class=3D"p">,</span> <span class=3D"n">default</s=
pan><span class=3D"o">=3D</span><span class=3D"kc">None</span><span class=
=3D"p">):</span>
    <span class=3D"s2">"Returns the nth item or a default value"</span>
    <span class=3D"k">return</span> <span class=3D"nb">next</span><span cla=
ss=3D"p">(</span><span class=3D"n">islice</span><span class=3D"p">(</span><=
span class=3D"n">iterable</span><span class=3D"p">,</span> <span class=3D"n=
">n</span><span class=3D"p">,</span> <span class=3D"kc">None</span><span cl=
ass=3D"p">),</span> <span class=3D"n">default</span><span class=3D"p">)</sp=
an>

<span class=3D"k">def</span> <span class=3D"nf">all_equal</span><span class=
=3D"p">(</span><span class=3D"n">iterable</span><span class=3D"p">):</span>
    <span class=3D"s2">"Returns True if all the elements are equal to each =
other"</span>
    <span class=3D"n">g</span> <span class=3D"o">=3D</span> <span class=3D"=
n">groupby</span><span class=3D"p">(</span><span class=3D"n">iterable</span=
><span class=3D"p">)</span>
    <span class=3D"k">return</span> <span class=3D"nb">next</span><span cla=
ss=3D"p">(</span><span class=3D"n">g</span><span class=3D"p">,</span> <span=
 class=3D"kc">True</span><span class=3D"p">)</span> <span class=3D"ow">and<=
/span> <span class=3D"ow">not</span> <span class=3D"nb">next</span><span cl=
ass=3D"p">(</span><span class=3D"n">g</span><span class=3D"p">,</span> <spa=
n class=3D"kc">False</span><span class=3D"p">)</span>

<span class=3D"k">def</span> <span class=3D"nf">quantify</span><span class=
=3D"p">(</span><span class=3D"n">iterable</span><span class=3D"p">,</span> =
<span class=3D"n">pred</span><span class=3D"o">=3D</span><span class=3D"nb"=
>bool</span><span class=3D"p">):</span>
    <span class=3D"s2">"Count how many times the predicate is true"</span>
    <span class=3D"k">return</span> <span class=3D"nb">sum</span><span clas=
s=3D"p">(</span><span class=3D"nb">map</span><span class=3D"p">(</span><spa=
n class=3D"n">pred</span><span class=3D"p">,</span> <span class=3D"n">itera=
ble</span><span class=3D"p">))</span>

<span class=3D"k">def</span> <span class=3D"nf">padnone</span><span class=
=3D"p">(</span><span class=3D"n">iterable</span><span class=3D"p">):</span>
    <span class=3D"sd">"""Returns the sequence elements and then returns No=
ne indefinitely.</span>

<span class=3D"sd">    Useful for emulating the behavior of the built-in ma=
p() function.</span>
<span class=3D"sd">    """</span>
    <span class=3D"k">return</span> <span class=3D"n">chain</span><span cla=
ss=3D"p">(</span><span class=3D"n">iterable</span><span class=3D"p">,</span=
> <span class=3D"n">repeat</span><span class=3D"p">(</span><span class=3D"k=
c">None</span><span class=3D"p">))</span>

<span class=3D"k">def</span> <span class=3D"nf">ncycles</span><span class=
=3D"p">(</span><span class=3D"n">iterable</span><span class=3D"p">,</span> =
<span class=3D"n">n</span><span class=3D"p">):</span>
    <span class=3D"s2">"Returns the sequence elements n times"</span>
    <span class=3D"k">return</span> <span class=3D"n">chain</span><span cla=
ss=3D"o">.</span><span class=3D"n">from_iterable</span><span class=3D"p">(<=
/span><span class=3D"n">repeat</span><span class=3D"p">(</span><span class=
=3D"nb">tuple</span><span class=3D"p">(</span><span class=3D"n">iterable</s=
pan><span class=3D"p">),</span> <span class=3D"n">n</span><span class=3D"p"=
>))</span>

<span class=3D"k">def</span> <span class=3D"nf">dotproduct</span><span clas=
s=3D"p">(</span><span class=3D"n">vec1</span><span class=3D"p">,</span> <sp=
an class=3D"n">vec2</span><span class=3D"p">):</span>
    <span class=3D"k">return</span> <span class=3D"nb">sum</span><span clas=
s=3D"p">(</span><span class=3D"nb">map</span><span class=3D"p">(</span><spa=
n class=3D"n">operator</span><span class=3D"o">.</span><span class=3D"n">mu=
l</span><span class=3D"p">,</span> <span class=3D"n">vec1</span><span class=
=3D"p">,</span> <span class=3D"n">vec2</span><span class=3D"p">))</span>

<span class=3D"k">def</span> <span class=3D"nf">flatten</span><span class=
=3D"p">(</span><span class=3D"n">list_of_lists</span><span class=3D"p">):</=
span>
    <span class=3D"s2">"Flatten one level of nesting"</span>
    <span class=3D"k">return</span> <span class=3D"n">chain</span><span cla=
ss=3D"o">.</span><span class=3D"n">from_iterable</span><span class=3D"p">(<=
/span><span class=3D"n">list_of_lists</span><span class=3D"p">)</span>

<span class=3D"k">def</span> <span class=3D"nf">repeatfunc</span><span clas=
s=3D"p">(</span><span class=3D"n">func</span><span class=3D"p">,</span> <sp=
an class=3D"n">times</span><span class=3D"o">=3D</span><span class=3D"kc">N=
one</span><span class=3D"p">,</span> <span class=3D"o">*</span><span class=
=3D"n">args</span><span class=3D"p">):</span>
    <span class=3D"sd">"""Repeat calls to func with specified arguments.</s=
pan>

<span class=3D"sd">    Example:  repeatfunc(random.random)</span>
<span class=3D"sd">    """</span>
    <span class=3D"k">if</span> <span class=3D"n">times</span> <span class=
=3D"ow">is</span> <span class=3D"kc">None</span><span class=3D"p">:</span>
        <span class=3D"k">return</span> <span class=3D"n">starmap</span><sp=
an class=3D"p">(</span><span class=3D"n">func</span><span class=3D"p">,</sp=
an> <span class=3D"n">repeat</span><span class=3D"p">(</span><span class=3D=
"n">args</span><span class=3D"p">))</span>
    <span class=3D"k">return</span> <span class=3D"n">starmap</span><span c=
lass=3D"p">(</span><span class=3D"n">func</span><span class=3D"p">,</span> =
<span class=3D"n">repeat</span><span class=3D"p">(</span><span class=3D"n">=
args</span><span class=3D"p">,</span> <span class=3D"n">times</span><span c=
lass=3D"p">))</span>

<span class=3D"k">def</span> <span class=3D"nf">pairwise</span><span class=
=3D"p">(</span><span class=3D"n">iterable</span><span class=3D"p">):</span>
    <span class=3D"s2">"s -&gt; (s0,s1), (s1,s2), (s2, s3), ..."</span>
    <span class=3D"n">a</span><span class=3D"p">,</span> <span class=3D"n">=
b</span> <span class=3D"o">=3D</span> <span class=3D"n">tee</span><span cla=
ss=3D"p">(</span><span class=3D"n">iterable</span><span class=3D"p">)</span=
>
    <span class=3D"nb">next</span><span class=3D"p">(</span><span class=3D"=
n">b</span><span class=3D"p">,</span> <span class=3D"kc">None</span><span c=
lass=3D"p">)</span>
    <span class=3D"k">return</span> <span class=3D"nb">zip</span><span clas=
s=3D"p">(</span><span class=3D"n">a</span><span class=3D"p">,</span> <span =
class=3D"n">b</span><span class=3D"p">)</span>

<span class=3D"k">def</span> <span class=3D"nf">grouper</span><span class=
=3D"p">(</span><span class=3D"n">iterable</span><span class=3D"p">,</span> =
<span class=3D"n">n</span><span class=3D"p">,</span> <span class=3D"n">fill=
value</span><span class=3D"o">=3D</span><span class=3D"kc">None</span><span=
 class=3D"p">):</span>
    <span class=3D"s2">"Collect data into fixed-length chunks or blocks"</s=
pan>
    <span class=3D"c1"># grouper('ABCDEFG', 3, 'x') --&gt; ABC DEF Gxx"</sp=
an>
    <span class=3D"n">args</span> <span class=3D"o">=3D</span> <span class=
=3D"p">[</span><span class=3D"nb">iter</span><span class=3D"p">(</span><spa=
n class=3D"n">iterable</span><span class=3D"p">)]</span> <span class=3D"o">=
*</span> <span class=3D"n">n</span>
    <span class=3D"k">return</span> <span class=3D"n">zip_longest</span><sp=
an class=3D"p">(</span><span class=3D"o">*</span><span class=3D"n">args</sp=
an><span class=3D"p">,</span> <span class=3D"n">fillvalue</span><span class=
=3D"o">=3D</span><span class=3D"n">fillvalue</span><span class=3D"p">)</spa=
n>

<span class=3D"k">def</span> <span class=3D"nf">roundrobin</span><span clas=
s=3D"p">(</span><span class=3D"o">*</span><span class=3D"n">iterables</span=
><span class=3D"p">):</span>
    <span class=3D"s2">"roundrobin('ABC', 'D', 'EF') --&gt; A D E B F C"</s=
pan>
    <span class=3D"c1"># Recipe credited to George Sakkis</span>
    <span class=3D"n">num_active</span> <span class=3D"o">=3D</span> <span =
class=3D"nb">len</span><span class=3D"p">(</span><span class=3D"n">iterable=
s</span><span class=3D"p">)</span>
    <span class=3D"n">nexts</span> <span class=3D"o">=3D</span> <span class=
=3D"n">cycle</span><span class=3D"p">(</span><span class=3D"nb">iter</span>=
<span class=3D"p">(</span><span class=3D"n">it</span><span class=3D"p">)</s=
pan><span class=3D"o">.</span><span class=3D"fm">__next__</span> <span clas=
s=3D"k">for</span> <span class=3D"n">it</span> <span class=3D"ow">in</span>=
 <span class=3D"n">iterables</span><span class=3D"p">)</span>
    <span class=3D"k">while</span> <span class=3D"n">num_active</span><span=
 class=3D"p">:</span>
        <span class=3D"k">try</span><span class=3D"p">:</span>
            <span class=3D"k">for</span> <span class=3D"nb">next</span> <sp=
an class=3D"ow">in</span> <span class=3D"n">nexts</span><span class=3D"p">:=
</span>
                <span class=3D"k">yield</span> <span class=3D"nb">next</spa=
n><span class=3D"p">()</span>
        <span class=3D"k">except</span> <span class=3D"ne">StopIteration</s=
pan><span class=3D"p">:</span>
            <span class=3D"c1"># Remove the iterator we just exhausted from=
 the cycle.</span>
            <span class=3D"n">num_active</span> <span class=3D"o">-=3D</spa=
n> <span class=3D"mi">1</span>
            <span class=3D"n">nexts</span> <span class=3D"o">=3D</span> <sp=
an class=3D"n">cycle</span><span class=3D"p">(</span><span class=3D"n">isli=
ce</span><span class=3D"p">(</span><span class=3D"n">nexts</span><span clas=
s=3D"p">,</span> <span class=3D"n">num_active</span><span class=3D"p">))</s=
pan>

<span class=3D"k">def</span> <span class=3D"nf">partition</span><span class=
=3D"p">(</span><span class=3D"n">pred</span><span class=3D"p">,</span> <spa=
n class=3D"n">iterable</span><span class=3D"p">):</span>
    <span class=3D"s1">'Use a predicate to partition entries into false ent=
ries and true entries'</span>
    <span class=3D"c1"># partition(is_odd, range(10)) --&gt; 0 2 4 6 8   an=
d  1 3 5 7 9</span>
    <span class=3D"n">t1</span><span class=3D"p">,</span> <span class=3D"n"=
>t2</span> <span class=3D"o">=3D</span> <span class=3D"n">tee</span><span c=
lass=3D"p">(</span><span class=3D"n">iterable</span><span class=3D"p">)</sp=
an>
    <span class=3D"k">return</span> <span class=3D"n">filterfalse</span><sp=
an class=3D"p">(</span><span class=3D"n">pred</span><span class=3D"p">,</sp=
an> <span class=3D"n">t1</span><span class=3D"p">),</span> <span class=3D"n=
b">filter</span><span class=3D"p">(</span><span class=3D"n">pred</span><spa=
n class=3D"p">,</span> <span class=3D"n">t2</span><span class=3D"p">)</span=
>

<span class=3D"k">def</span> <span class=3D"nf">powerset</span><span class=
=3D"p">(</span><span class=3D"n">iterable</span><span class=3D"p">):</span>
    <span class=3D"s2">"powerset([1,2,3]) --&gt; () (1,) (2,) (3,) (1,2) (1=
,3) (2,3) (1,2,3)"</span>
    <span class=3D"n">s</span> <span class=3D"o">=3D</span> <span class=3D"=
nb">list</span><span class=3D"p">(</span><span class=3D"n">iterable</span><=
span class=3D"p">)</span>
    <span class=3D"k">return</span> <span class=3D"n">chain</span><span cla=
ss=3D"o">.</span><span class=3D"n">from_iterable</span><span class=3D"p">(<=
/span><span class=3D"n">combinations</span><span class=3D"p">(</span><span =
class=3D"n">s</span><span class=3D"p">,</span> <span class=3D"n">r</span><s=
pan class=3D"p">)</span> <span class=3D"k">for</span> <span class=3D"n">r</=
span> <span class=3D"ow">in</span> <span class=3D"nb">range</span><span cla=
ss=3D"p">(</span><span class=3D"nb">len</span><span class=3D"p">(</span><sp=
an class=3D"n">s</span><span class=3D"p">)</span><span class=3D"o">+</span>=
<span class=3D"mi">1</span><span class=3D"p">))</span>

<span class=3D"k">def</span> <span class=3D"nf">unique_everseen</span><span=
 class=3D"p">(</span><span class=3D"n">iterable</span><span class=3D"p">,</=
span> <span class=3D"n">key</span><span class=3D"o">=3D</span><span class=
=3D"kc">None</span><span class=3D"p">):</span>
    <span class=3D"s2">"List unique elements, preserving order. Remember al=
l elements ever seen."</span>
    <span class=3D"c1"># unique_everseen('AAAABBBCCDAABBB') --&gt; A B C D<=
/span>
    <span class=3D"c1"># unique_everseen('ABBCcAD', str.lower) --&gt; A B C=
 D</span>
    <span class=3D"n">seen</span> <span class=3D"o">=3D</span> <span class=
=3D"nb">set</span><span class=3D"p">()</span>
    <span class=3D"n">seen_add</span> <span class=3D"o">=3D</span> <span cl=
ass=3D"n">seen</span><span class=3D"o">.</span><span class=3D"n">add</span>
    <span class=3D"k">if</span> <span class=3D"n">key</span> <span class=3D=
"ow">is</span> <span class=3D"kc">None</span><span class=3D"p">:</span>
        <span class=3D"k">for</span> <span class=3D"n">element</span> <span=
 class=3D"ow">in</span> <span class=3D"n">filterfalse</span><span class=3D"=
p">(</span><span class=3D"n">seen</span><span class=3D"o">.</span><span cla=
ss=3D"fm">__contains__</span><span class=3D"p">,</span> <span class=3D"n">i=
terable</span><span class=3D"p">):</span>
            <span class=3D"n">seen_add</span><span class=3D"p">(</span><spa=
n class=3D"n">element</span><span class=3D"p">)</span>
            <span class=3D"k">yield</span> <span class=3D"n">element</span>
    <span class=3D"k">else</span><span class=3D"p">:</span>
        <span class=3D"k">for</span> <span class=3D"n">element</span> <span=
 class=3D"ow">in</span> <span class=3D"n">iterable</span><span class=3D"p">=
:</span>
            <span class=3D"n">k</span> <span class=3D"o">=3D</span> <span c=
lass=3D"n">key</span><span class=3D"p">(</span><span class=3D"n">element</s=
pan><span class=3D"p">)</span>
            <span class=3D"k">if</span> <span class=3D"n">k</span> <span cl=
ass=3D"ow">not</span> <span class=3D"ow">in</span> <span class=3D"n">seen</=
span><span class=3D"p">:</span>
                <span class=3D"n">seen_add</span><span class=3D"p">(</span>=
<span class=3D"n">k</span><span class=3D"p">)</span>
                <span class=3D"k">yield</span> <span class=3D"n">element</s=
pan>

<span class=3D"k">def</span> <span class=3D"nf">unique_justseen</span><span=
 class=3D"p">(</span><span class=3D"n">iterable</span><span class=3D"p">,</=
span> <span class=3D"n">key</span><span class=3D"o">=3D</span><span class=
=3D"kc">None</span><span class=3D"p">):</span>
    <span class=3D"s2">"List unique elements, preserving order. Remember on=
ly the element just seen."</span>
    <span class=3D"c1"># unique_justseen('AAAABBBCCDAABBB') --&gt; A B C D =
A B</span>
    <span class=3D"c1"># unique_justseen('ABBCcAD', str.lower) --&gt; A B C=
 A D</span>
    <span class=3D"k">return</span> <span class=3D"nb">map</span><span clas=
s=3D"p">(</span><span class=3D"nb">next</span><span class=3D"p">,</span> <s=
pan class=3D"nb">map</span><span class=3D"p">(</span><span class=3D"n">oper=
ator</span><span class=3D"o">.</span><span class=3D"n">itemgetter</span><sp=
an class=3D"p">(</span><span class=3D"mi">1</span><span class=3D"p">),</spa=
n> <span class=3D"n">groupby</span><span class=3D"p">(</span><span class=3D=
"n">iterable</span><span class=3D"p">,</span> <span class=3D"n">key</span><=
span class=3D"p">)))</span>

<span class=3D"k">def</span> <span class=3D"nf">iter_except</span><span cla=
ss=3D"p">(</span><span class=3D"n">func</span><span class=3D"p">,</span> <s=
pan class=3D"n">exception</span><span class=3D"p">,</span> <span class=3D"n=
">first</span><span class=3D"o">=3D</span><span class=3D"kc">None</span><sp=
an class=3D"p">):</span>
    <span class=3D"sd">""" Call a function repeatedly until an exception is=
 raised.</span>

<span class=3D"sd">    Converts a call-until-exception interface to an iter=
ator interface.</span>
<span class=3D"sd">    Like builtins.iter(func, sentinel) but uses an excep=
tion instead</span>
<span class=3D"sd">    of a sentinel to end the loop.</span>

<span class=3D"sd">    Examples:</span>
<span class=3D"sd">        iter_except(functools.partial(heappop, h), Index=
Error)   # priority queue iterator</span>
<span class=3D"sd">        iter_except(d.popitem, KeyError)                =
         # non-blocking dict iterator</span>
<span class=3D"sd">        iter_except(d.popleft, IndexError)              =
         # non-blocking deque iterator</span>
<span class=3D"sd">        iter_except(q.get_nowait, Queue.Empty)          =
         # loop over a producer Queue</span>
<span class=3D"sd">        iter_except(s.pop, KeyError)                    =
         # non-blocking set iterator</span>

<span class=3D"sd">    """</span>
    <span class=3D"k">try</span><span class=3D"p">:</span>
        <span class=3D"k">if</span> <span class=3D"n">first</span> <span cl=
ass=3D"ow">is</span> <span class=3D"ow">not</span> <span class=3D"kc">None<=
/span><span class=3D"p">:</span>
            <span class=3D"k">yield</span> <span class=3D"n">first</span><s=
pan class=3D"p">()</span>            <span class=3D"c1"># For database APIs=
 needing an initial cast to db.first()</span>
        <span class=3D"k">while</span> <span class=3D"kc">True</span><span =
class=3D"p">:</span>
            <span class=3D"k">yield</span> <span class=3D"n">func</span><sp=
an class=3D"p">()</span>
    <span class=3D"k">except</span> <span class=3D"n">exception</span><span=
 class=3D"p">:</span>
        <span class=3D"k">pass</span>

<span class=3D"k">def</span> <span class=3D"nf">first_true</span><span clas=
s=3D"p">(</span><span class=3D"n">iterable</span><span class=3D"p">,</span>=
 <span class=3D"n">default</span><span class=3D"o">=3D</span><span class=3D=
"kc">False</span><span class=3D"p">,</span> <span class=3D"n">pred</span><s=
pan class=3D"o">=3D</span><span class=3D"kc">None</span><span class=3D"p">)=
:</span>
    <span class=3D"sd">"""Returns the first true value in the iterable.</sp=
an>

<span class=3D"sd">    If no true value is found, returns *default*</span>

<span class=3D"sd">    If *pred* is not None, returns the first item</span>
<span class=3D"sd">    for which pred(item) is true.</span>

<span class=3D"sd">    """</span>
    <span class=3D"c1"># first_true([a,b,c], x) --&gt; a or b or c or x</sp=
an>
    <span class=3D"c1"># first_true([a,b], x, f) --&gt; a if f(a) else b if=
 f(b) else x</span>
    <span class=3D"k">return</span> <span class=3D"nb">next</span><span cla=
ss=3D"p">(</span><span class=3D"nb">filter</span><span class=3D"p">(</span>=
<span class=3D"n">pred</span><span class=3D"p">,</span> <span class=3D"n">i=
terable</span><span class=3D"p">),</span> <span class=3D"n">default</span><=
span class=3D"p">)</span>

<span class=3D"k">def</span> <span class=3D"nf">random_product</span><span =
class=3D"p">(</span><span class=3D"o">*</span><span class=3D"n">args</span>=
<span class=3D"p">,</span> <span class=3D"n">repeat</span><span class=3D"o"=
>=3D</span><span class=3D"mi">1</span><span class=3D"p">):</span>
    <span class=3D"s2">"Random selection from itertools.product(*args, **kw=
ds)"</span>
    <span class=3D"n">pools</span> <span class=3D"o">=3D</span> <span class=
=3D"p">[</span><span class=3D"nb">tuple</span><span class=3D"p">(</span><sp=
an class=3D"n">pool</span><span class=3D"p">)</span> <span class=3D"k">for<=
/span> <span class=3D"n">pool</span> <span class=3D"ow">in</span> <span cla=
ss=3D"n">args</span><span class=3D"p">]</span> <span class=3D"o">*</span> <=
span class=3D"n">repeat</span>
    <span class=3D"k">return</span> <span class=3D"nb">tuple</span><span cl=
ass=3D"p">(</span><span class=3D"n">random</span><span class=3D"o">.</span>=
<span class=3D"n">choice</span><span class=3D"p">(</span><span class=3D"n">=
pool</span><span class=3D"p">)</span> <span class=3D"k">for</span> <span cl=
ass=3D"n">pool</span> <span class=3D"ow">in</span> <span class=3D"n">pools<=
/span><span class=3D"p">)</span>

<span class=3D"k">def</span> <span class=3D"nf">random_permutation</span><s=
pan class=3D"p">(</span><span class=3D"n">iterable</span><span class=3D"p">=
,</span> <span class=3D"n">r</span><span class=3D"o">=3D</span><span class=
=3D"kc">None</span><span class=3D"p">):</span>
    <span class=3D"s2">"Random selection from itertools.permutations(iterab=
le, r)"</span>
    <span class=3D"n">pool</span> <span class=3D"o">=3D</span> <span class=
=3D"nb">tuple</span><span class=3D"p">(</span><span class=3D"n">iterable</s=
pan><span class=3D"p">)</span>
    <span class=3D"n">r</span> <span class=3D"o">=3D</span> <span class=3D"=
nb">len</span><span class=3D"p">(</span><span class=3D"n">pool</span><span =
class=3D"p">)</span> <span class=3D"k">if</span> <span class=3D"n">r</span>=
 <span class=3D"ow">is</span> <span class=3D"kc">None</span> <span class=3D=
"k">else</span> <span class=3D"n">r</span>
    <span class=3D"k">return</span> <span class=3D"nb">tuple</span><span cl=
ass=3D"p">(</span><span class=3D"n">random</span><span class=3D"o">.</span>=
<span class=3D"n">sample</span><span class=3D"p">(</span><span class=3D"n">=
pool</span><span class=3D"p">,</span> <span class=3D"n">r</span><span class=
=3D"p">))</span>

<span class=3D"k">def</span> <span class=3D"nf">random_combination</span><s=
pan class=3D"p">(</span><span class=3D"n">iterable</span><span class=3D"p">=
,</span> <span class=3D"n">r</span><span class=3D"p">):</span>
    <span class=3D"s2">"Random selection from itertools.combinations(iterab=
le, r)"</span>
    <span class=3D"n">pool</span> <span class=3D"o">=3D</span> <span class=
=3D"nb">tuple</span><span class=3D"p">(</span><span class=3D"n">iterable</s=
pan><span class=3D"p">)</span>
    <span class=3D"n">n</span> <span class=3D"o">=3D</span> <span class=3D"=
nb">len</span><span class=3D"p">(</span><span class=3D"n">pool</span><span =
class=3D"p">)</span>
    <span class=3D"n">indices</span> <span class=3D"o">=3D</span> <span cla=
ss=3D"nb">sorted</span><span class=3D"p">(</span><span class=3D"n">random</=
span><span class=3D"o">.</span><span class=3D"n">sample</span><span class=
=3D"p">(</span><span class=3D"nb">range</span><span class=3D"p">(</span><sp=
an class=3D"n">n</span><span class=3D"p">),</span> <span class=3D"n">r</spa=
n><span class=3D"p">))</span>
    <span class=3D"k">return</span> <span class=3D"nb">tuple</span><span cl=
ass=3D"p">(</span><span class=3D"n">pool</span><span class=3D"p">[</span><s=
pan class=3D"n">i</span><span class=3D"p">]</span> <span class=3D"k">for</s=
pan> <span class=3D"n">i</span> <span class=3D"ow">in</span> <span class=3D=
"n">indices</span><span class=3D"p">)</span>

<span class=3D"k">def</span> <span class=3D"nf">random_combination_with_rep=
lacement</span><span class=3D"p">(</span><span class=3D"n">iterable</span><=
span class=3D"p">,</span> <span class=3D"n">r</span><span class=3D"p">):</s=
pan>
    <span class=3D"s2">"Random selection from itertools.combinations_with_r=
eplacement(iterable, r)"</span>
    <span class=3D"n">pool</span> <span class=3D"o">=3D</span> <span class=
=3D"nb">tuple</span><span class=3D"p">(</span><span class=3D"n">iterable</s=
pan><span class=3D"p">)</span>
    <span class=3D"n">n</span> <span class=3D"o">=3D</span> <span class=3D"=
nb">len</span><span class=3D"p">(</span><span class=3D"n">pool</span><span =
class=3D"p">)</span>
    <span class=3D"n">indices</span> <span class=3D"o">=3D</span> <span cla=
ss=3D"nb">sorted</span><span class=3D"p">(</span><span class=3D"n">random</=
span><span class=3D"o">.</span><span class=3D"n">randrange</span><span clas=
s=3D"p">(</span><span class=3D"n">n</span><span class=3D"p">)</span> <span =
class=3D"k">for</span> <span class=3D"n">i</span> <span class=3D"ow">in</sp=
an> <span class=3D"nb">range</span><span class=3D"p">(</span><span class=3D=
"n">r</span><span class=3D"p">))</span>
    <span class=3D"k">return</span> <span class=3D"nb">tuple</span><span cl=
ass=3D"p">(</span><span class=3D"n">pool</span><span class=3D"p">[</span><s=
pan class=3D"n">i</span><span class=3D"p">]</span> <span class=3D"k">for</s=
pan> <span class=3D"n">i</span> <span class=3D"ow">in</span> <span class=3D=
"n">indices</span><span class=3D"p">)</span>

<span class=3D"k">def</span> <span class=3D"nf">nth_combination</span><span=
 class=3D"p">(</span><span class=3D"n">iterable</span><span class=3D"p">,</=
span> <span class=3D"n">r</span><span class=3D"p">,</span> <span class=3D"n=
">index</span><span class=3D"p">):</span>
    <span class=3D"s1">'Equivalent to list(combinations(iterable, r))[index=
]'</span>
    <span class=3D"n">pool</span> <span class=3D"o">=3D</span> <span class=
=3D"nb">tuple</span><span class=3D"p">(</span><span class=3D"n">iterable</s=
pan><span class=3D"p">)</span>
    <span class=3D"n">n</span> <span class=3D"o">=3D</span> <span class=3D"=
nb">len</span><span class=3D"p">(</span><span class=3D"n">pool</span><span =
class=3D"p">)</span>
    <span class=3D"k">if</span> <span class=3D"n">r</span> <span class=3D"o=
">&lt;</span> <span class=3D"mi">0</span> <span class=3D"ow">or</span> <spa=
n class=3D"n">r</span> <span class=3D"o">&gt;</span> <span class=3D"n">n</s=
pan><span class=3D"p">:</span>
        <span class=3D"k">raise</span> <span class=3D"ne">ValueError</span>
    <span class=3D"n">c</span> <span class=3D"o">=3D</span> <span class=3D"=
mi">1</span>
    <span class=3D"n">k</span> <span class=3D"o">=3D</span> <span class=3D"=
nb">min</span><span class=3D"p">(</span><span class=3D"n">r</span><span cla=
ss=3D"p">,</span> <span class=3D"n">n</span><span class=3D"o">-</span><span=
 class=3D"n">r</span><span class=3D"p">)</span>
    <span class=3D"k">for</span> <span class=3D"n">i</span> <span class=3D"=
ow">in</span> <span class=3D"nb">range</span><span class=3D"p">(</span><spa=
n class=3D"mi">1</span><span class=3D"p">,</span> <span class=3D"n">k</span=
><span class=3D"o">+</span><span class=3D"mi">1</span><span class=3D"p">):<=
/span>
        <span class=3D"n">c</span> <span class=3D"o">=3D</span> <span class=
=3D"n">c</span> <span class=3D"o">*</span> <span class=3D"p">(</span><span =
class=3D"n">n</span> <span class=3D"o">-</span> <span class=3D"n">k</span> =
<span class=3D"o">+</span> <span class=3D"n">i</span><span class=3D"p">)</s=
pan> <span class=3D"o">//</span> <span class=3D"n">i</span>
    <span class=3D"k">if</span> <span class=3D"n">index</span> <span class=
=3D"o">&lt;</span> <span class=3D"mi">0</span><span class=3D"p">:</span>
        <span class=3D"n">index</span> <span class=3D"o">+=3D</span> <span =
class=3D"n">c</span>
    <span class=3D"k">if</span> <span class=3D"n">index</span> <span class=
=3D"o">&lt;</span> <span class=3D"mi">0</span> <span class=3D"ow">or</span>=
 <span class=3D"n">index</span> <span class=3D"o">&gt;=3D</span> <span clas=
s=3D"n">c</span><span class=3D"p">:</span>
        <span class=3D"k">raise</span> <span class=3D"ne">IndexError</span>
    <span class=3D"n">result</span> <span class=3D"o">=3D</span> <span clas=
s=3D"p">[]</span>
    <span class=3D"k">while</span> <span class=3D"n">r</span><span class=3D=
"p">:</span>
        <span class=3D"n">c</span><span class=3D"p">,</span> <span class=3D=
"n">n</span><span class=3D"p">,</span> <span class=3D"n">r</span> <span cla=
ss=3D"o">=3D</span> <span class=3D"n">c</span><span class=3D"o">*</span><sp=
an class=3D"n">r</span><span class=3D"o">//</span><span class=3D"n">n</span=
><span class=3D"p">,</span> <span class=3D"n">n</span><span class=3D"o">-</=
span><span class=3D"mi">1</span><span class=3D"p">,</span> <span class=3D"n=
">r</span><span class=3D"o">-</span><span class=3D"mi">1</span>
        <span class=3D"k">while</span> <span class=3D"n">index</span> <span=
 class=3D"o">&gt;=3D</span> <span class=3D"n">c</span><span class=3D"p">:</=
span>
            <span class=3D"n">index</span> <span class=3D"o">-=3D</span> <s=
pan class=3D"n">c</span>
            <span class=3D"n">c</span><span class=3D"p">,</span> <span clas=
s=3D"n">n</span> <span class=3D"o">=3D</span> <span class=3D"n">c</span><sp=
an class=3D"o">*</span><span class=3D"p">(</span><span class=3D"n">n</span>=
<span class=3D"o">-</span><span class=3D"n">r</span><span class=3D"p">)</sp=
an><span class=3D"o">//</span><span class=3D"n">n</span><span class=3D"p">,=
</span> <span class=3D"n">n</span><span class=3D"o">-</span><span class=3D"=
mi">1</span>
        <span class=3D"n">result</span><span class=3D"o">.</span><span clas=
s=3D"n">append</span><span class=3D"p">(</span><span class=3D"n">pool</span=
><span class=3D"p">[</span><span class=3D"o">-</span><span class=3D"mi">1</=
span><span class=3D"o">-</span><span class=3D"n">n</span><span class=3D"p">=
])</span>
    <span class=3D"k">return</span> <span class=3D"nb">tuple</span><span cl=
ass=3D"p">(</span><span class=3D"n">result</span><span class=3D"p">)</span>
</pre></div>
</div>
</div>
</div>


          </div>
        </div>
      </div>
      <div class=3D"sphinxsidebar" role=3D"navigation" aria-label=3D"main n=
avigation">
        <div class=3D"sphinxsidebarwrapper" style=3D"float: left; margin-ri=
ght: 0px; width: 202px; top: 0px;">
  <h3><a href=3D"https://docs.python.org/3/contents.html">Table of Contents=
</a></h3>
  <ul>
<li><a class=3D"reference internal" href=3D"https://docs.python.org/3/libra=
ry/itertools.html#"><code class=3D"xref py py-mod docutils literal notransl=
ate"><span class=3D"pre">itertools</span></code> =E2=80=94 Functions creati=
ng iterators for efficient looping</a><ul>
<li><a class=3D"reference internal" href=3D"https://docs.python.org/3/libra=
ry/itertools.html#itertool-functions">Itertool functions</a></li>
<li><a class=3D"reference internal" href=3D"https://docs.python.org/3/libra=
ry/itertools.html#itertools-recipes">Itertools Recipes</a></li>
</ul>
</li>
</ul>

  <h4>Previous topic</h4>
  <p class=3D"topless"><a href=3D"https://docs.python.org/3/library/functio=
nal.html" title=3D"previous chapter">Functional Programming Modules</a></p>
  <h4>Next topic</h4>
  <p class=3D"topless"><a href=3D"https://docs.python.org/3/library/functoo=
ls.html" title=3D"next chapter"><code class=3D"xref py py-mod docutils lite=
ral notranslate"><span class=3D"pre">functools</span></code> =E2=80=94 High=
er-order functions and operations on callable objects</a></p>
  <div role=3D"note" aria-label=3D"source link">
    <h3>This Page</h3>
    <ul class=3D"this-page-menu">
      <li><a href=3D"https://docs.python.org/3/bugs.html">Report a Bug</a><=
/li>
      <li>
        <a href=3D"https://github.com/python/cpython/blob/3.8/Doc/library/i=
tertools.rst" rel=3D"nofollow">Show Source
        </a>
      </li>
    </ul>
  </div>
        </div>
      <div id=3D"sidebarbutton" title=3D"Collapse sidebar" style=3D"border-=
radius: 0px 5px 5px 0px; color: rgb(68, 68, 68); background-color: rgb(204,=
 204, 204); font-size: 1.2em; cursor: pointer; height: 16224.3px; padding-t=
op: 1px; padding-left: 1px; margin-left: 218px;"><span style=3D"display: bl=
ock; position: fixed; top: 458px;">=C2=AB</span></div></div>
      <div class=3D"clearer"></div>
    </div> =20
    <div class=3D"related" role=3D"navigation" aria-label=3D"related naviga=
tion">
      <h3>Navigation</h3>
      <ul>
        <li class=3D"right" style=3D"margin-right: 10px">
          <a href=3D"https://docs.python.org/3/genindex.html" title=3D"Gene=
ral Index">index</a></li>
        <li class=3D"right">
          <a href=3D"https://docs.python.org/3/py-modindex.html" title=3D"P=
ython Module Index">modules</a> |</li>
        <li class=3D"right">
          <a href=3D"https://docs.python.org/3/library/functools.html" titl=
e=3D"functools =E2=80=94 Higher-order functions and operations on callable =
objects">next</a> |</li>
        <li class=3D"right">
          <a href=3D"https://docs.python.org/3/library/functional.html" tit=
le=3D"Functional Programming Modules">previous</a> |</li>

    <li><img src=3D"https://docs.python.org/3/_static/py.png" alt=3D"" styl=
e=3D"vertical-align: middle; margin-top: -1px"></li>
    <li><a href=3D"https://www.python.org/">Python</a> =C2=BB</li>
   =20

    <li>
      <a href=3D"https://docs.python.org/3/index.html">3.8.4rc1 Documentati=
on</a> =C2=BB
    </li>

          <li class=3D"nav-item nav-item-1"><a href=3D"https://docs.python.=
org/3/library/index.html">The Python Standard Library</a> =C2=BB</li>
          <li class=3D"nav-item nav-item-2"><a href=3D"https://docs.python.=
org/3/library/functional.html">Functional Programming Modules</a> =C2=BB</l=
i>
    <li class=3D"right">
       =20

    <div class=3D"inline-search" style=3D"" role=3D"search">
        <form class=3D"inline-search" action=3D"https://docs.python.org/3/s=
earch.html" method=3D"get">
          <input placeholder=3D"Quick search" type=3D"text" name=3D"q">
          <input type=3D"submit" value=3D"Go">
         =20
         =20
        </form>
    </div>
   =20
         |
    </li>

      </ul>
    </div> =20
    <div class=3D"footer">
    =C2=A9 <a href=3D"https://docs.python.org/3/copyright.html">Copyright</=
a> 2001-2020, Python Software Foundation.
    <br>

    The Python Software Foundation is a non-profit corporation.
<a href=3D"https://www.python.org/psf/donations/">Please donate.</a>
<br>
    <br>

    Last updated on Jul 02, 2020.
    <a href=3D"https://docs.python.org/3/bugs.html">Found a bug</a>?
    <br>

    Created using <a href=3D"https://www.sphinx-doc.org/">Sphinx</a> 2.3.1.
    </div>

   =20
 =20
</body></html>
------MultipartBoundary--iCxKw0CgqRlXTKAGpKMnE6M3THKWidLpodYtktEZFt----
Content-Type: text/css
Content-Transfer-Encoding: quoted-printable
Content-Location: cid:css-dcec73bf-e777-41c3-b914-b83e59c97c3a@mhtml.blink

@charset "utf-8";

@media only screen {
  table.full-width-table { width: 100%; }
}
------MultipartBoundary--iCxKw0CgqRlXTKAGpKMnE6M3THKWidLpodYtktEZFt----
Content-Type: text/css
Content-Transfer-Encoding: quoted-printable
Content-Location: https://docs.python.org/3/_static/pydoctheme.css

@charset "utf-8";

@import url("default.css");

body { background-color: white; margin-left: 1em; margin-right: 1em; }

div.related { margin-bottom: 1.2em; padding: 0.5em 0px; border-top: 1px sol=
id rgb(204, 204, 204); margin-top: 0.5em; }

div.related a:hover { color: rgb(0, 149, 196); }

div.related:first-child { border-top: 0px; border-bottom: 1px solid rgb(204=
, 204, 204); }

.inline-search { display: inline; }

form.inline-search input { display: inline; }

form.inline-search input[type=3D"submit"] { width: 40px; }

div.sphinxsidebar { background-color: rgb(238, 238, 238); border-radius: 5p=
x; line-height: 130%; font-size: smaller; }

div.sphinxsidebar h3, div.sphinxsidebar h4 { margin-top: 1.5em; }

div.sphinxsidebarwrapper > h3:first-child { margin-top: 0.2em; }

div.sphinxsidebarwrapper > ul > li > ul > li { margin-bottom: 0.4em; }

div.sphinxsidebar a:hover { color: rgb(0, 149, 196); }

form.inline-search input, div.sphinxsidebar input { font-family: "Lucida Gr=
ande", Arial, sans-serif; border: 1px solid rgb(153, 153, 153); font-size: =
smaller; border-radius: 3px; }

div.sphinxsidebar input[type=3D"text"] { max-width: 150px; }

div.body { padding: 0px 0px 0px 1.2em; }

div.body p { line-height: 140%; }

div.body h1, div.body h2, div.body h3, div.body h4, div.body h5, div.body h=
6 { margin: 0px; border: 0px; padding: 0.3em 0px; }

div.body hr { border: 0px; background-color: rgb(204, 204, 204); height: 1p=
x; }

div.body pre { border-radius: 3px; border: 1px solid rgb(170, 204, 153); }

div.body div.admonition, div.body div.impl-detail { border-radius: 3px; }

div.body div.impl-detail > p { margin: 0px; }

div.body div.seealso { border: 1px solid rgb(221, 221, 102); }

div.body a { color: rgb(0, 114, 170); }

div.body a:visited { color: rgb(99, 99, 187); }

div.body a:hover { color: rgb(0, 176, 228); }

tt, code, pre { font-family: monospace, sans-serif; font-size: 96.5%; }

div.body tt, div.body code { border-radius: 3px; }

div.body tt.descname, div.body code.descname { font-size: 120%; }

div.body tt.xref, div.body a tt, div.body code.xref, div.body a code { font=
-weight: normal; }

table.docutils { border: 1px solid rgb(221, 221, 221); min-width: 20%; bord=
er-radius: 3px; margin-top: 10px; margin-bottom: 10px; }

table.docutils td, table.docutils th { border-radius: 3px; border: 1px soli=
d rgb(221, 221, 221) !important; }

table p, table li { text-align: left !important; }

table.docutils th { background-color: rgb(238, 238, 238); padding: 0.3em 0.=
5em; }

table.docutils td { background-color: white; padding: 0.3em 0.5em; }

table.footnote, table.footnote td { border: 0px !important; }

div.footer { line-height: 150%; margin-top: -2em; text-align: right; width:=
 auto; margin-right: 10px; }

div.footer a:hover { color: rgb(0, 149, 196); }

.refcount { color: rgb(0, 102, 0); }

.stableabi { color: rgb(34, 34, 153); }

.highlight { background: none !important; }

dl > dt span ~ em { font-family: monospace, sans-serif; }
------MultipartBoundary--iCxKw0CgqRlXTKAGpKMnE6M3THKWidLpodYtktEZFt----
Content-Type: text/css
Content-Transfer-Encoding: quoted-printable
Content-Location: https://docs.python.org/3/_static/default.css

@charset "utf-8";

@import url("classic.css");
------MultipartBoundary--iCxKw0CgqRlXTKAGpKMnE6M3THKWidLpodYtktEZFt----
Content-Type: text/css
Content-Transfer-Encoding: quoted-printable
Content-Location: https://docs.python.org/3/_static/classic.css

@charset "utf-8";

@import url("basic.css");

html { background-color: rgb(255, 255, 255); }

body { font-family: "Lucida Grande", Arial, sans-serif; font-size: 100%; ba=
ckground-color: white; color: rgb(0, 0, 0); margin: 0px; padding: 0px; }

div.document { background-color: white; }

div.documentwrapper { float: left; width: 100%; }

div.bodywrapper { margin: 0px 0px 0px 230px; }

div.body { background-color: white; color: rgb(34, 34, 34); padding: 0px 20=
px 30px; }

div.footer { color: rgb(85, 85, 85); width: 100%; padding: 9px 0px; text-al=
ign: center; font-size: 75%; }

div.footer a { color: rgb(85, 85, 85); text-decoration: underline; }

div.related { background-color: white; line-height: 30px; color: rgb(102, 1=
02, 102); }

div.related a { color: rgb(68, 68, 68); }

div.sphinxsidebar { }

div.sphinxsidebar h3 { font-family: "Lucida Grande", Arial, sans-serif; col=
or: rgb(68, 68, 68); font-size: 1.4em; font-weight: normal; margin: 0px; pa=
dding: 0px; }

div.sphinxsidebar h3 a { color: rgb(68, 68, 68); }

div.sphinxsidebar h4 { font-family: "Lucida Grande", Arial, sans-serif; col=
or: rgb(68, 68, 68); font-size: 1.3em; font-weight: normal; margin: 5px 0px=
 0px; padding: 0px; }

div.sphinxsidebar p { color: rgb(68, 68, 68); }

div.sphinxsidebar p.topless { margin: 5px 10px 10px; }

div.sphinxsidebar ul { margin: 10px; padding: 0px; color: rgb(68, 68, 68); =
}

div.sphinxsidebar a { color: rgb(68, 68, 68); }

div.sphinxsidebar input { border: 1px solid rgb(68, 68, 68); font-family: s=
ans-serif; font-size: 1em; }

div#sidebarbutton { background-color: rgb(60, 110, 131); }

a { color: rgb(0, 144, 192); text-decoration: none; }

a:visited { color: rgb(0, 96, 143); text-decoration: none; }

a:hover { text-decoration: underline; }

div.body h1, div.body h2, div.body h3, div.body h4, div.body h5, div.body h=
6 { font-family: "Lucida Grande", Arial, sans-serif; background-color: whit=
e; font-weight: normal; color: rgb(26, 26, 26); border-bottom: 1px solid rg=
b(204, 204, 204); margin: 20px -20px 10px; padding: 3px 0px 3px 10px; }

div.body h1 { margin-top: 0px; font-size: 200%; }

div.body h2 { font-size: 160%; }

div.body h3 { font-size: 140%; }

div.body h4 { font-size: 120%; }

div.body h5 { font-size: 110%; }

div.body h6 { font-size: 100%; }

a.headerlink { color: rgb(170, 170, 170); font-size: 0.8em; padding: 0px 4p=
x; text-decoration: none; }

a.headerlink:hover { background-color: rgb(170, 170, 170); color: white; }

div.body p, div.body dd, div.body li, div.body blockquote { text-align: jus=
tify; line-height: 130%; }

div.admonition p.admonition-title + p { display: inline; }

div.admonition p { margin-bottom: 5px; }

div.admonition pre { margin-bottom: 5px; }

div.admonition ul, div.admonition ol { margin-bottom: 5px; }

div.note { background-color: rgb(238, 238, 238); border: 1px solid rgb(204,=
 204, 204); }

div.seealso { background-color: rgb(255, 255, 204); border: 1px solid rgb(2=
55, 255, 102); }

div.topic { background-color: rgb(238, 238, 238); }

div.warning { background-color: rgb(255, 228, 228); border: 1px solid rgb(2=
55, 102, 102); }

p.admonition-title { display: inline; }

p.admonition-title::after { content: ":"; }

pre { padding: 5px; background-color: rgb(238, 255, 204); color: rgb(51, 51=
, 51); line-height: 120%; border-top: 1px solid rgb(170, 204, 153); border-=
bottom: 1px solid rgb(170, 204, 153); border-image: initial; border-left: n=
one; border-right: none; }

code { background-color: rgb(236, 240, 243); padding: 0px 1px; font-size: 0=
.95em; }

th, dl.field-list > dt { background-color: rgb(238, 221, 238); }

.warning code { background: rgb(239, 194, 194); }

.note code { background: rgb(214, 214, 214); }

.viewcode-back { font-family: "Lucida Grande", Arial, sans-serif; }

div.viewcode-block:target { background-color: rgb(244, 222, 191); border-to=
p: 1px solid rgb(170, 204, 153); border-bottom: 1px solid rgb(170, 204, 153=
); }

div.code-block-caption { color: rgb(239, 239, 239); background-color: rgb(2=
8, 78, 99); }
------MultipartBoundary--iCxKw0CgqRlXTKAGpKMnE6M3THKWidLpodYtktEZFt----
Content-Type: text/css
Content-Transfer-Encoding: quoted-printable
Content-Location: https://docs.python.org/3/_static/basic.css

@charset "utf-8";

div.clearer { clear: both; }

div.related { width: 100%; font-size: 90%; }

div.related h3 { display: none; }

div.related ul { margin: 0px; padding: 0px 0px 0px 10px; list-style: none; =
}

div.related li { display: inline; }

div.related li.right { float: right; margin-right: 5px; }

div.sphinxsidebarwrapper { padding: 10px 5px 0px 10px; }

div.sphinxsidebar { float: left; width: 230px; margin-left: -100%; font-siz=
e: 90%; overflow-wrap: break-word; }

div.sphinxsidebar ul { list-style: none; }

div.sphinxsidebar ul ul, div.sphinxsidebar ul.want-points { margin-left: 20=
px; list-style: square; }

div.sphinxsidebar ul ul { margin-top: 0px; margin-bottom: 0px; }

div.sphinxsidebar form { margin-top: 10px; }

div.sphinxsidebar input { border: 1px solid rgb(152, 219, 204); font-family=
: sans-serif; font-size: 1em; }

div.sphinxsidebar #searchbox form.search { overflow: hidden; }

div.sphinxsidebar #searchbox input[type=3D"text"] { float: left; width: 80%=
; padding: 0.25em; box-sizing: border-box; }

div.sphinxsidebar #searchbox input[type=3D"submit"] { float: left; width: 2=
0%; border-left: none; padding: 0.25em; box-sizing: border-box; }

img { border: 0px; max-width: 100%; }

ul.search { margin: 10px 0px 0px 20px; padding: 0px; }

ul.search li { padding: 5px 0px 5px 20px; background-image: url("file.png")=
; background-repeat: no-repeat; background-position: 0px 7px; }

ul.search li a { font-weight: bold; }

ul.search li div.context { color: rgb(136, 136, 136); margin: 2px 0px 0px 3=
0px; text-align: left; }

ul.keywordmatches li.goodmatch a { font-weight: bold; }

table.contentstable { width: 90%; margin-left: auto; margin-right: auto; }

table.contentstable p.biglink { line-height: 150%; }

a.biglink { font-size: 1.3em; }

span.linkdescr { font-style: italic; padding-top: 5px; font-size: 90%; }

table.indextable { width: 100%; }

table.indextable td { text-align: left; vertical-align: top; }

table.indextable ul { margin-top: 0px; margin-bottom: 0px; list-style-type:=
 none; }

table.indextable > tbody > tr > td > ul { padding-left: 0em; }

table.indextable tr.pcap { height: 10px; }

table.indextable tr.cap { margin-top: 10px; background-color: rgb(242, 242,=
 242); }

img.toggler { margin-right: 3px; margin-top: 3px; cursor: pointer; }

div.modindex-jumpbox { border-top: 1px solid rgb(221, 221, 221); border-bot=
tom: 1px solid rgb(221, 221, 221); margin: 1em 0px; padding: 0.4em; }

div.genindex-jumpbox { border-top: 1px solid rgb(221, 221, 221); border-bot=
tom: 1px solid rgb(221, 221, 221); margin: 1em 0px; padding: 0.4em; }

table.modindextable td { padding: 2px; border-collapse: collapse; }

div.body { min-width: 450px; max-width: 800px; }

div.body p, div.body dd, div.body li, div.body blockquote { }

a.headerlink { visibility: hidden; }

a.brackets::before, span.brackets > a::before { content: "["; }

a.brackets::after, span.brackets > a::after { content: "]"; }

h1:hover > a.headerlink, h2:hover > a.headerlink, h3:hover > a.headerlink, =
h4:hover > a.headerlink, h5:hover > a.headerlink, h6:hover > a.headerlink, =
dt:hover > a.headerlink, caption:hover > a.headerlink, p.caption:hover > a.=
headerlink, div.code-block-caption:hover > a.headerlink { visibility: visib=
le; }

div.body p.caption { text-align: inherit; }

div.body td { text-align: left; }

.first { margin-top: 0px !important; }

p.rubric { margin-top: 30px; font-weight: bold; }

img.align-left, .figure.align-left, object.align-left { clear: left; float:=
 left; margin-right: 1em; }

img.align-right, .figure.align-right, object.align-right { clear: right; fl=
oat: right; margin-left: 1em; }

img.align-center, .figure.align-center, object.align-center { display: bloc=
k; margin-left: auto; margin-right: auto; }

img.align-default, .figure.align-default { display: block; margin-left: aut=
o; margin-right: auto; }

.align-left { text-align: left; }

.align-center { text-align: center; }

.align-default { text-align: center; }

.align-right { text-align: right; }

div.sidebar { margin: 0px 0px 0.5em 1em; border: 1px solid rgb(221, 221, 18=
7); padding: 7px 7px 0px; background-color: rgb(255, 255, 238); width: 40%;=
 float: right; }

p.sidebar-title { font-weight: bold; }

div.topic { border: 1px solid rgb(204, 204, 204); padding: 7px 7px 0px; mar=
gin: 10px 0px; }

p.topic-title { font-size: 1.1em; font-weight: bold; margin-top: 10px; }

div.admonition { margin-top: 10px; margin-bottom: 10px; padding: 7px; }

div.admonition dt { font-weight: bold; }

div.admonition dl { margin-bottom: 0px; }

p.admonition-title { margin: 0px 10px 5px 0px; font-weight: bold; }

div.body p.centered { text-align: center; margin-top: 25px; }

table.docutils { border: 0px; border-collapse: collapse; }

table.align-center { margin-left: auto; margin-right: auto; }

table.align-default { margin-left: auto; margin-right: auto; }

table caption span.caption-number { font-style: italic; }

table caption span.caption-text { }

table.docutils td, table.docutils th { padding: 1px 8px 1px 5px; border-wid=
th: 0px 0px 1px; border-top-style: initial; border-top-color: initial; bord=
er-left-style: initial; border-left-color: initial; border-right-style: ini=
tial; border-right-color: initial; border-bottom-style: solid; border-botto=
m-color: rgb(170, 170, 170); }

table.footnote td, table.footnote th { border: 0px !important; }

th { text-align: left; padding-right: 5px; }

table.citation { border-left: 1px solid gray; margin-left: 1px; }

table.citation td { border-bottom: none; }

th > p:first-child, td > p:first-child { margin-top: 0px; }

th > p:last-child, td > p:last-child { margin-bottom: 0px; }

div.figure { margin: 0.5em; padding: 0.5em; }

div.figure p.caption { padding: 0.3em; }

div.figure p.caption span.caption-number { font-style: italic; }

div.figure p.caption span.caption-text { }

table.field-list td, table.field-list th { border: 0px !important; }

.field-list ul { margin: 0px; padding-left: 1em; }

.field-list p { margin: 0px; }

.field-name { hyphens: manual; }

table.hlist td { vertical-align: top; }

ol.arabic { list-style: decimal; }

ol.loweralpha { list-style: lower-alpha; }

ol.upperalpha { list-style: upper-alpha; }

ol.lowerroman { list-style: lower-roman; }

ol.upperroman { list-style: upper-roman; }

li > p:first-child { margin-top: 0px; }

li > p:last-child { margin-bottom: 0px; }

dl.footnote > dt, dl.citation > dt { float: left; }

dl.footnote > dd, dl.citation > dd { margin-bottom: 0em; }

dl.footnote > dd::after, dl.citation > dd::after { content: ""; clear: both=
; }

dl.field-list { display: grid; grid-template-columns: fit-content(30%) auto=
; }

dl.field-list > dt { font-weight: bold; word-break: break-word; padding-lef=
t: 0.5em; padding-right: 5px; }

dl.field-list > dt::after { content: ":"; }

dl.field-list > dd { padding-left: 0.5em; margin-top: 0em; margin-left: 0em=
; margin-bottom: 0em; }

dl { margin-bottom: 15px; }

dd > p:first-child { margin-top: 0px; }

dd ul, dd table { margin-bottom: 10px; }

dd { margin-top: 3px; margin-bottom: 10px; margin-left: 30px; }

dt:target, span.highlighted { background-color: rgb(251, 229, 78); }

rect.highlighted { fill: rgb(251, 229, 78); }

dl.glossary dt { font-weight: bold; font-size: 1.1em; }

.optional { font-size: 1.3em; }

.sig-paren { font-size: larger; }

.versionmodified { font-style: italic; }

.system-message { background-color: rgb(255, 221, 170); padding: 5px; borde=
r: 3px solid red; }

.footnote:target { background-color: rgb(255, 255, 170); }

.line-block { display: block; margin-top: 1em; margin-bottom: 1em; }

.line-block .line-block { margin-top: 0px; margin-bottom: 0px; margin-left:=
 1.5em; }

.guilabel, .menuselection { font-family: sans-serif; }

.accelerator { text-decoration: underline; }

.classifier { font-style: oblique; }

.classifier::before { font-style: normal; margin: 0.5em; content: ":"; }

abbr, acronym { border-bottom: 1px dotted; cursor: help; }

pre { overflow: auto hidden; }

span.pre { hyphens: none; }

td.linenos pre { padding: 5px 0px; border: 0px; background-color: transpare=
nt; color: rgb(170, 170, 170); }

table.highlighttable { margin-left: 0.5em; }

table.highlighttable td { padding: 0px 0.5em; }

div.code-block-caption { padding: 2px 5px; font-size: small; }

div.code-block-caption code { background-color: transparent; }

div.code-block-caption + div > div.highlight > pre { margin-top: 0px; }

div.doctest > div.highlight span.gp { user-select: none; }

div.code-block-caption span.caption-number { padding: 0.1em 0.3em; font-sty=
le: italic; }

div.code-block-caption span.caption-text { }

div.literal-block-wrapper { padding: 1em 1em 0px; }

div.literal-block-wrapper div.highlight { margin: 0px; }

code.descname { background-color: transparent; font-weight: bold; font-size=
: 1.2em; }

code.descclassname { background-color: transparent; }

code.xref, a code { background-color: transparent; font-weight: bold; }

h1 code, h2 code, h3 code, h4 code, h5 code, h6 code { background-color: tr=
ansparent; }

.viewcode-link { float: right; }

.viewcode-back { float: right; font-family: sans-serif; }

div.viewcode-block:target { margin: -1px -10px; padding: 0px 10px; }

img.math { vertical-align: middle; }

div.body div.math p { text-align: center; }

span.eqno { float: right; }

span.eqno a.headerlink { position: relative; left: 0px; z-index: 1; }

div.math:hover a.headerlink { visibility: visible; }

@media print {
  div.document, div.documentwrapper, div.bodywrapper { width: 100%; margin:=
 0px !important; }
  div.sphinxsidebar, div.related, div.footer, #top-link { display: none; }
}
------MultipartBoundary--iCxKw0CgqRlXTKAGpKMnE6M3THKWidLpodYtktEZFt----
Content-Type: text/css
Content-Transfer-Encoding: quoted-printable
Content-Location: https://docs.python.org/3/_static/pygments.css

@charset "utf-8";

.highlight .hll { background-color: rgb(255, 255, 204); }

.highlight { background: rgb(238, 255, 204); }

.highlight .c { color: rgb(64, 128, 144); font-style: italic; }

.highlight .err { border: 1px solid rgb(255, 0, 0); }

.highlight .k { color: rgb(0, 112, 32); font-weight: bold; }

.highlight .o { color: rgb(102, 102, 102); }

.highlight .ch { color: rgb(64, 128, 144); font-style: italic; }

.highlight .cm { color: rgb(64, 128, 144); font-style: italic; }

.highlight .cp { color: rgb(0, 112, 32); }

.highlight .cpf { color: rgb(64, 128, 144); font-style: italic; }

.highlight .c1 { color: rgb(64, 128, 144); font-style: italic; }

.highlight .cs { color: rgb(64, 128, 144); background-color: rgb(255, 240, =
240); }

.highlight .gd { color: rgb(160, 0, 0); }

.highlight .ge { font-style: italic; }

.highlight .gr { color: rgb(255, 0, 0); }

.highlight .gh { color: rgb(0, 0, 128); font-weight: bold; }

.highlight .gi { color: rgb(0, 160, 0); }

.highlight .go { color: rgb(51, 51, 51); }

.highlight .gp { color: rgb(198, 93, 9); font-weight: bold; }

.highlight .gs { font-weight: bold; }

.highlight .gu { color: rgb(128, 0, 128); font-weight: bold; }

.highlight .gt { color: rgb(0, 68, 221); }

.highlight .kc { color: rgb(0, 112, 32); font-weight: bold; }

.highlight .kd { color: rgb(0, 112, 32); font-weight: bold; }

.highlight .kn { color: rgb(0, 112, 32); font-weight: bold; }

.highlight .kp { color: rgb(0, 112, 32); }

.highlight .kr { color: rgb(0, 112, 32); font-weight: bold; }

.highlight .kt { color: rgb(144, 32, 0); }

.highlight .m { color: rgb(32, 128, 80); }

.highlight .s { color: rgb(64, 112, 160); }

.highlight .na { color: rgb(64, 112, 160); }

.highlight .nb { color: rgb(0, 112, 32); }

.highlight .nc { color: rgb(14, 132, 181); font-weight: bold; }

.highlight .no { color: rgb(96, 173, 213); }

.highlight .nd { color: rgb(85, 85, 85); font-weight: bold; }

.highlight .ni { color: rgb(213, 85, 55); font-weight: bold; }

.highlight .ne { color: rgb(0, 112, 32); }

.highlight .nf { color: rgb(6, 40, 126); }

.highlight .nl { color: rgb(0, 32, 112); font-weight: bold; }

.highlight .nn { color: rgb(14, 132, 181); font-weight: bold; }

.highlight .nt { color: rgb(6, 40, 115); font-weight: bold; }

.highlight .nv { color: rgb(187, 96, 213); }

.highlight .ow { color: rgb(0, 112, 32); font-weight: bold; }

.highlight .w { color: rgb(187, 187, 187); }

.highlight .mb { color: rgb(32, 128, 80); }

.highlight .mf { color: rgb(32, 128, 80); }

.highlight .mh { color: rgb(32, 128, 80); }

.highlight .mi { color: rgb(32, 128, 80); }

.highlight .mo { color: rgb(32, 128, 80); }

.highlight .sa { color: rgb(64, 112, 160); }

.highlight .sb { color: rgb(64, 112, 160); }

.highlight .sc { color: rgb(64, 112, 160); }

.highlight .dl { color: rgb(64, 112, 160); }

.highlight .sd { color: rgb(64, 112, 160); font-style: italic; }

.highlight .s2 { color: rgb(64, 112, 160); }

.highlight .se { color: rgb(64, 112, 160); font-weight: bold; }

.highlight .sh { color: rgb(64, 112, 160); }

.highlight .si { color: rgb(112, 160, 208); font-style: italic; }

.highlight .sx { color: rgb(198, 93, 9); }

.highlight .sr { color: rgb(35, 83, 136); }

.highlight .s1 { color: rgb(64, 112, 160); }

.highlight .ss { color: rgb(81, 121, 24); }

.highlight .bp { color: rgb(0, 112, 32); }

.highlight .fm { color: rgb(6, 40, 126); }

.highlight .vc { color: rgb(187, 96, 213); }

.highlight .vg { color: rgb(187, 96, 213); }

.highlight .vi { color: rgb(187, 96, 213); }

.highlight .vm { color: rgb(187, 96, 213); }

.highlight .il { color: rgb(32, 128, 80); }
------MultipartBoundary--iCxKw0CgqRlXTKAGpKMnE6M3THKWidLpodYtktEZFt----
Content-Type: image/png
Content-Transfer-Encoding: base64
Content-Location: https://docs.python.org/3/_static/py.png

iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAAAXNSR0IArs4c6QAAAAZiS0dEAP8A
/wD/oL2nkwAAAAlwSFlzAAALEwAACxMBAJqcGAAAAAd0SU1FB9gEGxE4IQYzJ14AAAI3SURBVDjL
ZZNPSFVBFIe/e9+zd3silBCl0SZoU4s2rVq0EB5tQip4UNvATVGu3QRBiyAi2iltWkgbF5EgRhFF
RpiWtrWIzDIV1Pzz7p15M2fmtvDevOqBw8DM9zvnN8ycgF3R/eDtM2mac96ZdrFNxBikqbRV+vHH
/ut9gAZczoe7C3gnF0f6au1OLM5avFi8d1Ea+JvAMSAq8nsKOGs5f2cYJ3Y7rc2PO4BqkS8DdD98
f9tbe1ysCoxOBo1qlEXHJWcM4b5KPU19zleA0o4Clx99eO3EdqVewHsCoFRugUoVghJO7A6H6Vx9
wdtYi27cr5x6dy/03nVtWTU7bWeZh6jNUcAiCaFTURl9A+gs56AviHzh3mnqtdPxm6knfQPLU7Ua
okASQq/agY7yDrG16Mba6Pz48NP56VdrgAApYObGaicPtkovToFLQBKA/WUxTe3FRk4san15aGKg
d3Dj560rrdGJS6FT0X9YYvLuiMKL1kAQOpHZ3PqfyZfP41+9PW1VfzX0RXFSECfgNEmSTgImdDru
F2O0E8vvqZG1auQubAsKooIYYHpGvwA2g+xndQBHgWa6cG0ih5cW/w6VvEq3nChwCoBvs+bL2Z7V
ceBHGTDAIrABpMVuhw+4OiLgLIglOLPYBTQAlfErIeCzjRVg1dtEb1kt5Omv+DTV2YssAN+zNdkz
C42N9brV8WdvYp07seOdM2Of1F3AAknW0AJpwN6IgEPAEaANaMlcbmZdl7KRBuAfAb+v//yMAJoA
AAAASUVORK5CYII=

------MultipartBoundary--iCxKw0CgqRlXTKAGpKMnE6M3THKWidLpodYtktEZFt------
